
TinyBoot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098e4  080098e4  000198e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098ec  080098ec  000198ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080098f0  080098f0  000198f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .boot_constants 00000010  08009ff0  08009ff0  00029ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .data         00000068  20000000  080098f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ram2         00000000  00000000  00000000  0002a000  2**0
                  CONTENTS
  9 .bss          00000c50  20000068  20000068  00030068  2**2
                  ALLOC
 10 ._user_heap_stack 00000200  20000cb8  20000cb8  00030068  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002a000  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a889  00000000  00000000  0002a02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b15  00000000  00000000  000448b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000493c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  0004abd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000144a5  00000000  00000000  0004c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000071eb  00000000  00000000  00060635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00067820  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000065a0  00000000  00000000  00067870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stabstr      0000003f  00000000  00000000  0006de10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080094f8 	.word	0x080094f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080094f8 	.word	0x080094f8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2f>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab0:	bf24      	itt	cs
 8000ab2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aba:	d90d      	bls.n	8000ad8 <__aeabi_d2f+0x30>
 8000abc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000acc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad0:	bf08      	it	eq
 8000ad2:	f020 0001 	biceq.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000adc:	d121      	bne.n	8000b22 <__aeabi_d2f+0x7a>
 8000ade:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ae2:	bfbc      	itt	lt
 8000ae4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	4770      	bxlt	lr
 8000aea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af2:	f1c2 0218 	rsb	r2, r2, #24
 8000af6:	f1c2 0c20 	rsb	ip, r2, #32
 8000afa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afe:	fa20 f002 	lsr.w	r0, r0, r2
 8000b02:	bf18      	it	ne
 8000b04:	f040 0001 	orrne.w	r0, r0, #1
 8000b08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b14:	ea40 000c 	orr.w	r0, r0, ip
 8000b18:	fa23 f302 	lsr.w	r3, r3, r2
 8000b1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b20:	e7cc      	b.n	8000abc <__aeabi_d2f+0x14>
 8000b22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b26:	d107      	bne.n	8000b38 <__aeabi_d2f+0x90>
 8000b28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b2c:	bf1e      	ittt	ne
 8000b2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b36:	4770      	bxne	lr
 8000b38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_frsub>:
 8000b48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b4c:	e002      	b.n	8000b54 <__addsf3>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_fsub>:
 8000b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b54 <__addsf3>:
 8000b54:	0042      	lsls	r2, r0, #1
 8000b56:	bf1f      	itttt	ne
 8000b58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b5c:	ea92 0f03 	teqne	r2, r3
 8000b60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b68:	d06a      	beq.n	8000c40 <__addsf3+0xec>
 8000b6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b72:	bfc1      	itttt	gt
 8000b74:	18d2      	addgt	r2, r2, r3
 8000b76:	4041      	eorgt	r1, r0
 8000b78:	4048      	eorgt	r0, r1
 8000b7a:	4041      	eorgt	r1, r0
 8000b7c:	bfb8      	it	lt
 8000b7e:	425b      	neglt	r3, r3
 8000b80:	2b19      	cmp	r3, #25
 8000b82:	bf88      	it	hi
 8000b84:	4770      	bxhi	lr
 8000b86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4249      	negne	r1, r1
 8000ba6:	ea92 0f03 	teq	r2, r3
 8000baa:	d03f      	beq.n	8000c2c <__addsf3+0xd8>
 8000bac:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bb4:	eb10 000c 	adds.w	r0, r0, ip
 8000bb8:	f1c3 0320 	rsb	r3, r3, #32
 8000bbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	d502      	bpl.n	8000bcc <__addsf3+0x78>
 8000bc6:	4249      	negs	r1, r1
 8000bc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bcc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd0:	d313      	bcc.n	8000bfa <__addsf3+0xa6>
 8000bd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd6:	d306      	bcc.n	8000be6 <__addsf3+0x92>
 8000bd8:	0840      	lsrs	r0, r0, #1
 8000bda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bde:	f102 0201 	add.w	r2, r2, #1
 8000be2:	2afe      	cmp	r2, #254	; 0xfe
 8000be4:	d251      	bcs.n	8000c8a <__addsf3+0x136>
 8000be6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bee:	bf08      	it	eq
 8000bf0:	f020 0001 	biceq.w	r0, r0, #1
 8000bf4:	ea40 0003 	orr.w	r0, r0, r3
 8000bf8:	4770      	bx	lr
 8000bfa:	0049      	lsls	r1, r1, #1
 8000bfc:	eb40 0000 	adc.w	r0, r0, r0
 8000c00:	3a01      	subs	r2, #1
 8000c02:	bf28      	it	cs
 8000c04:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c08:	d2ed      	bcs.n	8000be6 <__addsf3+0x92>
 8000c0a:	fab0 fc80 	clz	ip, r0
 8000c0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c12:	ebb2 020c 	subs.w	r2, r2, ip
 8000c16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c1a:	bfaa      	itet	ge
 8000c1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c20:	4252      	neglt	r2, r2
 8000c22:	4318      	orrge	r0, r3
 8000c24:	bfbc      	itt	lt
 8000c26:	40d0      	lsrlt	r0, r2
 8000c28:	4318      	orrlt	r0, r3
 8000c2a:	4770      	bx	lr
 8000c2c:	f092 0f00 	teq	r2, #0
 8000c30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c34:	bf06      	itte	eq
 8000c36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c3a:	3201      	addeq	r2, #1
 8000c3c:	3b01      	subne	r3, #1
 8000c3e:	e7b5      	b.n	8000bac <__addsf3+0x58>
 8000c40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c48:	bf18      	it	ne
 8000c4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4e:	d021      	beq.n	8000c94 <__addsf3+0x140>
 8000c50:	ea92 0f03 	teq	r2, r3
 8000c54:	d004      	beq.n	8000c60 <__addsf3+0x10c>
 8000c56:	f092 0f00 	teq	r2, #0
 8000c5a:	bf08      	it	eq
 8000c5c:	4608      	moveq	r0, r1
 8000c5e:	4770      	bx	lr
 8000c60:	ea90 0f01 	teq	r0, r1
 8000c64:	bf1c      	itt	ne
 8000c66:	2000      	movne	r0, #0
 8000c68:	4770      	bxne	lr
 8000c6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c6e:	d104      	bne.n	8000c7a <__addsf3+0x126>
 8000c70:	0040      	lsls	r0, r0, #1
 8000c72:	bf28      	it	cs
 8000c74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c78:	4770      	bx	lr
 8000c7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c7e:	bf3c      	itt	cc
 8000c80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bxcc	lr
 8000c86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c92:	4770      	bx	lr
 8000c94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c98:	bf16      	itet	ne
 8000c9a:	4608      	movne	r0, r1
 8000c9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca0:	4601      	movne	r1, r0
 8000ca2:	0242      	lsls	r2, r0, #9
 8000ca4:	bf06      	itte	eq
 8000ca6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000caa:	ea90 0f01 	teqeq	r0, r1
 8000cae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cb2:	4770      	bx	lr

08000cb4 <__aeabi_ui2f>:
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e004      	b.n	8000cc4 <__aeabi_i2f+0x8>
 8000cba:	bf00      	nop

08000cbc <__aeabi_i2f>:
 8000cbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc0:	bf48      	it	mi
 8000cc2:	4240      	negmi	r0, r0
 8000cc4:	ea5f 0c00 	movs.w	ip, r0
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	e01c      	b.n	8000d12 <__aeabi_l2f+0x2a>

08000cd8 <__aeabi_ul2f>:
 8000cd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	e00a      	b.n	8000cfc <__aeabi_l2f+0x14>
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_l2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cf4:	d502      	bpl.n	8000cfc <__aeabi_l2f+0x14>
 8000cf6:	4240      	negs	r0, r0
 8000cf8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfc:	ea5f 0c01 	movs.w	ip, r1
 8000d00:	bf02      	ittt	eq
 8000d02:	4684      	moveq	ip, r0
 8000d04:	4601      	moveq	r1, r0
 8000d06:	2000      	moveq	r0, #0
 8000d08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d0c:	bf08      	it	eq
 8000d0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d16:	fabc f28c 	clz	r2, ip
 8000d1a:	3a08      	subs	r2, #8
 8000d1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d20:	db10      	blt.n	8000d44 <__aeabi_l2f+0x5c>
 8000d22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d26:	4463      	add	r3, ip
 8000d28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d34:	fa20 f202 	lsr.w	r2, r0, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	f020 0001 	biceq.w	r0, r0, #1
 8000d42:	4770      	bx	lr
 8000d44:	f102 0220 	add.w	r2, r2, #32
 8000d48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d54:	fa21 f202 	lsr.w	r2, r1, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_fmul>:
 8000d64:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d68:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d72:	ea92 0f0c 	teqne	r2, ip
 8000d76:	ea93 0f0c 	teqne	r3, ip
 8000d7a:	d06f      	beq.n	8000e5c <__aeabi_fmul+0xf8>
 8000d7c:	441a      	add	r2, r3
 8000d7e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d82:	0240      	lsls	r0, r0, #9
 8000d84:	bf18      	it	ne
 8000d86:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d8a:	d01e      	beq.n	8000dca <__aeabi_fmul+0x66>
 8000d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d90:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d94:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d98:	fba0 3101 	umull	r3, r1, r0, r1
 8000d9c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000da4:	bf3e      	ittt	cc
 8000da6:	0049      	lslcc	r1, r1, #1
 8000da8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dac:	005b      	lslcc	r3, r3, #1
 8000dae:	ea40 0001 	orr.w	r0, r0, r1
 8000db2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000db6:	2afd      	cmp	r2, #253	; 0xfd
 8000db8:	d81d      	bhi.n	8000df6 <__aeabi_fmul+0x92>
 8000dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc2:	bf08      	it	eq
 8000dc4:	f020 0001 	biceq.w	r0, r0, #1
 8000dc8:	4770      	bx	lr
 8000dca:	f090 0f00 	teq	r0, #0
 8000dce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dd2:	bf08      	it	eq
 8000dd4:	0249      	lsleq	r1, r1, #9
 8000dd6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dda:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dde:	3a7f      	subs	r2, #127	; 0x7f
 8000de0:	bfc2      	ittt	gt
 8000de2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000de6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dea:	4770      	bxgt	lr
 8000dec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	3a01      	subs	r2, #1
 8000df6:	dc5d      	bgt.n	8000eb4 <__aeabi_fmul+0x150>
 8000df8:	f112 0f19 	cmn.w	r2, #25
 8000dfc:	bfdc      	itt	le
 8000dfe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e02:	4770      	bxle	lr
 8000e04:	f1c2 0200 	rsb	r2, r2, #0
 8000e08:	0041      	lsls	r1, r0, #1
 8000e0a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e0e:	f1c2 0220 	rsb	r2, r2, #32
 8000e12:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e16:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e1a:	f140 0000 	adc.w	r0, r0, #0
 8000e1e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e22:	bf08      	it	eq
 8000e24:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e28:	4770      	bx	lr
 8000e2a:	f092 0f00 	teq	r2, #0
 8000e2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0040      	lsleq	r0, r0, #1
 8000e36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e3a:	3a01      	subeq	r2, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fmul+0xce>
 8000e3e:	ea40 000c 	orr.w	r0, r0, ip
 8000e42:	f093 0f00 	teq	r3, #0
 8000e46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0049      	lsleq	r1, r1, #1
 8000e4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e52:	3b01      	subeq	r3, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xe6>
 8000e56:	ea41 010c 	orr.w	r1, r1, ip
 8000e5a:	e78f      	b.n	8000d7c <__aeabi_fmul+0x18>
 8000e5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e60:	ea92 0f0c 	teq	r2, ip
 8000e64:	bf18      	it	ne
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d00a      	beq.n	8000e82 <__aeabi_fmul+0x11e>
 8000e6c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e70:	bf18      	it	ne
 8000e72:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e76:	d1d8      	bne.n	8000e2a <__aeabi_fmul+0xc6>
 8000e78:	ea80 0001 	eor.w	r0, r0, r1
 8000e7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e80:	4770      	bx	lr
 8000e82:	f090 0f00 	teq	r0, #0
 8000e86:	bf17      	itett	ne
 8000e88:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e8c:	4608      	moveq	r0, r1
 8000e8e:	f091 0f00 	teqne	r1, #0
 8000e92:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e96:	d014      	beq.n	8000ec2 <__aeabi_fmul+0x15e>
 8000e98:	ea92 0f0c 	teq	r2, ip
 8000e9c:	d101      	bne.n	8000ea2 <__aeabi_fmul+0x13e>
 8000e9e:	0242      	lsls	r2, r0, #9
 8000ea0:	d10f      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000ea2:	ea93 0f0c 	teq	r3, ip
 8000ea6:	d103      	bne.n	8000eb0 <__aeabi_fmul+0x14c>
 8000ea8:	024b      	lsls	r3, r1, #9
 8000eaa:	bf18      	it	ne
 8000eac:	4608      	movne	r0, r1
 8000eae:	d108      	bne.n	8000ec2 <__aeabi_fmul+0x15e>
 8000eb0:	ea80 0001 	eor.w	r0, r0, r1
 8000eb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ebc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec0:	4770      	bx	lr
 8000ec2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eca:	4770      	bx	lr

08000ecc <__aeabi_fdiv>:
 8000ecc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ed4:	bf1e      	ittt	ne
 8000ed6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eda:	ea92 0f0c 	teqne	r2, ip
 8000ede:	ea93 0f0c 	teqne	r3, ip
 8000ee2:	d069      	beq.n	8000fb8 <__aeabi_fdiv+0xec>
 8000ee4:	eba2 0203 	sub.w	r2, r2, r3
 8000ee8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eec:	0249      	lsls	r1, r1, #9
 8000eee:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ef2:	d037      	beq.n	8000f64 <__aeabi_fdiv+0x98>
 8000ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000efc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf38      	it	cc
 8000f08:	005b      	lslcc	r3, r3, #1
 8000f0a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f0e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f12:	428b      	cmp	r3, r1
 8000f14:	bf24      	itt	cs
 8000f16:	1a5b      	subcs	r3, r3, r1
 8000f18:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f1c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f20:	bf24      	itt	cs
 8000f22:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f26:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f2a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f2e:	bf24      	itt	cs
 8000f30:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f38:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f42:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	bf18      	it	ne
 8000f4a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f4e:	d1e0      	bne.n	8000f12 <__aeabi_fdiv+0x46>
 8000f50:	2afd      	cmp	r2, #253	; 0xfd
 8000f52:	f63f af50 	bhi.w	8000df6 <__aeabi_fmul+0x92>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f5c:	bf08      	it	eq
 8000f5e:	f020 0001 	biceq.w	r0, r0, #1
 8000f62:	4770      	bx	lr
 8000f64:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f68:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f6c:	327f      	adds	r2, #127	; 0x7f
 8000f6e:	bfc2      	ittt	gt
 8000f70:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f74:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f78:	4770      	bxgt	lr
 8000f7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	3a01      	subs	r2, #1
 8000f84:	e737      	b.n	8000df6 <__aeabi_fmul+0x92>
 8000f86:	f092 0f00 	teq	r2, #0
 8000f8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f8e:	bf02      	ittt	eq
 8000f90:	0040      	lsleq	r0, r0, #1
 8000f92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f96:	3a01      	subeq	r2, #1
 8000f98:	d0f9      	beq.n	8000f8e <__aeabi_fdiv+0xc2>
 8000f9a:	ea40 000c 	orr.w	r0, r0, ip
 8000f9e:	f093 0f00 	teq	r3, #0
 8000fa2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0049      	lsleq	r1, r1, #1
 8000faa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fae:	3b01      	subeq	r3, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xda>
 8000fb2:	ea41 010c 	orr.w	r1, r1, ip
 8000fb6:	e795      	b.n	8000ee4 <__aeabi_fdiv+0x18>
 8000fb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fbc:	ea92 0f0c 	teq	r2, ip
 8000fc0:	d108      	bne.n	8000fd4 <__aeabi_fdiv+0x108>
 8000fc2:	0242      	lsls	r2, r0, #9
 8000fc4:	f47f af7d 	bne.w	8000ec2 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	f47f af70 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e776      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fd4:	ea93 0f0c 	teq	r3, ip
 8000fd8:	d104      	bne.n	8000fe4 <__aeabi_fdiv+0x118>
 8000fda:	024b      	lsls	r3, r1, #9
 8000fdc:	f43f af4c 	beq.w	8000e78 <__aeabi_fmul+0x114>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e76e      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8000fe4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe8:	bf18      	it	ne
 8000fea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fee:	d1ca      	bne.n	8000f86 <__aeabi_fdiv+0xba>
 8000ff0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ff4:	f47f af5c 	bne.w	8000eb0 <__aeabi_fmul+0x14c>
 8000ff8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ffc:	f47f af3c 	bne.w	8000e78 <__aeabi_fmul+0x114>
 8001000:	e75f      	b.n	8000ec2 <__aeabi_fmul+0x15e>
 8001002:	bf00      	nop

08001004 <__gesf2>:
 8001004:	f04f 3cff 	mov.w	ip, #4294967295
 8001008:	e006      	b.n	8001018 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__lesf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	e002      	b.n	8001018 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__cmpsf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	bf18      	it	ne
 800102a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800102e:	d011      	beq.n	8001054 <__cmpsf2+0x40>
 8001030:	b001      	add	sp, #4
 8001032:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001036:	bf18      	it	ne
 8001038:	ea90 0f01 	teqne	r0, r1
 800103c:	bf58      	it	pl
 800103e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001042:	bf88      	it	hi
 8001044:	17c8      	asrhi	r0, r1, #31
 8001046:	bf38      	it	cc
 8001048:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800104c:	bf18      	it	ne
 800104e:	f040 0001 	orrne.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	d102      	bne.n	8001060 <__cmpsf2+0x4c>
 800105a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800105e:	d105      	bne.n	800106c <__cmpsf2+0x58>
 8001060:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001064:	d1e4      	bne.n	8001030 <__cmpsf2+0x1c>
 8001066:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800106a:	d0e1      	beq.n	8001030 <__cmpsf2+0x1c>
 800106c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <__aeabi_cfrcmple>:
 8001074:	4684      	mov	ip, r0
 8001076:	4608      	mov	r0, r1
 8001078:	4661      	mov	r1, ip
 800107a:	e7ff      	b.n	800107c <__aeabi_cfcmpeq>

0800107c <__aeabi_cfcmpeq>:
 800107c:	b50f      	push	{r0, r1, r2, r3, lr}
 800107e:	f7ff ffc9 	bl	8001014 <__cmpsf2>
 8001082:	2800      	cmp	r0, #0
 8001084:	bf48      	it	mi
 8001086:	f110 0f00 	cmnmi.w	r0, #0
 800108a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800108c <__aeabi_fcmpeq>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff fff4 	bl	800107c <__aeabi_cfcmpeq>
 8001094:	bf0c      	ite	eq
 8001096:	2001      	moveq	r0, #1
 8001098:	2000      	movne	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmplt>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffea 	bl	800107c <__aeabi_cfcmpeq>
 80010a8:	bf34      	ite	cc
 80010aa:	2001      	movcc	r0, #1
 80010ac:	2000      	movcs	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmple>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffe0 	bl	800107c <__aeabi_cfcmpeq>
 80010bc:	bf94      	ite	ls
 80010be:	2001      	movls	r0, #1
 80010c0:	2000      	movhi	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_fcmpge>:
 80010c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010cc:	f7ff ffd2 	bl	8001074 <__aeabi_cfrcmple>
 80010d0:	bf94      	ite	ls
 80010d2:	2001      	movls	r0, #1
 80010d4:	2000      	movhi	r0, #0
 80010d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010da:	bf00      	nop

080010dc <__aeabi_fcmpgt>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff ffc8 	bl	8001074 <__aeabi_cfrcmple>
 80010e4:	bf34      	ite	cc
 80010e6:	2001      	movcc	r0, #1
 80010e8:	2000      	movcs	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_f2iz>:
 80010f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f8:	d30f      	bcc.n	800111a <__aeabi_f2iz+0x2a>
 80010fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d90d      	bls.n	8001120 <__aeabi_f2iz+0x30>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001110:	fa23 f002 	lsr.w	r0, r3, r2
 8001114:	bf18      	it	ne
 8001116:	4240      	negne	r0, r0
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr
 8001120:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001124:	d101      	bne.n	800112a <__aeabi_f2iz+0x3a>
 8001126:	0242      	lsls	r2, r0, #9
 8001128:	d105      	bne.n	8001136 <__aeabi_f2iz+0x46>
 800112a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112e:	bf08      	it	eq
 8001130:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr

0800113c <__aeabi_uldivmod>:
 800113c:	b953      	cbnz	r3, 8001154 <__aeabi_uldivmod+0x18>
 800113e:	b94a      	cbnz	r2, 8001154 <__aeabi_uldivmod+0x18>
 8001140:	2900      	cmp	r1, #0
 8001142:	bf08      	it	eq
 8001144:	2800      	cmpeq	r0, #0
 8001146:	bf1c      	itt	ne
 8001148:	f04f 31ff 	movne.w	r1, #4294967295
 800114c:	f04f 30ff 	movne.w	r0, #4294967295
 8001150:	f000 b974 	b.w	800143c <__aeabi_idiv0>
 8001154:	f1ad 0c08 	sub.w	ip, sp, #8
 8001158:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800115c:	f000 f806 	bl	800116c <__udivmoddi4>
 8001160:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001168:	b004      	add	sp, #16
 800116a:	4770      	bx	lr

0800116c <__udivmoddi4>:
 800116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001170:	9e08      	ldr	r6, [sp, #32]
 8001172:	460d      	mov	r5, r1
 8001174:	4604      	mov	r4, r0
 8001176:	4688      	mov	r8, r1
 8001178:	2b00      	cmp	r3, #0
 800117a:	d14d      	bne.n	8001218 <__udivmoddi4+0xac>
 800117c:	428a      	cmp	r2, r1
 800117e:	4694      	mov	ip, r2
 8001180:	d968      	bls.n	8001254 <__udivmoddi4+0xe8>
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	b152      	cbz	r2, 800119e <__udivmoddi4+0x32>
 8001188:	fa01 f302 	lsl.w	r3, r1, r2
 800118c:	f1c2 0120 	rsb	r1, r2, #32
 8001190:	fa20 f101 	lsr.w	r1, r0, r1
 8001194:	fa0c fc02 	lsl.w	ip, ip, r2
 8001198:	ea41 0803 	orr.w	r8, r1, r3
 800119c:	4094      	lsls	r4, r2
 800119e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011a2:	0c21      	lsrs	r1, r4, #16
 80011a4:	fbb8 fef5 	udiv	lr, r8, r5
 80011a8:	fa1f f78c 	uxth.w	r7, ip
 80011ac:	fb05 831e 	mls	r3, r5, lr, r8
 80011b0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011b4:	fb0e f107 	mul.w	r1, lr, r7
 80011b8:	4299      	cmp	r1, r3
 80011ba:	d90b      	bls.n	80011d4 <__udivmoddi4+0x68>
 80011bc:	eb1c 0303 	adds.w	r3, ip, r3
 80011c0:	f10e 30ff 	add.w	r0, lr, #4294967295
 80011c4:	f080 811e 	bcs.w	8001404 <__udivmoddi4+0x298>
 80011c8:	4299      	cmp	r1, r3
 80011ca:	f240 811b 	bls.w	8001404 <__udivmoddi4+0x298>
 80011ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80011d2:	4463      	add	r3, ip
 80011d4:	1a5b      	subs	r3, r3, r1
 80011d6:	b2a4      	uxth	r4, r4
 80011d8:	fbb3 f0f5 	udiv	r0, r3, r5
 80011dc:	fb05 3310 	mls	r3, r5, r0, r3
 80011e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011e4:	fb00 f707 	mul.w	r7, r0, r7
 80011e8:	42a7      	cmp	r7, r4
 80011ea:	d90a      	bls.n	8001202 <__udivmoddi4+0x96>
 80011ec:	eb1c 0404 	adds.w	r4, ip, r4
 80011f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80011f4:	f080 8108 	bcs.w	8001408 <__udivmoddi4+0x29c>
 80011f8:	42a7      	cmp	r7, r4
 80011fa:	f240 8105 	bls.w	8001408 <__udivmoddi4+0x29c>
 80011fe:	4464      	add	r4, ip
 8001200:	3802      	subs	r0, #2
 8001202:	1be4      	subs	r4, r4, r7
 8001204:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001208:	2100      	movs	r1, #0
 800120a:	b11e      	cbz	r6, 8001214 <__udivmoddi4+0xa8>
 800120c:	40d4      	lsrs	r4, r2
 800120e:	2300      	movs	r3, #0
 8001210:	e9c6 4300 	strd	r4, r3, [r6]
 8001214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001218:	428b      	cmp	r3, r1
 800121a:	d908      	bls.n	800122e <__udivmoddi4+0xc2>
 800121c:	2e00      	cmp	r6, #0
 800121e:	f000 80ee 	beq.w	80013fe <__udivmoddi4+0x292>
 8001222:	2100      	movs	r1, #0
 8001224:	e9c6 0500 	strd	r0, r5, [r6]
 8001228:	4608      	mov	r0, r1
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122e:	fab3 f183 	clz	r1, r3
 8001232:	2900      	cmp	r1, #0
 8001234:	d14a      	bne.n	80012cc <__udivmoddi4+0x160>
 8001236:	42ab      	cmp	r3, r5
 8001238:	d302      	bcc.n	8001240 <__udivmoddi4+0xd4>
 800123a:	4282      	cmp	r2, r0
 800123c:	f200 80f9 	bhi.w	8001432 <__udivmoddi4+0x2c6>
 8001240:	1a84      	subs	r4, r0, r2
 8001242:	eb65 0303 	sbc.w	r3, r5, r3
 8001246:	2001      	movs	r0, #1
 8001248:	4698      	mov	r8, r3
 800124a:	2e00      	cmp	r6, #0
 800124c:	d0e2      	beq.n	8001214 <__udivmoddi4+0xa8>
 800124e:	e9c6 4800 	strd	r4, r8, [r6]
 8001252:	e7df      	b.n	8001214 <__udivmoddi4+0xa8>
 8001254:	b902      	cbnz	r2, 8001258 <__udivmoddi4+0xec>
 8001256:	deff      	udf	#255	; 0xff
 8001258:	fab2 f282 	clz	r2, r2
 800125c:	2a00      	cmp	r2, #0
 800125e:	f040 8091 	bne.w	8001384 <__udivmoddi4+0x218>
 8001262:	eba1 050c 	sub.w	r5, r1, ip
 8001266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800126a:	fa1f fe8c 	uxth.w	lr, ip
 800126e:	2101      	movs	r1, #1
 8001270:	fbb5 f3f7 	udiv	r3, r5, r7
 8001274:	fb07 5013 	mls	r0, r7, r3, r5
 8001278:	0c25      	lsrs	r5, r4, #16
 800127a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800127e:	fb0e f003 	mul.w	r0, lr, r3
 8001282:	42a8      	cmp	r0, r5
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x12c>
 8001286:	eb1c 0505 	adds.w	r5, ip, r5
 800128a:	f103 38ff 	add.w	r8, r3, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x12a>
 8001290:	42a8      	cmp	r0, r5
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2c0>
 8001296:	4643      	mov	r3, r8
 8001298:	1a2d      	subs	r5, r5, r0
 800129a:	b2a4      	uxth	r4, r4
 800129c:	fbb5 f0f7 	udiv	r0, r5, r7
 80012a0:	fb07 5510 	mls	r5, r7, r0, r5
 80012a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012a8:	fb0e fe00 	mul.w	lr, lr, r0
 80012ac:	45a6      	cmp	lr, r4
 80012ae:	d908      	bls.n	80012c2 <__udivmoddi4+0x156>
 80012b0:	eb1c 0404 	adds.w	r4, ip, r4
 80012b4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012b8:	d202      	bcs.n	80012c0 <__udivmoddi4+0x154>
 80012ba:	45a6      	cmp	lr, r4
 80012bc:	f200 80bb 	bhi.w	8001436 <__udivmoddi4+0x2ca>
 80012c0:	4628      	mov	r0, r5
 80012c2:	eba4 040e 	sub.w	r4, r4, lr
 80012c6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80012ca:	e79e      	b.n	800120a <__udivmoddi4+0x9e>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa20 f407 	lsr.w	r4, r0, r7
 80012de:	fa05 f301 	lsl.w	r3, r5, r1
 80012e2:	431c      	orrs	r4, r3
 80012e4:	40fd      	lsrs	r5, r7
 80012e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012ea:	fa00 f301 	lsl.w	r3, r0, r1
 80012ee:	fbb5 f8f9 	udiv	r8, r5, r9
 80012f2:	0c20      	lsrs	r0, r4, #16
 80012f4:	fa1f fe8c 	uxth.w	lr, ip
 80012f8:	fb09 5518 	mls	r5, r9, r8, r5
 80012fc:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001300:	fb08 f00e 	mul.w	r0, r8, lr
 8001304:	42a8      	cmp	r0, r5
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90b      	bls.n	8001324 <__udivmoddi4+0x1b8>
 800130c:	eb1c 0505 	adds.w	r5, ip, r5
 8001310:	f108 3aff 	add.w	sl, r8, #4294967295
 8001314:	f080 8088 	bcs.w	8001428 <__udivmoddi4+0x2bc>
 8001318:	42a8      	cmp	r0, r5
 800131a:	f240 8085 	bls.w	8001428 <__udivmoddi4+0x2bc>
 800131e:	f1a8 0802 	sub.w	r8, r8, #2
 8001322:	4465      	add	r5, ip
 8001324:	1a2d      	subs	r5, r5, r0
 8001326:	b2a4      	uxth	r4, r4
 8001328:	fbb5 f0f9 	udiv	r0, r5, r9
 800132c:	fb09 5510 	mls	r5, r9, r0, r5
 8001330:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001334:	fb00 fe0e 	mul.w	lr, r0, lr
 8001338:	45ae      	cmp	lr, r5
 800133a:	d908      	bls.n	800134e <__udivmoddi4+0x1e2>
 800133c:	eb1c 0505 	adds.w	r5, ip, r5
 8001340:	f100 34ff 	add.w	r4, r0, #4294967295
 8001344:	d26c      	bcs.n	8001420 <__udivmoddi4+0x2b4>
 8001346:	45ae      	cmp	lr, r5
 8001348:	d96a      	bls.n	8001420 <__udivmoddi4+0x2b4>
 800134a:	3802      	subs	r0, #2
 800134c:	4465      	add	r5, ip
 800134e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001352:	fba0 9402 	umull	r9, r4, r0, r2
 8001356:	eba5 050e 	sub.w	r5, r5, lr
 800135a:	42a5      	cmp	r5, r4
 800135c:	46c8      	mov	r8, r9
 800135e:	46a6      	mov	lr, r4
 8001360:	d356      	bcc.n	8001410 <__udivmoddi4+0x2a4>
 8001362:	d053      	beq.n	800140c <__udivmoddi4+0x2a0>
 8001364:	b15e      	cbz	r6, 800137e <__udivmoddi4+0x212>
 8001366:	ebb3 0208 	subs.w	r2, r3, r8
 800136a:	eb65 050e 	sbc.w	r5, r5, lr
 800136e:	fa05 f707 	lsl.w	r7, r5, r7
 8001372:	fa22 f301 	lsr.w	r3, r2, r1
 8001376:	40cd      	lsrs	r5, r1
 8001378:	431f      	orrs	r7, r3
 800137a:	e9c6 7500 	strd	r7, r5, [r6]
 800137e:	2100      	movs	r1, #0
 8001380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001384:	f1c2 0320 	rsb	r3, r2, #32
 8001388:	fa20 f103 	lsr.w	r1, r0, r3
 800138c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001390:	fa25 f303 	lsr.w	r3, r5, r3
 8001394:	4095      	lsls	r5, r2
 8001396:	430d      	orrs	r5, r1
 8001398:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800139c:	fa1f fe8c 	uxth.w	lr, ip
 80013a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80013a4:	fb07 3011 	mls	r0, r7, r1, r3
 80013a8:	0c2b      	lsrs	r3, r5, #16
 80013aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013ae:	fb01 f00e 	mul.w	r0, r1, lr
 80013b2:	4298      	cmp	r0, r3
 80013b4:	fa04 f402 	lsl.w	r4, r4, r2
 80013b8:	d908      	bls.n	80013cc <__udivmoddi4+0x260>
 80013ba:	eb1c 0303 	adds.w	r3, ip, r3
 80013be:	f101 38ff 	add.w	r8, r1, #4294967295
 80013c2:	d22f      	bcs.n	8001424 <__udivmoddi4+0x2b8>
 80013c4:	4298      	cmp	r0, r3
 80013c6:	d92d      	bls.n	8001424 <__udivmoddi4+0x2b8>
 80013c8:	3902      	subs	r1, #2
 80013ca:	4463      	add	r3, ip
 80013cc:	1a1b      	subs	r3, r3, r0
 80013ce:	b2ad      	uxth	r5, r5
 80013d0:	fbb3 f0f7 	udiv	r0, r3, r7
 80013d4:	fb07 3310 	mls	r3, r7, r0, r3
 80013d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80013dc:	fb00 f30e 	mul.w	r3, r0, lr
 80013e0:	42ab      	cmp	r3, r5
 80013e2:	d908      	bls.n	80013f6 <__udivmoddi4+0x28a>
 80013e4:	eb1c 0505 	adds.w	r5, ip, r5
 80013e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80013ec:	d216      	bcs.n	800141c <__udivmoddi4+0x2b0>
 80013ee:	42ab      	cmp	r3, r5
 80013f0:	d914      	bls.n	800141c <__udivmoddi4+0x2b0>
 80013f2:	3802      	subs	r0, #2
 80013f4:	4465      	add	r5, ip
 80013f6:	1aed      	subs	r5, r5, r3
 80013f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80013fc:	e738      	b.n	8001270 <__udivmoddi4+0x104>
 80013fe:	4631      	mov	r1, r6
 8001400:	4630      	mov	r0, r6
 8001402:	e707      	b.n	8001214 <__udivmoddi4+0xa8>
 8001404:	4686      	mov	lr, r0
 8001406:	e6e5      	b.n	80011d4 <__udivmoddi4+0x68>
 8001408:	4618      	mov	r0, r3
 800140a:	e6fa      	b.n	8001202 <__udivmoddi4+0x96>
 800140c:	454b      	cmp	r3, r9
 800140e:	d2a9      	bcs.n	8001364 <__udivmoddi4+0x1f8>
 8001410:	ebb9 0802 	subs.w	r8, r9, r2
 8001414:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001418:	3801      	subs	r0, #1
 800141a:	e7a3      	b.n	8001364 <__udivmoddi4+0x1f8>
 800141c:	4640      	mov	r0, r8
 800141e:	e7ea      	b.n	80013f6 <__udivmoddi4+0x28a>
 8001420:	4620      	mov	r0, r4
 8001422:	e794      	b.n	800134e <__udivmoddi4+0x1e2>
 8001424:	4641      	mov	r1, r8
 8001426:	e7d1      	b.n	80013cc <__udivmoddi4+0x260>
 8001428:	46d0      	mov	r8, sl
 800142a:	e77b      	b.n	8001324 <__udivmoddi4+0x1b8>
 800142c:	3b02      	subs	r3, #2
 800142e:	4465      	add	r5, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x12c>
 8001432:	4608      	mov	r0, r1
 8001434:	e709      	b.n	800124a <__udivmoddi4+0xde>
 8001436:	4464      	add	r4, ip
 8001438:	3802      	subs	r0, #2
 800143a:	e742      	b.n	80012c2 <__udivmoddi4+0x156>

0800143c <__aeabi_idiv0>:
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f001 faa3 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(15);//Michael
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f806 	bl	800145c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f002 fbae 	bl	8003bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);//Michael
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_InitTick+0x30>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_InitTick+0x34>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	099b      	lsrs	r3, r3, #6
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fad6 	bl	8002a22 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);//Michael
 8001476:	2200      	movs	r2, #0
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	f04f 30ff 	mov.w	r0, #4294967295
 800147e:	f001 fa92 	bl	80029a6 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	10624dd3 	.word	0x10624dd3

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick++;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <HAL_IncTick+0x18>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	3301      	adds	r3, #1
 800149e:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x18>)
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000084 	.word	0x20000084

080014b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	20000084 	.word	0x20000084

080014c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b090      	sub	sp, #64	; 0x40
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpCFGR = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	63bb      	str	r3, [r7, #56]	; 0x38
  __IO uint32_t wait_loop_index = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e164      	b.n	80017ae <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_ADC_Init+0x42>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fa8e 	bl	8001a14 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	65da      	str	r2, [r3, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }
  
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  /*  Exit deep power down mode if still in that state */
  if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001514:	d107      	bne.n	8001526 <HAL_ADC_Init+0x62>
  {
    /* Exit deep power down mode */ 
    CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001524:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if  (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d119      	bne.n	8001568 <HAL_ADC_Init+0xa4>
  {  
    /* Enable ADC internal voltage regulator */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001542:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles.                                           */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 8001544:	4b9c      	ldr	r3, [pc, #624]	; (80017b8 <HAL_ADC_Init+0x2f4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	; (80017bc <HAL_ADC_Init+0x2f8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0cda      	lsrs	r2, r3, #19
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800155a:	e002      	b.n	8001562 <HAL_ADC_Init+0x9e>
    {
      wait_loop_index--;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3b01      	subs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <HAL_ADC_Init+0x98>
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))  
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10e      	bne.n	8001594 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	f043 0201 	orr.w	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	65da      	str	r2, [r3, #92]	; 0x5c
    
    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	f003 0310 	and.w	r3, r3, #16
 800159c:	2b00      	cmp	r3, #0
 800159e:	f040 80fb 	bne.w	8001798 <HAL_ADC_Init+0x2d4>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f040 80f3 	bne.w	8001798 <HAL_ADC_Init+0x2d4>
  {
    
    /* Initialize the ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f043 0202 	orr.w	r2, r3, #2
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register                                 */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015be:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <HAL_ADC_Init+0x2fc>)
 80015c0:	637b      	str	r3, [r7, #52]	; 0x34
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_ADC_Init+0x11e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_Init+0x11e>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_Init+0x120>
 80015e2:	2300      	movs	r3, #0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d108      	bne.n	80015fa <HAL_ADC_Init+0x136>
      /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
           
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_PRESC|ADC_CCR_CKMODE, hadc->Init.ClockPrescaler);
 80015e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	431a      	orrs	r2, r3
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	609a      	str	r2, [r3, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	409a      	lsls	r2, r3
                hadc->Init.Overrun                                           |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001618:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                         |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                           |
 800161e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                        |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                         |
 8001624:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800162a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001632:	fa93 f3a3 	rbit	r3, r3
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	fab3 f383 	clz	r3, r3
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001642:	4313      	orrs	r3, r2
 8001644:	63bb      	str	r3, [r7, #56]	; 0x38
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	2b01      	cmp	r3, #1
 800164c:	d111      	bne.n	8001672 <HAL_ADC_Init+0x1ae>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	1e5a      	subs	r2, r3, #1
 8001654:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8001658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	fa93 f3a3 	rbit	r3, r3
 8001660:	61fb      	str	r3, [r7, #28]
  return(result);
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fab3 f383 	clz	r3, r3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800166e:	4313      	orrs	r3, r2
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
    /* start.                                                                 */
    /*  - external trigger to start conversion     Init.ExternalTrigConv      */
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /* Note:  parameter ExternalTrigConvEdge set to "trigger edge none" is    */
    /*        equivalent to software start.                                   */
    if ((hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	2b01      	cmp	r3, #1
 8001678:	d00b      	beq.n	8001692 <HAL_ADC_Init+0x1ce>
    &&  (hadc->Init.ExternalTrigConvEdge != ADC_EXTERNALTRIGCONVEDGE_NONE))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_ADC_Init+0x1ce>
    {
      tmpCFGR |= ( hadc->Init.ExternalTrigConv |  hadc->Init.ExternalTrigConvEdge);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4313      	orrs	r3, r2
 800168c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800168e:	4313      	orrs	r3, r2
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    
     /* Update Configuration Register CFGR */
     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_ADC_Init+0x300>)
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016a2:	430b      	orrs	r3, r1
 80016a4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 030c 	and.w	r3, r3, #12
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d14f      	bne.n	8001754 <HAL_ADC_Init+0x290>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699a      	ldr	r2, [r3, #24]
 80016b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	409a      	lsls	r2, r3
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	617b      	str	r3, [r7, #20]
  return(result);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fab3 f383 	clz	r3, r3
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 80016e8:	4313      	orrs	r3, r2
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
               
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016f6:	f023 0302 	bic.w	r3, r3, #2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001700:	430b      	orrs	r3, r1
 8001702:	60d3      	str	r3, [r2, #12]
    
 
      if (hadc->Init.OversamplingMode == ENABLE)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	2b01      	cmp	r3, #1
 800170a:	d11b      	bne.n	8001744 <HAL_ADC_Init+0x280>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
        
        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	2b01      	cmp	r3, #1
       /* Configuration of Oversampler:                                       */
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS, 
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800171c:	f023 0305 	bic.w	r3, r3, #5
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001728:	4311      	orrs	r1, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800172e:	4311      	orrs	r1, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001734:	430a      	orrs	r2, r1
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	611a      	str	r2, [r3, #16]
 8001742:	e007      	b.n	8001754 <HAL_ADC_Init+0x290>
                               hadc->Init.Oversampling.OversamplingStopReset);
      }
      else
      {
        /* Disable Regular OverSampling */
        CLEAR_BIT( hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691a      	ldr	r2, [r3, #16]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d10c      	bne.n	8001776 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));  
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	f023 010f 	bic.w	r1, r3, #15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	1e5a      	subs	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
 8001774:	e007      	b.n	8001786 <HAL_ADC_Init+0x2c2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 020f 	bic.w	r2, r2, #15
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f023 0303 	bic.w	r3, r3, #3
 800178e:	f043 0201 	orr.w	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	659a      	str	r2, [r3, #88]	; 0x58
 8001796:	e008      	b.n	80017aa <HAL_ADC_Init+0x2e6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	f043 0210 	orr.w	r2, r3, #16
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }  /*  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)  && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)  ) */
  
  /* Return function status */
  return tmp_hal_status;
 80017aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3740      	adds	r7, #64	; 0x40
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000
 80017bc:	431bde83 	.word	0x431bde83
 80017c0:	50040300 	.word	0x50040300
 80017c4:	fff0c007 	.word	0xfff0c007

080017c8 <HAL_ADC_DeInit>:
  *         entering STOP 1 or STOP 2 modes.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e10e      	b.n	80019f8 <HAL_ADC_DeInit+0x230>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	f043 0202 	orr.w	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Note: No check on ADC_ConversionStop() return status,              */
  /*       if the conversion stop failed, it is up to                   */
  /*       HAL_ADC_MspDeInit() to reset the ADC IP.                     */
  ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017e6:	216c      	movs	r1, #108	; 0x6c
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fd77 	bl	80022dc <ADC_ConversionStop>
  /* Flush register JSQR: reset the queue sequencer when injected             */
  /* queue sequencer is enabled and ADC disabled.                             */
  /* The software and hardware triggers of the injected sequence are both     */
  /* internally disabled just after the completion of the last valid          */
  /* injected sequence.                                                       */
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80017fc:	60da      	str	r2, [r3, #12]
  
  /* Disable the ADC peripheral */
  /* No check on ADC_Disable() return status, if the ADC disabling process
    failed, it is up to HAL_ADC_MspDeInit() to reset the ADC IP */  
  ADC_Disable(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fe80 	bl	8002504 <ADC_Disable>
  
  
  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001812:	f023 0307 	bic.w	r3, r3, #7
 8001816:	6053      	str	r3, [r2, #4]
                              ADC_IT_JEOS  | ADC_IT_JEOC |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY                 ) );
      
  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001820:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
 /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART, 
    ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set": 
    no direct reset applicable. 
    Update CR register to reset value where doable by software */
  CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f022 42a0 	bic.w	r2, r2, #1342177280	; 0x50000000
 8001830:	609a      	str	r2, [r3, #8]
  SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);    
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001840:	609a      	str	r2, [r3, #8]
      
  /* Reset register CFGR */
  CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68d9      	ldr	r1, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_ADC_DeInit+0x238>)
 800184e:	400b      	ands	r3, r1
 8001850:	60d3      	str	r3, [r2, #12]
  SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);  
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001860:	60da      	str	r2, [r3, #12]
  
  /* Reset register CFGR2 */
  CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |   
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001870:	f023 0307 	bic.w	r3, r3, #7
 8001874:	6113      	str	r3, [r2, #16]
                                  ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE    );                                 
  
  /* Reset register SMPR1 */
  CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);                                 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8001884:	615a      	str	r2, [r3, #20]
  
  /* Reset register SMPR2 */
  CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 | 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f002 4278 	and.w	r2, r2, #4160749568	; 0xf8000000
 8001894:	619a      	str	r2, [r3, #24]
                             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 | 
                             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10    );                                 
  
  /* Reset register TR1 */
  CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6a1a      	ldr	r2, [r3, #32]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80018a4:	621a      	str	r2, [r3, #32]
  
  /* Reset register TR2 */
  CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);    
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Reset register TR3 */
  CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);      
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Reset register SQR1 */
  CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 | 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_ADC_DeInit+0x23c>)
 80018d2:	400b      	ands	r3, r1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
                            ADC_SQR1_SQ1 | ADC_SQR1_L);                              
  
  /* Reset register SQR2 */
  CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 | 
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <HAL_ADC_DeInit+0x240>)
 80018e2:	400b      	ands	r3, r1
 80018e4:	6353      	str	r3, [r2, #52]	; 0x34
                            ADC_SQR2_SQ6 | ADC_SQR2_SQ5);                                
  
  /* Reset register SQR3 */
  CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 | 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <HAL_ADC_DeInit+0x240>)
 80018f2:	400b      	ands	r3, r1
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38
                            ADC_SQR3_SQ11 | ADC_SQR3_SQ10);                                 
  
  /* Reset register SQR4 */
  CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15); 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	f423 63fb 	bic.w	r3, r3, #2008	; 0x7d8
 8001904:	f023 0307 	bic.w	r3, r3, #7
 8001908:	63d3      	str	r3, [r2, #60]	; 0x3c
  
  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable*/
    
  /* Reset register OFR1 */
  CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1); 
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_ADC_DeInit+0x244>)
 8001916:	400b      	ands	r3, r1
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
  /* Reset register OFR2 */
  CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2); 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_ADC_DeInit+0x244>)
 8001926:	400b      	ands	r3, r1
 8001928:	6653      	str	r3, [r2, #100]	; 0x64
  /* Reset register OFR3 */
  CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3); 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_ADC_DeInit+0x244>)
 8001936:	400b      	ands	r3, r1
 8001938:	6693      	str	r3, [r2, #104]	; 0x68
  /* Reset register OFR4 */
  CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_ADC_DeInit+0x244>)
 8001946:	400b      	ands	r3, r1
 8001948:	66d3      	str	r3, [r2, #108]	; 0x6c
  
  /* Reset registers JDR1, JDR2, JDR3, JDR4 */
  /* bits in access mode read only, no direct reset applicable*/
  
  /* Reset register AWD2CR */
  CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	0cdb      	lsrs	r3, r3, #19
 8001958:	04db      	lsls	r3, r3, #19
 800195a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  
  /* Reset register AWD3CR */
  CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	0cdb      	lsrs	r3, r3, #19
 800196c:	04db      	lsls	r3, r3, #19
 800196e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  
  /* Reset register DIFSEL */
  CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	0cdb      	lsrs	r3, r3, #19
 8001980:	04db      	lsls	r3, r3, #19
 8001982:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  
  /* Reset register CALFACT */
  CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 127f 	bic.w	r2, r2, #8323199	; 0x7f007f
 8001996:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  
  /* ========== Reset common ADC registers ========== */
        
  /* Software is allowed to change common parameters only when all the other
     ADCs are disabled.   */
  if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_ADC_DeInit+0x1f2>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_DeInit+0x1f2>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_ADC_DeInit+0x1f4>
 80019ba:	2300      	movs	r3, #0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d107      	bne.n	80019d0 <HAL_ADC_DeInit+0x208>
      - multimode related parameters (when this feature is available): MDMA, 
        DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
      - internal measurement paths: Vbat, temperature sensor, Vref (set into
        HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
    */
    ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_ADC_DeInit+0x248>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_ADC_DeInit+0x248>)
 80019c6:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6093      	str	r3, [r2, #8]
    
    Keep in mind that all ADCs use the same clock: disabling
    the clock will reset all ADCs. 
    
  */
  HAL_ADC_MspDeInit(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f828 	bl	8001a26 <HAL_ADC_MspDeInit>
    
  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Reset injected channel configuration parameters */
  hadc->InjectionConfig.ContextQueue = 0;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	661a      	str	r2, [r3, #96]	; 0x60
  hadc->InjectionConfig.ChannelCount = 0; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	665a      	str	r2, [r3, #100]	; 0x64
    
  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	80008004 	.word	0x80008004
 8001a04:	e0820830 	.word	0xe0820830
 8001a08:	e0820820 	.word	0xe0820820
 8001a0c:	03fff000 	.word	0x03fff000
 8001a10:	50040300 	.word	0x50040300

08001a14 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <HAL_ADC_MspDeInit>:
  * @param  hadc: ADC handle
  * @note   All ADCs use the same clock: disabling the clock will reset all ADCs.
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <HAL_ADC_Start_DMA>:
  * @param  pData: Destination Buffer address.
  * @param  Length: Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d16f      	bne.n	8001b36 <HAL_ADC_Start_DMA+0xfe>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_Start_DMA+0x2c>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e06b      	b.n	8001b3c <HAL_ADC_Start_DMA+0x104>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    /* Ensure that dual regular conversions are not enabled or unavailable.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fce3 	bl	8002438 <ADC_Enable>
 8001a72:	4603      	mov	r3, r0
 8001a74:	75fb      	strb	r3, [r7, #23]
    
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_ADC_Start_DMA+0xf4>
      {
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a88:	d106      	bne.n	8001a98 <HAL_ADC_Start_DMA+0x60>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));             
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	f023 0206 	bic.w	r2, r3, #6
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a96:	e002      	b.n	8001a9e <HAL_ADC_Start_DMA+0x66>
        }
        else
        {
          /* Set ADC error code to none */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
        /* Clear HAL_ADC_STATE_READY and regular conversion results bits, set HAL_ADC_STATE_REG_BUSY bit */
        ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001aa6:	f023 0301 	bic.w	r3, r3, #1
 8001aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - by default if ADC is Master or Independent or if multimode feature is not available
        - if multimode setting is set to independent mode (no dual regular or injected conversions are configured) */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	659a      	str	r2, [r3, #88]	; 0x58
        }
      
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac2:	4a20      	ldr	r2, [pc, #128]	; (8001b44 <HAL_ADC_Start_DMA+0x10c>)
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = NULL;//ADC_DMAHalfConvCplt;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001aca:	2200      	movs	r2, #0
 8001acc:	631a      	str	r2, [r3, #48]	; 0x30
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ad2:	4a1d      	ldr	r2, [pc, #116]	; (8001b48 <HAL_ADC_Start_DMA+0x110>)
 8001ad4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */
        
        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	221c      	movs	r2, #28
 8001adc:	601a      	str	r2, [r3, #0]
        
        /* With DMA, overrun event is always considered as an error even if 
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,  
           ADC_IT_OVR is enabled.  */         
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);  
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0210 	orr.w	r2, r2, #16
 8001aec:	605a      	str	r2, [r3, #4]
        
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	60da      	str	r2, [r3, #12]
      
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3340      	adds	r3, #64	; 0x40
 8001b08:	4619      	mov	r1, r3
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f001 f8fb 	bl	8002d08 <HAL_DMA_Start_IT>
        
        /* Enable conversion of regular group.                                  */
        /* Process unlocked */
        __HAL_UNLOCK(hadc);          
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0204 	orr.w	r2, r2, #4
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	e006      	b.n	8001b3a <HAL_ADC_Start_DMA+0x102>
      
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);      
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001b34:	e001      	b.n	8001b3a <HAL_ADC_Start_DMA+0x102>
    } /* if (ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET) */
    
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
 8001b38:	75fb      	strb	r3, [r7, #23]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	080025c3 	.word	0x080025c3
 8001b48:	0800268d 	.word	0x0800268d

08001b4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
	...

08001b60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b0b7      	sub	sp, #220	; 0xdc
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x22>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e39e      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x760>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f040 8382 	bne.w	800229e <HAL_ADC_ConfigChannel+0x73e>
  {
    
      /* Regular sequence configuration */
      /* Clear the old SQx bits then set the new ones for the selected rank */
      /* For Rank 1 to 4 */
      if (sConfig->Rank < 5)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d836      	bhi.n	8001c10 <HAL_ADC_ConfigChannel+0xb0>
      {      
        MODIFY_REG(hadc->Instance->SQR1, 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ba8:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  return(result);
 8001bbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	211f      	movs	r1, #31
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	ea02 0103 	and.w	r1, r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001be2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  return(result);
 8001bf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	fb00 f303 	mul.w	r3, r0, r3
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c0e:	e0b1      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x214>
                  ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 5 to 9 */
      else if (sConfig->Rank < 10)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d838      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x12a>
      {
        MODIFY_REG(hadc->Instance->SQR2, 
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c1e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
 8001c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	3b05      	subs	r3, #5
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	211f      	movs	r1, #31
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	ea02 0103 	and.w	r1, r2, r3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 8001c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	3b05      	subs	r3, #5
 8001c7a:	fb00 f303 	mul.w	r3, r0, r3
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
 8001c88:	e074      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x214>
                  ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank), 
                  ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 10 to 14 */
      else if (sConfig->Rank < 15)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b0e      	cmp	r3, #14
 8001c90:	d838      	bhi.n	8001d04 <HAL_ADC_ConfigChannel+0x1a4>
      {
        MODIFY_REG(hadc->Instance->SQR3, 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c98:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ca4:	fa93 f3a3 	rbit	r3, r3
 8001ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return(result);
 8001cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	3b0a      	subs	r3, #10
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	211f      	movs	r1, #31
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	ea02 0103 	and.w	r1, r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  return(result);
 8001ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	3b0a      	subs	r3, #10
 8001cf4:	fb00 f303 	mul.w	r3, r0, r3
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
 8001d02:	e037      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x214>
                  ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
      }
      /* For Rank 15 to 16 */
      else
      {   
        MODIFY_REG(hadc->Instance->SQR4, 
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  return(result);
 8001d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	3b0f      	subs	r3, #15
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	211f      	movs	r1, #31
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	ea02 0103 	and.w	r1, r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001d46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return(result);
 8001d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	3b0f      	subs	r3, #15
 8001d66:	fb00 f303 	mul.w	r3, r0, r3
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 8167 	bne.w	8002052 <HAL_ADC_ConfigChannel+0x4f2>
      {
       
        /* Channel sampling time configuration */
        /* Clear the old sample time then set the new one for the selected channel */
        /* For channels 10 to 18 */
        if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b09      	cmp	r3, #9
 8001d8a:	d934      	bls.n	8001df6 <HAL_ADC_ConfigChannel+0x296>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	2338      	movs	r3, #56	; 0x38
 8001d94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return(result);
 8001da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	4619      	mov	r1, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	3b0a      	subs	r3, #10
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	2107      	movs	r1, #7
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	ea02 0103 	and.w	r1, r2, r3
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	2338      	movs	r3, #56	; 0x38
 8001dc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 8001dd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dda:	fab3 f383 	clz	r3, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3b0a      	subs	r3, #10
 8001de6:	fb00 f303 	mul.w	r3, r0, r3
 8001dea:	409a      	lsls	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	619a      	str	r2, [r3, #24]
 8001df4:	e02b      	b.n	8001e4e <HAL_ADC_ConfigChannel+0x2ee>
        }
        else /* For channels 0 to 9 */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	2338      	movs	r3, #56	; 0x38
 8001dfe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fb01 f303 	mul.w	r3, r1, r3
 8001e18:	2107      	movs	r1, #7
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	ea02 0103 	and.w	r1, r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	2338      	movs	r3, #56	; 0x38
 8001e2a:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8001e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	fb00 f303 	mul.w	r3, r0, r3
 8001e44:	409a      	lsls	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	615a      	str	r2, [r3, #20]
  
       /* Configure the offset: offset enable/disable, channel, offset value */
  
       /* Shift the offset with respect to the selected ADC resolution. */
       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      
       switch (sConfig->OffsetNumber)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d87a      	bhi.n	8001f68 <HAL_ADC_ConfigChannel+0x408>
 8001e72:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <HAL_ADC_ConfigChannel+0x318>)
 8001e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e78:	08001e89 	.word	0x08001e89
 8001e7c:	08001ec1 	.word	0x08001ec1
 8001e80:	08001ef9 	.word	0x08001ef9
 8001e84:	08001f31 	.word	0x08001f31
        /* Configure offset register i when applicable:                         */
        /* - Enable offset                                                      */
        /* - Set channel number                                                 */
        /* - Set offset value                                                   */
       case ADC_OFFSET_1:
          MODIFY_REG(hadc->Instance->OFR1,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e8e:	4b87      	ldr	r3, [pc, #540]	; (80020ac <HAL_ADC_ConfigChannel+0x54c>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6811      	ldr	r1, [r2, #0]
 8001e96:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001e9a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001e9e:	fa92 f2a2 	rbit	r2, r2
 8001ea2:	667a      	str	r2, [r7, #100]	; 0x64
  return(result);
 8001ea4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001ea6:	fab2 f282 	clz	r2, r2
 8001eaa:	4091      	lsls	r1, r2
 8001eac:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ebc:	661a      	str	r2, [r3, #96]	; 0x60
                  ADC_OFR_FIELDS,
                  ADC_OFR1_OFFSET1_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                   
         break;
 8001ebe:	e0cb      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
      
       case ADC_OFFSET_2:
         MODIFY_REG(hadc->Instance->OFR2,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_ADC_ConfigChannel+0x54c>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	6811      	ldr	r1, [r2, #0]
 8001ece:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001ed2:	663a      	str	r2, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	65fa      	str	r2, [r7, #92]	; 0x5c
  return(result);
 8001edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	4091      	lsls	r1, r2
 8001ee4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef4:	665a      	str	r2, [r3, #100]	; 0x64
                  ADC_OFR_FIELDS, 
                  ADC_OFR2_OFFSET2_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 8001ef6:	e0af      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
          
       case ADC_OFFSET_3:
         MODIFY_REG(hadc->Instance->OFR3,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001efe:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <HAL_ADC_ConfigChannel+0x54c>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	6811      	ldr	r1, [r2, #0]
 8001f06:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001f0a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001f14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f16:	fab2 f282 	clz	r2, r2
 8001f1a:	4091      	lsls	r1, r2
 8001f1c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f20:	430a      	orrs	r2, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f2c:	669a      	str	r2, [r3, #104]	; 0x68
                  ADC_OFR_FIELDS,
                  ADC_OFR3_OFFSET3_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 8001f2e:	e093      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
      
       case ADC_OFFSET_4:
         MODIFY_REG(hadc->Instance->OFR4,
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f36:	4b5d      	ldr	r3, [pc, #372]	; (80020ac <HAL_ADC_ConfigChannel+0x54c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	6811      	ldr	r1, [r2, #0]
 8001f3e:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8001f42:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001f46:	fa92 f2a2 	rbit	r2, r2
 8001f4a:	64fa      	str	r2, [r7, #76]	; 0x4c
  return(result);
 8001f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f4e:	fab2 f282 	clz	r2, r2
 8001f52:	4091      	lsls	r1, r2
 8001f54:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f64:	66da      	str	r2, [r3, #108]	; 0x6c
                  ADC_OFR_FIELDS,
                  ADC_OFR4_OFFSET4_EN | ADC_OFR_CHANNEL(sConfig->Channel) | tmpOffsetShifted);                                  
         break;
 8001f66:	e077      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
       /* Case ADC_OFFSET_NONE */
       default :
       /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
         if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6819      	ldr	r1, [r3, #0]
 8001f76:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d107      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x442>
         {
           CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa0:	661a      	str	r2, [r3, #96]	; 0x60
         }
         if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc0:	fab3 f383 	clz	r3, r3
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x47c>
         {
           CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fda:	665a      	str	r2, [r3, #100]	; 0x64
         }
         if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001fee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8001ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	429a      	cmp	r2, r3
 8002004:	d107      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x4b6>
         {
           CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002014:	669a      	str	r2, [r3, #104]	; 0x68
         }
         if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8002028:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	fa93 f3a3 	rbit	r3, r3
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	fab3 f383 	clz	r3, r3
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	429a      	cmp	r2, r3
 800203e:	d10a      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x4f6>
         {
           CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800204e:	66da      	str	r2, [r3, #108]	; 0x6c
         }
         break;
 8002050:	e001      	b.n	8002056 <HAL_ADC_ConfigChannel+0x4f6>
      }  /*  switch (sConfig->OffsetNumber) */
    
    }  /* if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET) */
 8002052:	bf00      	nop
 8002054:	e000      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4f8>
         break;
 8002056:	bf00      	nop
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d108      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x518>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x518>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_ADC_ConfigChannel+0x51a>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 811a 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x754>
    {
      /* Configuration of differential mode */
      if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002088:	d012      	beq.n	80020b0 <HAL_ADC_ConfigChannel+0x550>
      {
        /* Disable differential mode (default mode: single-ended) */
        CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020a8:	e070      	b.n	800218c <HAL_ADC_ConfigChannel+0x62c>
 80020aa:	bf00      	nop
 80020ac:	03fff000 	.word	0x03fff000
      }
      else
      {
        /* Enable differential mode */
        SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	409a      	lsls	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        
        /* Sampling time configuration of channel ADC_IN+1 (negative input)     */
        /* Clear the old sample time then set the new one for the selected      */
        /* channel.                                                             */
        /* Starting from channel 9, SMPR2 register must be configured           */
        if (sConfig->Channel >= ADC_CHANNEL_9)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d92e      	bls.n	8002130 <HAL_ADC_ConfigChannel+0x5d0>
        {
          ADC_SMPR2_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	2338      	movs	r3, #56	; 0x38
 80020da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	4619      	mov	r1, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3b09      	subs	r3, #9
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	2107      	movs	r1, #7
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	ea02 0103 	and.w	r1, r2, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	2338      	movs	r3, #56	; 0x38
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	fa93 f3a3 	rbit	r3, r3
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	4618      	mov	r0, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3b09      	subs	r3, #9
 8002120:	fb00 f303 	mul.w	r3, r0, r3
 8002124:	409a      	lsls	r2, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	619a      	str	r2, [r3, #24]
 800212e:	e02d      	b.n	800218c <HAL_ADC_ConfigChannel+0x62c>
        }
        else /* For channels 0 to 8, SMPR1 must be configured */
        {
          ADC_SMPR1_SETTING(hadc, sConfig->SamplingTime, sConfig->Channel+1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	2338      	movs	r3, #56	; 0x38
 8002138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	60fb      	str	r3, [r7, #12]
  return(result);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3301      	adds	r3, #1
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	2107      	movs	r1, #7
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	ea02 0103 	and.w	r1, r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	2338      	movs	r3, #56	; 0x38
 8002166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	617b      	str	r3, [r7, #20]
  return(result);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	4618      	mov	r0, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	409a      	lsls	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	615a      	str	r2, [r3, #20]
      /*  paths.                                                                */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */
         
      /* Configuration of common ADC parameters                                 */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218c:	4b4f      	ldr	r3, [pc, #316]	; (80022cc <HAL_ADC_ConfigChannel+0x76c>)
 800218e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    
  
      /* If the requested internal measurement path has already been enabled,   */
      /* bypass the configuration processing.                                   */
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b11      	cmp	r3, #17
 8002198:	d106      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x648>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800219a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d015      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x674>
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80021ac:	2b12      	cmp	r3, #18
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x65e>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x674>
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d176      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x754>
            (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80021c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d16f      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x754>
      {
        /* Configuration of common ADC parameters (continuation)                */
  
        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x694>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x694>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x696>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d147      	bne.n	800228a <HAL_ADC_ConfigChannel+0x72a>
           (ADC_ANY_OTHER_ENABLED(hadc) == RESET) )
        {
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b11      	cmp	r3, #17
 8002200:	d11f      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x6e2>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a32      	ldr	r2, [pc, #200]	; (80022d0 <HAL_ADC_ConfigChannel+0x770>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d152      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800220c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002216:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800221a:	609a      	str	r2, [r3, #8]
            
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially          */
              /*       CPU processing cycles.                                 */
              wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / (1000000 * 2)));
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <HAL_ADC_ConfigChannel+0x774>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a2d      	ldr	r2, [pc, #180]	; (80022d8 <HAL_ADC_ConfigChannel+0x778>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	0cda      	lsrs	r2, r3, #19
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0)
 8002232:	e002      	b.n	800223a <HAL_ADC_ConfigChannel+0x6da>
              {
                wait_loop_index--;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	3b01      	subs	r3, #1
 8002238:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x6d4>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002240:	e037      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
              }
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b12      	cmp	r3, #18
 8002248:	d10d      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x706>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_ADC_ConfigChannel+0x770>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d12e      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800225e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002262:	609a      	str	r2, [r3, #8]
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002264:	e025      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
            }
          }
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d121      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
          { 
            if (ADC_VREFINT_INSTANCE(hadc))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_ADC_ConfigChannel+0x770>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d11c      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
            {
              SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002278:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002286:	609a      	str	r2, [r3, #8]
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002288:	e013      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x752>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else  
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	659a      	str	r2, [r3, #88]	; 0x58
          
          tmp_hal_status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800229c:	e00a      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x754>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	659a      	str	r2, [r3, #88]	; 0x58
    
    tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80022b0:	e000      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x754>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022b2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	37dc      	adds	r7, #220	; 0xdc
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	50040300 	.word	0x50040300
 80022d0:	50040000 	.word	0x50040000
 80022d4:	20000000 	.word	0x20000000
 80022d8:	431bde83 	.word	0x431bde83

080022dc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 8094 	beq.w	800242a <ADC_ConversionStop+0x14e>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002310:	d12a      	bne.n	8002368 <ADC_ConversionStop+0x8c>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d126      	bne.n	8002368 <ADC_ConversionStop+0x8c>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d122      	bne.n	8002368 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002322:	230c      	movs	r3, #12
 8002324:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002326:	e014      	b.n	8002352 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4a42      	ldr	r2, [pc, #264]	; (8002434 <ADC_ConversionStop+0x158>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d90d      	bls.n	800234c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	f043 0210 	orr.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	; 0x5c
          
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e06f      	b.n	800242c <ADC_ConversionStop+0x150>
        }
        Conversion_Timeout_CPU_cycles ++;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3301      	adds	r3, #1
 8002350:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b40      	cmp	r3, #64	; 0x40
 800235e:	d1e3      	bne.n	8002328 <ADC_ConversionStop+0x4c>
      }
      
      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2240      	movs	r2, #64	; 0x40
 8002366:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b60      	cmp	r3, #96	; 0x60
 800236c:	d015      	beq.n	800239a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b04      	cmp	r3, #4
 800237a:	d10e      	bne.n	800239a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002386:	2b00      	cmp	r3, #0
 8002388:	d107      	bne.n	800239a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTP);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0210 	orr.w	r2, r2, #16
 8002398:	609a      	str	r2, [r3, #8]
      }
    }
    
    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b0c      	cmp	r3, #12
 800239e:	d015      	beq.n	80023cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d10e      	bne.n	80023cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	609a      	str	r2, [r3, #8]
      }   
    }
    
    /* Selection of start and stop bits with respect to the regular or injected group */
    switch(ConversionGroup)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b60      	cmp	r3, #96	; 0x60
 80023d0:	d005      	beq.n	80023de <ADC_ConversionStop+0x102>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b6c      	cmp	r3, #108	; 0x6c
 80023d6:	d105      	bne.n	80023e4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023d8:	230c      	movs	r3, #12
 80023da:	617b      	str	r3, [r7, #20]
        break;
 80023dc:	e005      	b.n	80023ea <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023de:	2308      	movs	r3, #8
 80023e0:	617b      	str	r3, [r7, #20]
        break;
 80023e2:	e002      	b.n	80023ea <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP only*/
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023e4:	2304      	movs	r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
        break;
 80023e8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    
    
    tickstart = HAL_GetTick();
 80023ea:	f7ff f861 	bl	80014b0 <HAL_GetTick>
 80023ee:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80023f0:	e014      	b.n	800241c <ADC_ConversionStop+0x140>
    {
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023f2:	f7ff f85d 	bl	80014b0 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d90d      	bls.n	800241c <ADC_ConversionStop+0x140>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	f043 0210 	orr.w	r2, r3, #16
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e007      	b.n	800242c <ADC_ConversionStop+0x150>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e3      	bne.n	80023f2 <ADC_ConversionStop+0x116>
    }
    
  } /* if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc)) */
  
  /* Return HAL status */
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	000a33ff 	.word	0x000a33ff

08002438 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d108      	bne.n	8002464 <ADC_Enable+0x2c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <ADC_Enable+0x2c>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <ADC_Enable+0x2e>
 8002464:	2300      	movs	r3, #0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d144      	bne.n	80024f4 <ADC_Enable+0xbc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <ADC_Enable+0xc8>)
 8002472:	4013      	ands	r3, r2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00d      	beq.n	8002494 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c
      
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e030      	b.n	80024f6 <ADC_Enable+0xbe>
    }
    
    /* Enable the ADC peripheral */
    ADC_ENABLE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	609a      	str	r2, [r3, #8]
    
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024a4:	f7ff f804 	bl	80014b0 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024aa:	e01c      	b.n	80024e6 <ADC_Enable+0xae>
          has been cleared (after a calibration), ADEN bit is reset by the 
          calibration logic.
			    The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      ADC_ENABLE(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	609a      	str	r2, [r3, #8]

      if((HAL_GetTick()-tickstart) > ADC_ENABLE_TIMEOUT)
 80024bc:	f7fe fff8 	bl	80014b0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d90d      	bls.n	80024e6 <ADC_Enable+0xae>
      {  
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f043 0210 	orr.w	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	f043 0201 	orr.w	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	65da      	str	r2, [r3, #92]	; 0x5c
      
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e007      	b.n	80024f6 <ADC_Enable+0xbe>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d1db      	bne.n	80024ac <ADC_Enable+0x74>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	8000003f 	.word	0x8000003f

08002504 <ADC_Disable>:
  *         stopped.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <ADC_Disable+0x2c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <ADC_Disable+0x2c>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <ADC_Disable+0x2e>
 8002530:	2300      	movs	r3, #0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d040      	beq.n	80025b8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030d 	and.w	r3, r3, #13
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10f      	bne.n	8002564 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      ADC_DISABLE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0202 	orr.w	r2, r2, #2
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2203      	movs	r2, #3
 800255a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800255c:	f7fe ffa8 	bl	80014b0 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002562:	e022      	b.n	80025aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f043 0210 	orr.w	r2, r3, #16
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	f043 0201 	orr.w	r2, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e01c      	b.n	80025ba <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002580:	f7fe ff96 	bl	80014b0 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d90d      	bls.n	80025aa <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f043 0210 	orr.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259e:	f043 0201 	orr.w	r2, r3, #1
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	65da      	str	r2, [r3, #92]	; 0x5c
        
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e007      	b.n	80025ba <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d0e3      	beq.n	8002580 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, (HAL_ADC_STATE_ERROR_INTERNAL|HAL_ADC_STATE_ERROR_DMA)))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d14a      	bne.n	8002672 <ADC_DMAConvCplt+0xb0>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Is it the end of the regular sequence ? */
    if (HAL_IS_BIT_SET(hadc->Instance->ISR, ADC_FLAG_EOS))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d120      	bne.n	8002638 <ADC_DMAConvCplt+0x76>
    {
      /* Are conversions software-triggered ? */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002600:	2b00      	cmp	r3, #0
 8002602:	d132      	bne.n	800266a <ADC_DMAConvCplt+0xa8>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == RESET)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d12b      	bne.n	800266a <ADC_DMAConvCplt+0xa8>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	659a      	str	r2, [r3, #88]	; 0x58
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11f      	bne.n	800266a <ADC_DMAConvCplt+0xa8>
          { 
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	659a      	str	r2, [r3, #88]	; 0x58
 8002636:	e018      	b.n	800266a <ADC_DMAConvCplt+0xa8>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d111      	bne.n	800266a <ADC_DMAConvCplt+0xa8>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <ADC_DMAConvCplt+0xa8>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58
        }
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f003 fe00 	bl	8006270 <HAL_ADC_ConvCpltCallback>
    {
      /* call Error Callback function */
      HAL_ADC_ErrorCallback(hadc);
    }
  }
}
 8002670:	e008      	b.n	8002684 <ADC_DMAConvCplt+0xc2>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b10      	cmp	r3, #16
 800267c:	d102      	bne.n	8002684 <ADC_DMAConvCplt+0xc2>
      HAL_ADC_ErrorCallback(hadc);
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff fa64 	bl	8001b4c <HAL_ADC_ErrorCallback>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f7ff fa4a 	bl	8001b4c <HAL_ADC_ErrorCallback>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_ADCEx_Calibration_Start>:
  *            @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *            @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	72fb      	strb	r3, [r7, #11]
  uint32_t WaitLoopIndex = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADCEx_Calibration_Start+0x20>
 80026dc:	2302      	movs	r3, #2
 80026de:	e059      	b.n	8002794 <HAL_ADCEx_Calibration_Start+0xd4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Calibration prerequisite: ADC must be disabled. */
  
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff0b 	bl	8002504 <ADC_Disable>
 80026ee:	4603      	mov	r3, r0
 80026f0:	72fb      	strb	r3, [r7, #11]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026f2:	7afb      	ldrb	r3, [r7, #11]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d142      	bne.n	800277e <HAL_ADCEx_Calibration_Start+0xbe>
  {
    /* Change ADC state */
    /* Clear HAL_ADC_STATE_REG_BUSY and HAL_ADC_STATE_INJ_BUSY bits, set HAL_ADC_STATE_BUSY_INTERNAL bit */
    ADC_STATE_CLR_SET(hadc->State, (HAL_ADC_STATE_REG_BUSY|HAL_ADC_STATE_INJ_BUSY), HAL_ADC_STATE_BUSY_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002700:	f023 0302 	bic.w	r3, r3, #2
 8002704:	f043 0202 	orr.w	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Select calibration mode single ended or differential ended */
    MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALDIF, SingleDiff);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 4180 	bic.w	r1, r3, #1073741824	; 0x40000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	609a      	str	r2, [r3, #8]
    
    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800272e:	609a      	str	r2, [r3, #8]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002730:	e014      	b.n	800275c <HAL_ADCEx_Calibration_Start+0x9c>
    {
      WaitLoopIndex++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
      if (WaitLoopIndex >= ADC_CALIBRATION_TIMEOUT)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 800273e:	d30d      	bcc.n	800275c <HAL_ADCEx_Calibration_Start+0x9c>
      {
        /* Update ADC state machine to error */
        /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_ERROR_INTERNAL bit */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f023 0312 	bic.w	r3, r3, #18
 8002748:	f043 0210 	orr.w	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	659a      	str	r2, [r3, #88]	; 0x58
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e01b      	b.n	8002794 <HAL_ADCEx_Calibration_Start+0xd4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800276a:	d0e2      	beq.n	8002732 <HAL_ADCEx_Calibration_Start+0x72>
      }
    }
    
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f023 0303 	bic.w	r3, r3, #3
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	; 0x58
 800277c:	e005      	b.n	800278a <HAL_ADCEx_Calibration_Start+0xca>
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f043 0210 	orr.w	r2, r3, #16
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  
  /* Return function status */
  return tmp_hal_status;
 8002792:	7afb      	ldrb	r3, [r7, #11]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <NVIC_SetPriorityGrouping+0x44>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b8:	4013      	ands	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <NVIC_SetPriorityGrouping+0x44>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	60d3      	str	r3, [r2, #12]
}
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e8:	4b04      	ldr	r3, [pc, #16]	; (80027fc <NVIC_GetPriorityGrouping+0x18>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	f003 0307 	and.w	r3, r3, #7
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4906      	ldr	r1, [pc, #24]	; (800282c <NVIC_EnableIRQ+0x2c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	2001      	movs	r0, #1
 800281a:	fa00 f202 	lsl.w	r2, r0, r2
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100

08002830 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <NVIC_DisableIRQ+0x30>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	3320      	adds	r3, #32
 8002850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	da0b      	bge.n	8002890 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <NVIC_SetPriority+0x4c>)
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 030f 	and.w	r3, r3, #15
 8002884:	3b04      	subs	r3, #4
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288e:	e009      	b.n	80028a4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4907      	ldr	r1, [pc, #28]	; (80028b4 <NVIC_SetPriority+0x50>)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	440b      	add	r3, r1
 80028a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	e000ed00 	.word	0xe000ed00
 80028b4:	e000e100 	.word	0xe000e100

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002920:	f3bf 8f4f 	dsb	sy
}
 8002924:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002926:	4b07      	ldr	r3, [pc, #28]	; (8002944 <NVIC_SystemReset+0x28>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800292e:	4905      	ldr	r1, [pc, #20]	; (8002944 <NVIC_SystemReset+0x28>)
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <NVIC_SystemReset+0x2c>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002936:	f3bf 8f4f 	dsb	sy
}
 800293a:	bf00      	nop
  __ASM volatile ("nop");
 800293c:	bf00      	nop
}
 800293e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002940:	e7fc      	b.n	800293c <NVIC_SystemReset+0x20>
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00
 8002948:	05fa0004 	.word	0x05fa0004

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f7ff ff78 	bl	8002864 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff feff 	bl	800279c <NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b8:	f7ff ff14 	bl	80027e4 <NVIC_GetPriorityGrouping>
 80029bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	6978      	ldr	r0, [r7, #20]
 80029c4:	f7ff ff78 	bl	80028b8 <NVIC_EncodePriority>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ce:	4611      	mov	r1, r2
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff ff47 	bl	8002864 <NVIC_SetPriority>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff07 	bl	8002800 <NVIC_EnableIRQ>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff11 	bl	8002830 <NVIC_DisableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002a1a:	f7ff ff7f 	bl	800291c <NVIC_SystemReset>
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff8e 	bl	800294c <SysTick_Config>
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d106      	bne.n	8002a58 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a08      	ldr	r2, [pc, #32]	; (8002a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002a56:	e005      	b.n	8002a64 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002a78:	f000 f802 	bl	8002a80 <HAL_SYSTICK_Callback>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e09c      	b.n	8002bdc <HAL_DMA_Init+0x150>
  {
    assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
  }
  
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <HAL_DMA_Init+0x15c>)
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d80f      	bhi.n	8002ace <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <HAL_DMA_Init+0x160>)
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4a4d      	ldr	r2, [pc, #308]	; (8002bf0 <HAL_DMA_Init+0x164>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	009a      	lsls	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4a      	ldr	r2, [pc, #296]	; (8002bf4 <HAL_DMA_Init+0x168>)
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40
 8002acc:	e00e      	b.n	8002aec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <HAL_DMA_Init+0x16c>)
 8002ad6:	4413      	add	r3, r2
 8002ad8:	4a45      	ldr	r2, [pc, #276]	; (8002bf0 <HAL_DMA_Init+0x164>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	009a      	lsls	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a44      	ldr	r2, [pc, #272]	; (8002bfc <HAL_DMA_Init+0x170>)
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b46:	d031      	beq.n	8002bac <HAL_DMA_Init+0x120>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	4a29      	ldr	r2, [pc, #164]	; (8002bf4 <HAL_DMA_Init+0x168>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d116      	bne.n	8002b80 <HAL_DMA_Init+0xf4>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_DMA_Init+0x174>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	4927      	ldr	r1, [pc, #156]	; (8002c00 <HAL_DMA_Init+0x174>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <HAL_DMA_Init+0x174>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4921      	ldr	r1, [pc, #132]	; (8002c00 <HAL_DMA_Init+0x174>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
 8002b7e:	e015      	b.n	8002bac <HAL_DMA_Init+0x120>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8002b80:	4b20      	ldr	r3, [pc, #128]	; (8002c04 <HAL_DMA_Init+0x178>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	210f      	movs	r1, #15
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	491c      	ldr	r1, [pc, #112]	; (8002c04 <HAL_DMA_Init+0x178>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
     
      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex)); 
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_DMA_Init+0x178>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6859      	ldr	r1, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	4917      	ldr	r1, [pc, #92]	; (8002c04 <HAL_DMA_Init+0x178>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
    }
  }

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40020407 	.word	0x40020407
 8002bec:	bffdfff8 	.word	0xbffdfff8
 8002bf0:	cccccccd 	.word	0xcccccccd
 8002bf4:	40020000 	.word	0x40020000
 8002bf8:	bffdfbf8 	.word	0xbffdfbf8
 8002bfc:	40020400 	.word	0x40020400
 8002c00:	400200a8 	.word	0x400200a8
 8002c04:	400204a8 	.word	0x400204a8

08002c08 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e060      	b.n	8002cdc <HAL_DMA_DeInit+0xd4>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

  /* Calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_DMA_DeInit+0xe0>)
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d80f      	bhi.n	8002c5e <HAL_DMA_DeInit+0x56>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b29      	ldr	r3, [pc, #164]	; (8002cec <HAL_DMA_DeInit+0xe4>)
 8002c46:	4413      	add	r3, r2
 8002c48:	4a29      	ldr	r2, [pc, #164]	; (8002cf0 <HAL_DMA_DeInit+0xe8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	009a      	lsls	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <HAL_DMA_DeInit+0xec>)
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c5c:	e00e      	b.n	8002c7c <HAL_DMA_DeInit+0x74>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_DMA_DeInit+0xf0>)
 8002c66:	4413      	add	r3, r2
 8002c68:	4a21      	ldr	r2, [pc, #132]	; (8002cf0 <HAL_DMA_DeInit+0xe8>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <HAL_DMA_DeInit+0xf4>)
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <HAL_DMA_DeInit+0xec>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d10b      	bne.n	8002cae <HAL_DMA_DeInit+0xa6>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_DMA_DeInit+0xf8>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	210f      	movs	r1, #15
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_DMA_DeInit+0xf8>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
 8002cac:	e00a      	b.n	8002cc4 <HAL_DMA_DeInit+0xbc>
  }
  else  
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex)); 
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_DMA_DeInit+0xfc>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	210f      	movs	r1, #15
 8002cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	4911      	ldr	r1, [pc, #68]	; (8002d04 <HAL_DMA_DeInit+0xfc>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	600b      	str	r3, [r1, #0]
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	40020407 	.word	0x40020407
 8002cec:	bffdfff8 	.word	0xbffdfff8
 8002cf0:	cccccccd 	.word	0xcccccccd
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	bffdfbf8 	.word	0xbffdfbf8
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	400200a8 	.word	0x400200a8
 8002d04:	400204a8 	.word	0x400204a8

08002d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Start_IT+0x20>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e04b      	b.n	8002dc0 <HAL_DMA_Start_IT+0xb8>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d13a      	bne.n	8002db2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f8d4 	bl	8002f0e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_DMA_Start_IT+0x78>
   {
	/* Enable the Half transfer complete interrupt as well */
	__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 020e 	orr.w	r2, r2, #14
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e00f      	b.n	8002da0 <HAL_DMA_Start_IT+0x98>
   }
   else
  {
	__HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0204 	bic.w	r2, r2, #4
 8002d8e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 020a 	orr.w	r2, r2, #10
 8002d9e:	601a      	str	r2, [r3, #0]
  }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f042 0201 	orr.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e005      	b.n	8002dbe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	2204      	movs	r2, #4
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d024      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x72>
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01f      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x72>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0204 	bic.w	r2, r2, #4
 8002e16:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2104      	movs	r1, #4
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d069      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x13c>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	e064      	b.n	8002f04 <HAL_DMA_IRQHandler+0x13c>
      }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	2202      	movs	r2, #2
 8002e40:	409a      	lsls	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d02c      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xdc>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d027      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 020a 	bic.w	r2, r2, #10
 8002e70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2102      	movs	r1, #2
 8002e84:	fa01 f202 	lsl.w	r2, r1, r2
 8002e88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d034      	beq.n	8002f04 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ea2:	e02f      	b.n	8002f04 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d028      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x13e>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d023      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020e 	bic.w	r2, r2, #14
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	4798      	blx	r3
    }
  }
  return;
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
}
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	2101      	movs	r1, #1
 8002f26:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b10      	cmp	r3, #16
 8002f3a:	d108      	bne.n	8002f4e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f4c:	e007      	b.n	8002f5e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	60da      	str	r2, [r3, #12]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
  uint32_t prog_bit = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <HAL_FLASH_Program+0xd4>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d101      	bne.n	8002f8a <HAL_FLASH_Program+0x22>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e053      	b.n	8003032 <HAL_FLASH_Program+0xca>
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <HAL_FLASH_Program+0xd4>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f90:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002f94:	f000 f880 	bl	8003098 <FLASH_WaitForLastOperation>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d143      	bne.n	800302a <HAL_FLASH_Program+0xc2>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002fa2:	4b26      	ldr	r3, [pc, #152]	; (800303c <HAL_FLASH_Program+0xd4>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_FLASH_Program+0xd8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_FLASH_Program+0x60>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fb4:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_FLASH_Program+0xd8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <HAL_FLASH_Program+0xd8>)
 8002fba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fbe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_FLASH_Program+0xd4>)
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	771a      	strb	r2, [r3, #28]
 8002fc6:	e002      	b.n	8002fce <HAL_FLASH_Program+0x66>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fc8:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_FLASH_Program+0xd4>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_FLASH_Program+0x7c>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd8:	68b8      	ldr	r0, [r7, #8]
 8002fda:	f000 f98b 	bl	80032f4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	e010      	b.n	8003006 <HAL_FLASH_Program+0x9e>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d002      	beq.n	8002ff0 <HAL_FLASH_Program+0x88>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d10a      	bne.n	8003006 <HAL_FLASH_Program+0x9e>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68b8      	ldr	r0, [r7, #8]
 8002ff6:	f000 f99f 	bl	8003338 <FLASH_Program_Fast>
      
      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d102      	bne.n	8003006 <HAL_FLASH_Program+0x9e>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003000:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003004:	613b      	str	r3, [r7, #16]
      }
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003006:	f24c 3050 	movw	r0, #50000	; 0xc350
 800300a:	f000 f845 	bl	8003098 <FLASH_WaitForLastOperation>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_FLASH_Program+0xbe>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_FLASH_Program+0xd8>)
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	4907      	ldr	r1, [pc, #28]	; (8003040 <HAL_FLASH_Program+0xd8>)
 8003022:	4013      	ands	r3, r2
 8003024:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003026:	f000 fa9d 	bl	8003564 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_FLASH_Program+0xd4>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]

  return status;  
 8003030:	7dfb      	ldrb	r3, [r7, #23]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000088 	.word	0x20000088
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <HAL_FLASH_Unlock+0x28>)
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	da07      	bge.n	8003060 <HAL_FLASH_Unlock+0x1c>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_FLASH_Unlock+0x28>)
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_FLASH_Unlock+0x2c>)
 8003054:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_FLASH_Unlock+0x28>)
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <HAL_FLASH_Unlock+0x30>)
 800305a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_FLASH_Unlock+0x1e>
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
}
 8003062:	4618      	mov	r0, r3
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40022000 	.word	0x40022000
 8003070:	45670123 	.word	0x45670123
 8003074:	cdef89ab 	.word	0xcdef89ab

08003078 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <HAL_FLASH_Lock+0x1c>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	4a04      	ldr	r2, [pc, #16]	; (8003094 <HAL_FLASH_Lock+0x1c>)
 8003082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003086:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40022000 	.word	0x40022000

08003098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout: maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
    
  uint32_t timeout = HAL_GetTick() + Timeout;
 80030a0:	f7fe fa06 	bl	80014b0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030ac:	e00b      	b.n	80030c6 <FLASH_WaitForLastOperation+0x2e>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d007      	beq.n	80030c6 <FLASH_WaitForLastOperation+0x2e>
    {
      if(HAL_GetTick() >= timeout)
 80030b6:	f7fe f9fb 	bl	80014b0 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d801      	bhi.n	80030c6 <FLASH_WaitForLastOperation+0x2e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e062      	b.n	800318c <FLASH_WaitForLastOperation+0xf4>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030c6:	4b33      	ldr	r3, [pc, #204]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d2:	d0ec      	beq.n	80030ae <FLASH_WaitForLastOperation+0x16>
      }
    } 
  }
  
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 80030d4:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d047      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d041      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 80030ec:	4b29      	ldr	r3, [pc, #164]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0310 	and.w	r3, r3, #16
  if((__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR)) || 
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d03b      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d035      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8003104:	4b23      	ldr	r3, [pc, #140]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))  || 
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d02f      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003118:	2b80      	cmp	r3, #128	; 0x80
 800311a:	d029      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f403 7380 	and.w	r3, r3, #256	; 0x100
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))  ||
 8003124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003128:	d022      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003136:	d01b      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR)) || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR)) || 
 8003140:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003144:	d014      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003152:	d00d      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY)))
 8003154:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))  || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)) ||
 800315c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003160:	d006      	beq.n	8003170 <FLASH_WaitForLastOperation+0xd8>
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))   || (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY)))
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316e:	d103      	bne.n	8003178 <FLASH_WaitForLastOperation+0xe0>
#else
     (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD)))
#endif
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003170:	f000 f812 	bl	8003198 <FLASH_SetErrorCode>
    
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e009      	b.n	800318c <FLASH_WaitForLastOperation+0xf4>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d102      	bne.n	800318a <FLASH_WaitForLastOperation+0xf2>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <FLASH_WaitForLastOperation+0xfc>)
 8003186:	2201      	movs	r2, #1
 8003188:	611a      	str	r2, [r3, #16]
  }
  
  /* If there is an error flag set */
  return HAL_OK;  
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40022000 	.word	0x40022000

08003198 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{  
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR))
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <FLASH_SetErrorCode+0x154>)
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d105      	bne.n	80031b4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OP;
 80031a8:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	4a4f      	ldr	r2, [pc, #316]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031b2:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PROGERR))
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d105      	bne.n	80031cc <FLASH_SetErrorCode+0x34>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80031c0:	4b4b      	ldr	r3, [pc, #300]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f043 0302 	orr.w	r3, r3, #2
 80031c8:	4a49      	ldr	r2, [pc, #292]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031ca:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80031cc:	4b47      	ldr	r3, [pc, #284]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b10      	cmp	r3, #16
 80031d6:	d105      	bne.n	80031e4 <FLASH_SetErrorCode+0x4c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80031d8:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	4a43      	ldr	r2, [pc, #268]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031e2:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80031e4:	4b41      	ldr	r3, [pc, #260]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d105      	bne.n	80031fc <FLASH_SetErrorCode+0x64>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f043 0308 	orr.w	r3, r3, #8
 80031f8:	4a3d      	ldr	r2, [pc, #244]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80031fa:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80031fc:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d105      	bne.n	8003214 <FLASH_SetErrorCode+0x7c>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZ;
 8003208:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	4a37      	ldr	r2, [pc, #220]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003212:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR))
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <FLASH_SetErrorCode+0x154>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321c:	2b80      	cmp	r3, #128	; 0x80
 800321e:	d105      	bne.n	800322c <FLASH_SetErrorCode+0x94>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003220:	4b33      	ldr	r3, [pc, #204]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f043 0320 	orr.w	r3, r3, #32
 8003228:	4a31      	ldr	r2, [pc, #196]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 800322a:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_MISERR))
 800322c:	4b2f      	ldr	r3, [pc, #188]	; (80032ec <FLASH_SetErrorCode+0x154>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003238:	d105      	bne.n	8003246 <FLASH_SetErrorCode+0xae>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_MIS;
 800323a:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003242:	4a2b      	ldr	r2, [pc, #172]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003244:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FASTERR))
 8003246:	4b29      	ldr	r3, [pc, #164]	; (80032ec <FLASH_SetErrorCode+0x154>)
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800324e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003252:	d105      	bne.n	8003260 <FLASH_SetErrorCode+0xc8>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_FAST;
 8003254:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800325c:	4a24      	ldr	r2, [pc, #144]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 800325e:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <FLASH_SetErrorCode+0x154>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326c:	d105      	bne.n	800327a <FLASH_SetErrorCode+0xe2>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800326e:	4b20      	ldr	r3, [pc, #128]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003278:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800327a:	4b1c      	ldr	r3, [pc, #112]	; (80032ec <FLASH_SetErrorCode+0x154>)
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003286:	d105      	bne.n	8003294 <FLASH_SetErrorCode+0xfc>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 8003292:	6053      	str	r3, [r2, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ECCD))
 8003294:	4b15      	ldr	r3, [pc, #84]	; (80032ec <FLASH_SetErrorCode+0x154>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a0:	d105      	bne.n	80032ae <FLASH_SetErrorCode+0x116>
  { 
   pFlash.ErrorCode |= HAL_FLASH_ERROR_ECCD;
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032aa:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80032ac:	6053      	str	r3, [r2, #4]
  }

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY))
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ba:	d109      	bne.n	80032d0 <FLASH_SetErrorCode+0x138>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PEMPTY;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c4:	4a0a      	ldr	r2, [pc, #40]	; (80032f0 <FLASH_SetErrorCode+0x158>)
 80032c6:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80032ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ce:	611a      	str	r2, [r3, #16]
  }
#endif
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	4a05      	ldr	r2, [pc, #20]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80032d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032da:	6193      	str	r3, [r2, #24]
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <FLASH_SetErrorCode+0x154>)
 80032de:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80032e2:	611a      	str	r2, [r3, #16]
} 
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40022000 	.word	0x40022000
 80032f0:	20000088 	.word	0x20000088

080032f4 <FLASH_Program_DoubleWord>:
  * @param  Address: specifies the address to be programmed.
  * @param  Data: specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <FLASH_Program_DoubleWord+0x40>)
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	4a0b      	ldr	r2, [pc, #44]	; (8003334 <FLASH_Program_DoubleWord+0x40>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	6153      	str	r3, [r2, #20]
  
  /* Program the double word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003312:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	000a      	movs	r2, r1
 8003320:	2300      	movs	r3, #0
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	3104      	adds	r1, #4
 8003326:	4613      	mov	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40022000 	.word	0x40022000

08003338 <FLASH_Program_Fast>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8003342:	2340      	movs	r3, #64	; 0x40
 8003344:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	613b      	str	r3, [r7, #16]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <FLASH_Program_Fast+0x50>)
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <FLASH_Program_Fast+0x50>)
 8003354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003358:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800335a:	b672      	cpsid	i
}
 800335c:	bf00      	nop
  __disable_irq();
  
  /* Program the double word of the row */
  do
  {
    *dest_addr++ = *src_addr++;
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	1d13      	adds	r3, r2, #4
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1d19      	adds	r1, r3, #4
 8003368:	6139      	str	r1, [r7, #16]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	601a      	str	r2, [r3, #0]
  } while (--row_index != 0);
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	3b01      	subs	r3, #1
 8003372:	75fb      	strb	r3, [r7, #23]
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f1      	bne.n	800335e <FLASH_Program_Fast+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
 800337a:	b662      	cpsie	i
}
 800337c:	bf00      	nop

  /* Re-enable the interrupts */
  __enable_irq();
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr
 8003388:	40022000 	.word	0x40022000

0800338c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
  uint32_t page_index = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800339e:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_FLASHEx_Erase+0x1e>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e08b      	b.n	80034c2 <HAL_FLASHEx_Erase+0x136>
 80033aa:	4b48      	ldr	r3, [pc, #288]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033b4:	f7ff fe70 	bl	8003098 <FLASH_WaitForLastOperation>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d17b      	bne.n	80034ba <HAL_FLASHEx_Erase+0x12e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80033c2:	4b42      	ldr	r3, [pc, #264]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80033c8:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d019      	beq.n	8003408 <HAL_FLASHEx_Erase+0x7c>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80033d4:	4b3e      	ldr	r3, [pc, #248]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3d      	ldr	r2, [pc, #244]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033de:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80033e0:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <HAL_FLASHEx_Erase+0x74>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80033ec:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 80033f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80033f8:	4b34      	ldr	r3, [pc, #208]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 80033fa:	2203      	movs	r2, #3
 80033fc:	771a      	strb	r2, [r3, #28]
 80033fe:	e016      	b.n	800342e <HAL_FLASHEx_Erase+0xa2>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 8003402:	2201      	movs	r2, #1
 8003404:	771a      	strb	r2, [r3, #28]
 8003406:	e012      	b.n	800342e <HAL_FLASHEx_Erase+0xa2>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003408:	4b31      	ldr	r3, [pc, #196]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d009      	beq.n	8003428 <HAL_FLASHEx_Erase+0x9c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8003414:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 800341a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 8003422:	2202      	movs	r2, #2
 8003424:	771a      	strb	r2, [r3, #28]
 8003426:	e002      	b.n	800342e <HAL_FLASHEx_Erase+0xa2>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003428:	4b28      	ldr	r3, [pc, #160]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 800342a:	2200      	movs	r2, #0
 800342c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d111      	bne.n	800345a <HAL_FLASHEx_Erase+0xce>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f84a 	bl	80034d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003440:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003444:	f7ff fe28 	bl	8003098 <FLASH_WaitForLastOperation>
 8003448:	4603      	mov	r3, r0
 800344a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6153      	str	r3, [r2, #20]
 8003458:	e02d      	b.n	80034b6 <HAL_FLASHEx_Erase+0x12a>
#endif      
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFF;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	f04f 32ff 	mov.w	r2, #4294967295
 8003460:	601a      	str	r2, [r3, #0]
      
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	e01d      	b.n	80034a6 <HAL_FLASHEx_Erase+0x11a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4619      	mov	r1, r3
 8003470:	68b8      	ldr	r0, [r7, #8]
 8003472:	f000 f84b 	bl	800350c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003476:	f24c 3050 	movw	r0, #50000	; 0xc350
 800347a:	f7ff fe0d 	bl	8003098 <FLASH_WaitForLastOperation>
 800347e:	4603      	mov	r3, r0
 8003480:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8003482:	4b13      	ldr	r3, [pc, #76]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_FLASHEx_Erase+0x144>)
 8003488:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800348c:	f023 0302 	bic.w	r3, r3, #2
 8003490:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_FLASHEx_Erase+0x114>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	601a      	str	r2, [r3, #0]
          break;
 800349e:	e00a      	b.n	80034b6 <HAL_FLASHEx_Erase+0x12a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3301      	adds	r3, #1
 80034a4:	60bb      	str	r3, [r7, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d3d9      	bcc.n	800346a <HAL_FLASHEx_Erase+0xde>
        }
      }
    }
    
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80034b6:	f000 f855 	bl	8003564 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034ba:	4b04      	ldr	r3, [pc, #16]	; (80034cc <HAL_FLASHEx_Erase+0x140>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]

  return status;
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000088 	.word	0x20000088
 80034d0:	40022000 	.word	0x40022000

080034d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <FLASH_MassErase+0x34>)
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4a07      	ldr	r2, [pc, #28]	; (8003508 <FLASH_MassErase+0x34>)
 80034ec:	f043 0304 	orr.w	r3, r3, #4
 80034f0:	6153      	str	r3, [r2, #20]
    }
#endif
  }

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <FLASH_MassErase+0x34>)
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	4a04      	ldr	r2, [pc, #16]	; (8003508 <FLASH_MassErase+0x34>)
 80034f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034fc:	6153      	str	r3, [r2, #20]
}
 80034fe:	bf00      	nop
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40022000 	.word	0x40022000

0800350c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, (Page << POSITION_VAL(FLASH_CR_PNB)));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <FLASH_PageErase+0x54>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800351e:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8003522:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	fa93 f3a3 	rbit	r3, r3
 800352a:	60bb      	str	r3, [r7, #8]
  return(result);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	fab3 f383 	clz	r3, r3
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4909      	ldr	r1, [pc, #36]	; (8003560 <FLASH_PageErase+0x54>)
 800353a:	4313      	orrs	r3, r2
 800353c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <FLASH_PageErase+0x54>)
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	4a07      	ldr	r2, [pc, #28]	; (8003560 <FLASH_PageErase+0x54>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800354a:	4b05      	ldr	r3, [pc, #20]	; (8003560 <FLASH_PageErase+0x54>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4a04      	ldr	r2, [pc, #16]	; (8003560 <FLASH_PageErase+0x54>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6153      	str	r3, [r2, #20]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	40022000 	.word	0x40022000

08003564 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8003568:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <FLASH_FlushCaches+0x84>)
 800356a:	7f1b      	ldrb	r3, [r3, #28]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d004      	beq.n	800357c <FLASH_FlushCaches+0x18>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <FLASH_FlushCaches+0x84>)
 8003574:	7f1b      	ldrb	r3, [r3, #28]
 8003576:	b2db      	uxtb	r3, r3
  if((pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_ENABLED) || 
 8003578:	2b03      	cmp	r3, #3
 800357a:	d111      	bne.n	80035a0 <FLASH_FlushCaches+0x3c>
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <FLASH_FlushCaches+0x88>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <FLASH_FlushCaches+0x88>)
 8003582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <FLASH_FlushCaches+0x88>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <FLASH_FlushCaches+0x88>)
 800358e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003592:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <FLASH_FlushCaches+0x88>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <FLASH_FlushCaches+0x88>)
 800359a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800359e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 80035a0:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <FLASH_FlushCaches+0x84>)
 80035a2:	7f1b      	ldrb	r3, [r3, #28]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d004      	beq.n	80035b4 <FLASH_FlushCaches+0x50>
     (pFlash.CacheToReactivate == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <FLASH_FlushCaches+0x84>)
 80035ac:	7f1b      	ldrb	r3, [r3, #28]
 80035ae:	b2db      	uxtb	r3, r3
  if((pFlash.CacheToReactivate == FLASH_CACHE_DCACHE_ENABLED) || 
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d111      	bne.n	80035d8 <FLASH_FlushCaches+0x74>
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a09      	ldr	r2, [pc, #36]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80035cc:	4b07      	ldr	r3, [pc, #28]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a06      	ldr	r2, [pc, #24]	; (80035ec <FLASH_FlushCaches+0x88>)
 80035d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035d6:	6013      	str	r3, [r2, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <FLASH_FlushCaches+0x84>)
 80035da:	2200      	movs	r2, #0
 80035dc:	771a      	strb	r2, [r3, #28]
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20000088 	.word	0x20000088
 80035ec:	40022000 	.word	0x40022000

080035f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003606:	e154      	b.n	80038b2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8146 	beq.w	80038ac <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x40>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b12      	cmp	r3, #18
 800362e:	d123      	bne.n	8003678 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	220f      	movs	r2, #15
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	08da      	lsrs	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	6939      	ldr	r1, [r7, #16]
 8003674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2203      	movs	r2, #3
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 0203 	and.w	r2, r3, #3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d00b      	beq.n	80036cc <HAL_GPIO_Init+0xdc>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d007      	beq.n	80036cc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c0:	2b11      	cmp	r3, #17
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b12      	cmp	r3, #18
 80036ca:	d130      	bne.n	800372e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003702:	2201      	movs	r2, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0201 	and.w	r2, r3, #1
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a0 	beq.w	80038ac <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <HAL_GPIO_Init+0x2e0>)
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	4a57      	ldr	r2, [pc, #348]	; (80038d0 <HAL_GPIO_Init+0x2e0>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6613      	str	r3, [r2, #96]	; 0x60
 8003778:	4b55      	ldr	r3, [pc, #340]	; (80038d0 <HAL_GPIO_Init+0x2e0>)
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003784:	4a53      	ldr	r2, [pc, #332]	; (80038d4 <HAL_GPIO_Init+0x2e4>)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ae:	d019      	beq.n	80037e4 <HAL_GPIO_Init+0x1f4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_GPIO_Init+0x2e8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_GPIO_Init+0x1f0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a48      	ldr	r2, [pc, #288]	; (80038dc <HAL_GPIO_Init+0x2ec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00d      	beq.n	80037dc <HAL_GPIO_Init+0x1ec>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a47      	ldr	r2, [pc, #284]	; (80038e0 <HAL_GPIO_Init+0x2f0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <HAL_GPIO_Init+0x1e8>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a46      	ldr	r2, [pc, #280]	; (80038e4 <HAL_GPIO_Init+0x2f4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_GPIO_Init+0x1e4>
 80037d0:	2304      	movs	r3, #4
 80037d2:	e008      	b.n	80037e6 <HAL_GPIO_Init+0x1f6>
 80037d4:	2307      	movs	r3, #7
 80037d6:	e006      	b.n	80037e6 <HAL_GPIO_Init+0x1f6>
 80037d8:	2303      	movs	r3, #3
 80037da:	e004      	b.n	80037e6 <HAL_GPIO_Init+0x1f6>
 80037dc:	2302      	movs	r3, #2
 80037de:	e002      	b.n	80037e6 <HAL_GPIO_Init+0x1f6>
 80037e0:	2301      	movs	r3, #1
 80037e2:	e000      	b.n	80037e6 <HAL_GPIO_Init+0x1f6>
 80037e4:	2300      	movs	r3, #0
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	f002 0203 	and.w	r2, r2, #3
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	4093      	lsls	r3, r2
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037f6:	4937      	ldr	r1, [pc, #220]	; (80038d4 <HAL_GPIO_Init+0x2e4>)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	3302      	adds	r3, #2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003804:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	43db      	mvns	r3, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003828:	4a2f      	ldr	r2, [pc, #188]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800387c:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003882:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a6:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <HAL_GPIO_Init+0x2f8>)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3301      	adds	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f47f aea3 	bne.w	8003608 <HAL_GPIO_Init+0x18>
  }
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40021000 	.word	0x40021000
 80038d4:	40010000 	.word	0x40010000
 80038d8:	48000400 	.word	0x48000400
 80038dc:	48000800 	.word	0x48000800
 80038e0:	48000c00 	.word	0x48000c00
 80038e4:	48001000 	.word	0x48001000
 80038e8:	40010400 	.word	0x40010400

080038ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00;
 80038fe:	2300      	movs	r3, #0
 8003900:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8003902:	e0b7      	b.n	8003a74 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003904:	2201      	movs	r2, #1
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80aa 	beq.w	8003a6e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2103      	movs	r1, #3
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	08da      	lsrs	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3208      	adds	r2, #8
 8003936:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	08d2      	lsrs	r2, r2, #3
 800394e:	4019      	ands	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3208      	adds	r2, #8
 8003954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2103      	movs	r1, #3
 8003962:	fa01 f303 	lsl.w	r3, r1, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	401a      	ands	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	2101      	movs	r1, #1
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	401a      	ands	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	2103      	movs	r1, #3
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
 8003998:	4a3d      	ldr	r2, [pc, #244]	; (8003a90 <HAL_GPIO_DeInit+0x1a4>)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	60fb      	str	r3, [r7, #12]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4013      	ands	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80039c0:	d019      	beq.n	80039f6 <HAL_GPIO_DeInit+0x10a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a33      	ldr	r2, [pc, #204]	; (8003a94 <HAL_GPIO_DeInit+0x1a8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_DeInit+0x106>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a32      	ldr	r2, [pc, #200]	; (8003a98 <HAL_GPIO_DeInit+0x1ac>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_GPIO_DeInit+0x102>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_GPIO_DeInit+0x1b0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_DeInit+0xfe>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a30      	ldr	r2, [pc, #192]	; (8003aa0 <HAL_GPIO_DeInit+0x1b4>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_GPIO_DeInit+0xfa>
 80039e2:	2304      	movs	r3, #4
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039e6:	2307      	movs	r3, #7
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_DeInit+0x10c>
 80039f6:	2300      	movs	r3, #0
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	f002 0203 	and.w	r2, r2, #3
 80039fe:	0092      	lsls	r2, r2, #2
 8003a00:	4093      	lsls	r3, r2
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d132      	bne.n	8003a6e <HAL_GPIO_DeInit+0x182>
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	220f      	movs	r2, #15
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003a18:	4a1d      	ldr	r2, [pc, #116]	; (8003a90 <HAL_GPIO_DeInit+0x1a4>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	3302      	adds	r3, #2
 8003a20:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	43da      	mvns	r2, r3
 8003a28:	4819      	ldr	r0, [pc, #100]	; (8003a90 <HAL_GPIO_DeInit+0x1a4>)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	400a      	ands	r2, r1
 8003a30:	3302      	adds	r3, #2
 8003a32:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	4919      	ldr	r1, [pc, #100]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4915      	ldr	r1, [pc, #84]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4912      	ldr	r1, [pc, #72]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	490e      	ldr	r1, [pc, #56]	; (8003aa4 <HAL_GPIO_DeInit+0x1b8>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
      }
    }
    
    position++;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f af41 	bne.w	8003904 <HAL_GPIO_DeInit+0x18>
  }
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	371c      	adds	r7, #28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	48000400 	.word	0x48000400
 8003a98:	48000800 	.word	0x48000800
 8003a9c:	48000c00 	.word	0x48000c00
 8003aa0:	48001000 	.word	0x48001000
 8003aa4:	40010400 	.word	0x40010400

08003aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e001      	b.n	8003aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	807b      	strh	r3, [r7, #2]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ae6:	787b      	ldrb	r3, [r7, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aec:	887a      	ldrh	r2, [r7, #2]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003af2:	e002      	b.n	8003afa <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e038      	b.n	8003b88 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003b1e:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f245 5255 	movw	r2, #21845	; 0x5555
 8003b28:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6852      	ldr	r2, [r2, #4]
 8003b32:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003b3e:	f7fd fcb7 	bl	80014b0 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003b46:	f7fd fcb3 	bl	80014b0 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b30      	cmp	r3, #48	; 0x30
 8003b52:	d901      	bls.n	8003b58 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e017      	b.n	8003b88 <HAL_IWDG_Init+0x84>
  while(hiwdg->Instance->SR != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f1      	bne.n	8003b46 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d005      	beq.n	8003b7c <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	611a      	str	r2, [r3, #16]
 8003b7a:	e004      	b.n	8003b86 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
	...

08003bb0 <HAL_MspInit>:
  * @brief  Initialize the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
   */
	  /* USER CODE BEGIN MspInit 0 */

	  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bba:	4a0d      	ldr	r2, [pc, #52]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_MspInit+0x40>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	683b      	ldr	r3, [r7, #0]

	  /* USER CODE BEGIN MspInit 1 */

	  /* USER CODE END MspInit 1 */

}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40021000 	.word	0x40021000

08003bf4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_PWR_EnableBkUpAccess+0x18>)
 8003bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40007000 	.word	0x40007000

08003c10 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c14:	4b03      	ldr	r3, [pc, #12]	; (8003c24 <HAL_PWREx_GetVoltageRange+0x14>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40007000 	.word	0x40007000

08003c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index = 0;  
 8003c30:	2300      	movs	r3, #0
 8003c32:	60fb      	str	r3, [r7, #12]

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3a:	d12f      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3c:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c48:	d037      	beq.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c4a:	4b1f      	ldr	r3, [pc, #124]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c58:	6013      	str	r3, [r2, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8003c5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	0c9b      	lsrs	r3, r3, #18
 8003c66:	2232      	movs	r2, #50	; 0x32
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003c6e:	e002      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d006      	beq.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0x62>
 8003c7c:	4b12      	ldr	r3, [pc, #72]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c88:	d0f2      	beq.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0x48>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d110      	bne.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x92>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00f      	b.n	8003cbc <HAL_PWREx_ControlVoltageScaling+0x94>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca8:	d007      	beq.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x92>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cb8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}  
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bc80      	pop	{r7}
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40007000 	.word	0x40007000
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	431bde83 	.word	0x431bde83

08003cd4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 0307 	bic.w	r3, r3, #7
 8003ce6:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_PWREx_EnterSTOP2Mode+0x58>)
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_PWREx_EnterSTOP2Mode+0x58>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_PWREx_EnterSTOP2Mode+0x30>
  __ASM volatile ("wfi");
 8003d00:	bf30      	wfi
}
 8003d02:	e005      	b.n	8003d10 <HAL_PWREx_EnterSTOP2Mode+0x3c>
  __ASM volatile ("sev");
 8003d04:	bf40      	sev
}
 8003d06:	bf00      	nop
  __ASM volatile ("wfe");
 8003d08:	bf20      	wfe
}
 8003d0a:	bf00      	nop
  __ASM volatile ("wfe");
 8003d0c:	bf20      	wfe
}
 8003d0e:	bf00      	nop
    __WFE();
    __WFE();
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_PWREx_EnterSTOP2Mode+0x58>)
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_PWREx_EnterSTOP2Mode+0x58>)
 8003d16:	f023 0304 	bic.w	r3, r3, #4
 8003d1a:	6113      	str	r3, [r2, #16]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80db 	beq.w	8003f00 <HAL_RCC_OscConfig+0x1d0>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8003d4a:	4b9d      	ldr	r3, [pc, #628]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 8084 	bne.w	8003e60 <HAL_RCC_OscConfig+0x130>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d58:	4b99      	ldr	r3, [pc, #612]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_RCC_OscConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCC_OscConfig+0x40>
      {
        return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e39c      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d004      	beq.n	8003d8a <HAL_RCC_OscConfig+0x5a>
 8003d80:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d88:	e005      	b.n	8003d96 <HAL_RCC_OscConfig+0x66>
 8003d8a:	4b8d      	ldr	r3, [pc, #564]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d223      	bcs.n	8003de2 <HAL_RCC_OscConfig+0xb2>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fe24 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e37d      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dae:	4b84      	ldr	r3, [pc, #528]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a83      	ldr	r2, [pc, #524]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003db4:	f043 0308 	orr.w	r3, r3, #8
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	4b81      	ldr	r3, [pc, #516]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	497e      	ldr	r1, [pc, #504]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dcc:	4b7c      	ldr	r3, [pc, #496]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	4979      	ldr	r1, [pc, #484]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	604b      	str	r3, [r1, #4]
 8003de0:	e022      	b.n	8003e28 <HAL_RCC_OscConfig+0xf8>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de2:	4b77      	ldr	r3, [pc, #476]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a76      	ldr	r2, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003de8:	f043 0308 	orr.w	r3, r3, #8
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b74      	ldr	r3, [pc, #464]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	4971      	ldr	r1, [pc, #452]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e00:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	496c      	ldr	r1, [pc, #432]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fde7 	bl	80049ec <RCC_SetFlashLatencyFromMSIRange>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e340      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003e28:	f000 fc68 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8003e2c:	4601      	mov	r1, r0
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e36:	23f0      	movs	r3, #240	; 0xf0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	623b      	str	r3, [r7, #32]
  return(result);
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	fab3 f383 	clz	r3, r3
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4c:	4a5d      	ldr	r2, [pc, #372]	; (8003fc4 <HAL_RCC_OscConfig+0x294>)
 8003e4e:	5cd3      	ldrb	r3, [r2, r3]
 8003e50:	fa21 f303 	lsr.w	r3, r1, r3
 8003e54:	4a5c      	ldr	r2, [pc, #368]	; (8003fc8 <HAL_RCC_OscConfig+0x298>)
 8003e56:	6013      	str	r3, [r2, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (15);
 8003e58:	200f      	movs	r0, #15
 8003e5a:	f7fd faff 	bl	800145c <HAL_InitTick>
 8003e5e:	e04f      	b.n	8003f00 <HAL_RCC_OscConfig+0x1d0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d032      	beq.n	8003ece <HAL_RCC_OscConfig+0x19e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e68:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a54      	ldr	r2, [pc, #336]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e74:	f7fd fb1c 	bl	80014b0 <HAL_GetTick>
 8003e78:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x15e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e7c:	f7fd fb18 	bl	80014b0 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e30d      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x14c>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9a:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a48      	ldr	r2, [pc, #288]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ea0:	f043 0308 	orr.w	r3, r3, #8
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4943      	ldr	r1, [pc, #268]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eb8:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	021b      	lsls	r3, r3, #8
 8003ec6:	493e      	ldr	r1, [pc, #248]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	604b      	str	r3, [r1, #4]
 8003ecc:	e018      	b.n	8003f00 <HAL_RCC_OscConfig+0x1d0>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ece:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eda:	f7fd fae9 	bl	80014b0 <HAL_GetTick>
 8003ede:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ee2:	f7fd fae5 	bl	80014b0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e2da      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x1b2>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d07b      	beq.n	8004004 <HAL_RCC_OscConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8003f0c:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f18:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d111      	bne.n	8003f48 <HAL_RCC_OscConfig+0x218>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f24:	4b26      	ldr	r3, [pc, #152]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	d10b      	bne.n	8003f48 <HAL_RCC_OscConfig+0x218>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d062      	beq.n	8004002 <HAL_RCC_OscConfig+0x2d2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d15e      	bne.n	8004002 <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e2b0      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d106      	bne.n	8003f60 <HAL_RCC_OscConfig+0x230>
 8003f52:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0x26c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0x254>
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0x26c>
 8003f84:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	; (8003fc0 <HAL_RCC_OscConfig+0x290>)
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <HAL_RCC_OscConfig+0x2aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fa84 	bl	80014b0 <HAL_GetTick>
 8003fa8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003faa:	e00f      	b.n	8003fcc <HAL_RCC_OscConfig+0x29c>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fd fa80 	bl	80014b0 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d908      	bls.n	8003fcc <HAL_RCC_OscConfig+0x29c>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e275      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	08009898 	.word	0x08009898
 8003fc8:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8003fcc:	4ba2      	ldr	r3, [pc, #648]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0e9      	beq.n	8003fac <HAL_RCC_OscConfig+0x27c>
 8003fd8:	e014      	b.n	8004004 <HAL_RCC_OscConfig+0x2d4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fda:	f7fd fa69 	bl	80014b0 <HAL_GetTick>
 8003fde:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x2c4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe2:	f7fd fa65 	bl	80014b0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b64      	cmp	r3, #100	; 0x64
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x2c4>
          {
            return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e25a      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003ff4:	4b98      	ldr	r3, [pc, #608]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x2b2>
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x2d4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004002:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d07f      	beq.n	8004110 <HAL_RCC_OscConfig+0x3e0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004010:	4b91      	ldr	r3, [pc, #580]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b04      	cmp	r3, #4
 800401a:	d00b      	beq.n	8004034 <HAL_RCC_OscConfig+0x304>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800401c:	4b8e      	ldr	r3, [pc, #568]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d127      	bne.n	8004078 <HAL_RCC_OscConfig+0x348>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004028:	4b8b      	ldr	r3, [pc, #556]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d121      	bne.n	8004078 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004034:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_OscConfig+0x31c>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_OscConfig+0x31c>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e22e      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404c:	4b82      	ldr	r3, [pc, #520]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6919      	ldr	r1, [r3, #16]
 8004058:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 800405c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	fa93 f3a3 	rbit	r3, r3
 8004064:	61bb      	str	r3, [r7, #24]
  return(result);
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	fab3 f383 	clz	r3, r3
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	4979      	ldr	r1, [pc, #484]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004076:	e04b      	b.n	8004110 <HAL_RCC_OscConfig+0x3e0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d02e      	beq.n	80040de <HAL_RCC_OscConfig+0x3ae>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004080:	4b75      	ldr	r3, [pc, #468]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a74      	ldr	r2, [pc, #464]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408c:	f7fd fa10 	bl	80014b0 <HAL_GetTick>
 8004090:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fd fa0c 	bl	80014b0 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x376>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e201      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80040a6:	4b6c      	ldr	r3, [pc, #432]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0x364>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b2:	4b69      	ldr	r3, [pc, #420]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6919      	ldr	r1, [r3, #16]
 80040be:	f04f 53f8 	mov.w	r3, #520093696	; 0x1f000000
 80040c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	613b      	str	r3, [r7, #16]
  return(result);
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	fab3 f383 	clz	r3, r3
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	4960      	ldr	r1, [pc, #384]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
 80040dc:	e018      	b.n	8004110 <HAL_RCC_OscConfig+0x3e0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b5e      	ldr	r3, [pc, #376]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5d      	ldr	r2, [pc, #372]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80040e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fd f9e1 	bl	80014b0 <HAL_GetTick>
 80040ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x3d4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fd f9dd 	bl	80014b0 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x3d4>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1d2      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8004104:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d03c      	beq.n	8004196 <HAL_RCC_OscConfig+0x466>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d01c      	beq.n	800415e <HAL_RCC_OscConfig+0x42e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004124:	4b4c      	ldr	r3, [pc, #304]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412a:	4a4b      	ldr	r2, [pc, #300]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004134:	f7fd f9bc 	bl	80014b0 <HAL_GetTick>
 8004138:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413c:	f7fd f9b8 	bl	80014b0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e1ad      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0ef      	beq.n	800413c <HAL_RCC_OscConfig+0x40c>
 800415c:	e01b      	b.n	8004196 <HAL_RCC_OscConfig+0x466>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004164:	4a3c      	ldr	r2, [pc, #240]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fd f99f 	bl	80014b0 <HAL_GetTick>
 8004172:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x458>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004176:	f7fd f99b 	bl	80014b0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x458>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e190      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ef      	bne.n	8004176 <HAL_RCC_OscConfig+0x446>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80a9 	beq.w	80042f6 <HAL_RCC_OscConfig+0x5c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <HAL_RCC_OscConfig+0x4a4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80041b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80041bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	; 0x58
 80041c2:	4b25      	ldr	r3, [pc, #148]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d4:	4b21      	ldr	r3, [pc, #132]	; (800425c <HAL_RCC_OscConfig+0x52c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d118      	bne.n	8004212 <HAL_RCC_OscConfig+0x4e2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e0:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_OscConfig+0x52c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <HAL_RCC_OscConfig+0x52c>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ec:	f7fd f960 	bl	80014b0 <HAL_GetTick>
 80041f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x4d6>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fd f95c 	bl	80014b0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x4d6>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e151      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x52c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCC_OscConfig+0x4c4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d108      	bne.n	800422c <HAL_RCC_OscConfig+0x4fc>
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4a0d      	ldr	r2, [pc, #52]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004222:	f043 0301 	orr.w	r3, r3, #1
 8004226:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422a:	e029      	b.n	8004280 <HAL_RCC_OscConfig+0x550>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d115      	bne.n	8004260 <HAL_RCC_OscConfig+0x530>
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a07      	ldr	r2, [pc, #28]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800423c:	f043 0304 	orr.w	r3, r3, #4
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_RCC_OscConfig+0x528>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	e014      	b.n	8004280 <HAL_RCC_OscConfig+0x550>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	40007000 	.word	0x40007000
 8004260:	4b94      	ldr	r3, [pc, #592]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004266:	4a93      	ldr	r2, [pc, #588]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004270:	4b90      	ldr	r3, [pc, #576]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	4a8f      	ldr	r2, [pc, #572]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_RCC_OscConfig+0x586>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fd f912 	bl	80014b0 <HAL_GetTick>
 800428c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x576>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fd f90e 	bl	80014b0 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	; 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x576>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e101      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80042a6:	4b83      	ldr	r3, [pc, #524]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ed      	beq.n	8004290 <HAL_RCC_OscConfig+0x560>
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x5b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fd f8fb 	bl	80014b0 <HAL_GetTick>
 80042ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x5a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fd f8f7 	bl	80014b0 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x5a4>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e0ea      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 80042d4:	4b77      	ldr	r3, [pc, #476]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ed      	bne.n	80042be <HAL_RCC_OscConfig+0x58e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <HAL_RCC_OscConfig+0x5c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ea:	4b72      	ldr	r3, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	4a71      	ldr	r2, [pc, #452]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80042f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d03c      	beq.n	800437c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d01c      	beq.n	8004344 <HAL_RCC_OscConfig+0x614>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800430a:	4b6a      	ldr	r3, [pc, #424]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800430c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004310:	4a68      	ldr	r2, [pc, #416]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7fd f8c9 	bl	80014b0 <HAL_GetTick>
 800431e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004322:	f7fd f8c5 	bl	80014b0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e0ba      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8004334:	4b5f      	ldr	r3, [pc, #380]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ef      	beq.n	8004322 <HAL_RCC_OscConfig+0x5f2>
 8004342:	e01b      	b.n	800437c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434a:	4a5a      	ldr	r2, [pc, #360]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fd f8ac 	bl	80014b0 <HAL_GetTick>
 8004358:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x63e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435c:	f7fd f8a8 	bl	80014b0 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x63e>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e09d      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 800436e:	4b51      	ldr	r3, [pc, #324]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ef      	bne.n	800435c <HAL_RCC_OscConfig+0x62c>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8091 	beq.w	80044a8 <HAL_RCC_OscConfig+0x778>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004386:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b0c      	cmp	r3, #12
 8004390:	f000 8088 	beq.w	80044a4 <HAL_RCC_OscConfig+0x774>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	2b02      	cmp	r3, #2
 800439a:	d155      	bne.n	8004448 <HAL_RCC_OscConfig+0x718>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b45      	ldr	r3, [pc, #276]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a44      	ldr	r2, [pc, #272]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd f882 	bl	80014b0 <HAL_GetTick>
 80043ac:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x692>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fd f87e 	bl	80014b0 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x692>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e073      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80043c2:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x680>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	3b01      	subs	r3, #1
 80043d4:	011a      	lsls	r2, r3, #4
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	3b01      	subs	r3, #1
 80043ec:	055b      	lsls	r3, r3, #21
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	085b      	lsrs	r3, r3, #1
 80043f6:	3b01      	subs	r3, #1
 80043f8:	065b      	lsls	r3, r3, #25
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	06db      	lsls	r3, r3, #27
 8004402:	492c      	ldr	r1, [pc, #176]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004404:	4313      	orrs	r3, r2
 8004406:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a29      	ldr	r2, [pc, #164]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004412:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004414:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800441a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800441e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd f846 	bl	80014b0 <HAL_GetTick>
 8004424:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x70a>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd f842 	bl	80014b0 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e037      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800443a:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x6f8>
 8004446:	e02f      	b.n	80044a8 <HAL_RCC_OscConfig+0x778>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b1a      	ldr	r3, [pc, #104]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a19      	ldr	r2, [pc, #100]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800444e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004452:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8004454:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d105      	bne.n	800446c <HAL_RCC_OscConfig+0x73c>
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004460:	4b14      	ldr	r3, [pc, #80]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	60d3      	str	r3, [r2, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800446c:	4b11      	ldr	r3, [pc, #68]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a10      	ldr	r2, [pc, #64]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004472:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447a:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd f818 	bl	80014b0 <HAL_GetTick>
 8004480:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x766>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004484:	f7fd f814 	bl	80014b0 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x766>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e009      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8004496:	4b07      	ldr	r3, [pc, #28]	; (80044b4 <HAL_RCC_OscConfig+0x784>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x754>
 80044a2:	e001      	b.n	80044a8 <HAL_RCC_OscConfig+0x778>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x77a>
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3730      	adds	r7, #48	; 0x30
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000

080044b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80044c6:	4b89      	ldr	r3, [pc, #548]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d910      	bls.n	80044f6 <HAL_RCC_ClockConfig+0x3e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d4:	4b85      	ldr	r3, [pc, #532]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f023 0207 	bic.w	r2, r3, #7
 80044dc:	4983      	ldr	r1, [pc, #524]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044e4:	4b81      	ldr	r3, [pc, #516]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d001      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0f6      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4978      	ldr	r1, [pc, #480]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 808e 	beq.w	800463e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 800452a:	4b71      	ldr	r3, [pc, #452]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d121      	bne.n	800457a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0d4      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b03      	cmp	r3, #3
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8004542:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d115      	bne.n	800457a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0c8      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800455a:	4b65      	ldr	r3, [pc, #404]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0bc      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800456a:	4b61      	ldr	r3, [pc, #388]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_ClockConfig+0xc2>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0b4      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457a:	4b5d      	ldr	r3, [pc, #372]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0203 	bic.w	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	495a      	ldr	r1, [pc, #360]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004588:	4313      	orrs	r3, r2
 800458a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800458c:	f7fc ff90 	bl	80014b0 <HAL_GetTick>
 8004590:	6178      	str	r0, [r7, #20]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fc ff88 	bl	80014b0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e098      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80045b2:	4b4f      	ldr	r3, [pc, #316]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d1ee      	bne.n	800459c <HAL_RCC_ClockConfig+0xe4>
 80045be:	e03e      	b.n	800463e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d112      	bne.n	80045ee <HAL_RCC_ClockConfig+0x136>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_ClockConfig+0x128>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ca:	f7fc ff71 	bl	80014b0 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x128>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e081      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d1ee      	bne.n	80045ca <HAL_RCC_ClockConfig+0x112>
 80045ec:	e027      	b.n	800463e <HAL_RCC_ClockConfig+0x186>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d11d      	bne.n	8004632 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x156>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fc ff5a 	bl	80014b0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	; 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x156>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e06a      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 800460e:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ee      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x140>
 800461a:	e010      	b.n	800463e <HAL_RCC_ClockConfig+0x186>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461c:	f7fc ff48 	bl	80014b0 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	f241 3288 	movw	r2, #5000	; 0x1388
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e058      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8004632:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 030c 	and.w	r3, r3, #12
 800463a:	2b04      	cmp	r3, #4
 800463c:	d1ee      	bne.n	800461c <HAL_RCC_ClockConfig+0x164>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800463e:	4b2b      	ldr	r3, [pc, #172]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d210      	bcs.n	800466e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464c:	4b27      	ldr	r3, [pc, #156]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 0207 	bic.w	r2, r3, #7
 8004654:	4925      	ldr	r1, [pc, #148]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_RCC_ClockConfig+0x234>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e03a      	b.n	80046e4 <HAL_RCC_ClockConfig+0x22c>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	491a      	ldr	r1, [pc, #104]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004698:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4912      	ldr	r1, [pc, #72]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80046ac:	f000 f826 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 80046b0:	4601      	mov	r1, r0
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_RCC_ClockConfig+0x238>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046ba:	23f0      	movs	r3, #240	; 0xf0
 80046bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <HAL_RCC_ClockConfig+0x23c>)
 80046d2:	5cd3      	ldrb	r3, [r2, r3]
 80046d4:	fa21 f303 	lsr.w	r3, r1, r3
 80046d8:	4a07      	ldr	r2, [pc, #28]	; (80046f8 <HAL_RCC_ClockConfig+0x240>)
 80046da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (15);
 80046dc:	200f      	movs	r0, #15
 80046de:	f7fc febd 	bl	800145c <HAL_InitTick>

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40022000 	.word	0x40022000
 80046f0:	40021000 	.word	0x40021000
 80046f4:	08009898 	.word	0x08009898
 80046f8:	20000000 	.word	0x20000000

080046fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b095      	sub	sp, #84	; 0x54
 8004700:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8004702:	2300      	movs	r3, #0
 8004704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004706:	2300      	movs	r3, #0
 8004708:	64bb      	str	r3, [r7, #72]	; 0x48
 800470a:	2300      	movs	r3, #0
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
 800470e:	2302      	movs	r3, #2
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004712:	2302      	movs	r3, #2
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	647b      	str	r3, [r7, #68]	; 0x44

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800471a:	4b71      	ldr	r3, [pc, #452]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HAL_RCC_GetSysClockFreq+0x42>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8004726:	4b6e      	ldr	r3, [pc, #440]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 800472e:	2b0c      	cmp	r3, #12
 8004730:	d13c      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xb0>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8004732:	4b6b      	ldr	r3, [pc, #428]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d136      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xb0>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 800473e:	4b68      	ldr	r3, [pc, #416]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0308 	and.w	r3, r3, #8
 8004746:	2b00      	cmp	r3, #0
 8004748:	d112      	bne.n	8004770 <HAL_RCC_GetSysClockFreq+0x74>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 800474a:	4b65      	ldr	r3, [pc, #404]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004750:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004754:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	fab3 f383 	clz	r3, r3
 8004768:	fa22 f303 	lsr.w	r3, r2, r3
 800476c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476e:	e00f      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x94>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8004770:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004778:	23f0      	movs	r3, #240	; 0xf0
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004790:	4a54      	ldr	r2, [pc, #336]	; (80048e4 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8004792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800479a:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 030c 	and.w	r3, r3, #12
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d113      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0xd2>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 80047aa:	e010      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xd2>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ac:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d102      	bne.n	80047be <HAL_RCC_GetSysClockFreq+0xc2>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 80047ba:	647b      	str	r3, [r7, #68]	; 0x44
 80047bc:	e007      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0xd2>
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047be:	4b48      	ldr	r3, [pc, #288]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_GetSysClockFreq+0xd2>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047ca:	4b48      	ldr	r3, [pc, #288]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 80047cc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ce:	4b44      	ldr	r3, [pc, #272]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d17c      	bne.n	80048d4 <HAL_RCC_GetSysClockFreq+0x1d8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 80047e4:	4b3e      	ldr	r3, [pc, #248]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047ec:	2370      	movs	r3, #112	; 0x70
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	623b      	str	r3, [r7, #32]
  return(result);
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	3301      	adds	r3, #1
 8004804:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (pllsource)
 8004806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004808:	2b02      	cmp	r3, #2
 800480a:	d003      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x118>
 800480c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800480e:	2b03      	cmp	r3, #3
 8004810:	d018      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x148>
 8004812:	e02f      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0x178>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004814:	4a34      	ldr	r2, [pc, #208]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x1ec>)
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	4a30      	ldr	r2, [pc, #192]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800481e:	68d2      	ldr	r2, [r2, #12]
 8004820:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8004824:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004828:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	fa92 f2a2 	rbit	r2, r2
 8004830:	61ba      	str	r2, [r7, #24]
  return(result);
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	fab2 f282 	clz	r2, r2
 8004838:	fa21 f202 	lsr.w	r2, r1, r2
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004842:	e02f      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1a8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004844:	4a29      	ldr	r2, [pc, #164]	; (80048ec <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800484e:	68d2      	ldr	r2, [r2, #12]
 8004850:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8004854:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	fa92 f2a2 	rbit	r2, r2
 8004860:	613a      	str	r2, [r7, #16]
  return(result);
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	fab2 f282 	clz	r2, r2
 8004868:	fa21 f202 	lsr.w	r2, r1, r2
 800486c:	fb02 f303 	mul.w	r3, r2, r3
 8004870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004872:	e017      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1a8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8004874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	4a18      	ldr	r2, [pc, #96]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 800487e:	68d2      	ldr	r2, [r2, #12]
 8004880:	f402 41fe 	and.w	r1, r2, #32512	; 0x7f00
 8004884:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004888:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	fa92 f2a2 	rbit	r2, r2
 8004890:	60ba      	str	r2, [r7, #8]
  return(result);
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	fab2 f282 	clz	r2, r2
 8004898:	fa21 f202 	lsr.w	r2, r1, r2
 800489c:	fb02 f303 	mul.w	r3, r2, r3
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048a2:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <HAL_RCC_GetSysClockFreq+0x1e4>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048ac:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80048b0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	603b      	str	r3, [r7, #0]
  return(result);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	fa22 f303 	lsr.w	r3, r2, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    sysclockfreq = pllvco/pllr;
 80048ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  return sysclockfreq;
 80048d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3754      	adds	r7, #84	; 0x54
 80048da:	46bd      	mov	sp, r7
 80048dc:	bc80      	pop	{r7}
 80048de:	4770      	bx	lr
 80048e0:	40021000 	.word	0x40021000
 80048e4:	080098b0 	.word	0x080098b0
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	016e3600 	.word	0x016e3600

080048f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f4:	4b02      	ldr	r3, [pc, #8]	; (8004900 <HAL_RCC_GetHCLKFreq+0x10>)
 80048f6:	681b      	ldr	r3, [r3, #0]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	20000000 	.word	0x20000000

08004904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800490a:	f7ff fff1 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 800490e:	4601      	mov	r1, r0
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004918:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800491c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	603b      	str	r3, [r7, #0]
  return(result);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	080098a8 	.word	0x080098a8

08004948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800494e:	f7ff ffcf 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8004952:	4601      	mov	r1, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800495c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004960:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	603b      	str	r3, [r7, #0]
  return(result);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	fab3 f383 	clz	r3, r3
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	4a04      	ldr	r2, [pc, #16]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004976:	5cd3      	ldrb	r3, [r2, r3]
 8004978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	080098a8 	.word	0x080098a8

0800498c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	220f      	movs	r2, #15
 800499a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_GetClockConfig+0x58>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 0203 	and.w	r2, r3, #3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <HAL_RCC_GetClockConfig+0x58>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCC_GetClockConfig+0x58>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <HAL_RCC_GetClockConfig+0x58>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	08db      	lsrs	r3, r3, #3
 80049c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_GetClockConfig+0x5c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0207 	and.w	r2, r3, #7
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	601a      	str	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40021000 	.word	0x40021000
 80049e8:	40022000 	.word	0x40022000

080049ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t vos = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049f8:	2300      	movs	r3, #0
 80049fa:	613b      	str	r3, [r7, #16]
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049fc:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <RCC_SetFlashLatencyFromMSIRange+0x24>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a08:	f7ff f902 	bl	8003c10 <HAL_PWREx_GetVoltageRange>
 8004a0c:	6178      	str	r0, [r7, #20]
 8004a0e:	e014      	b.n	8004a3a <RCC_SetFlashLatencyFromMSIRange+0x4e>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a28:	f7ff f8f2 	bl	8003c10 <HAL_PWREx_GetVoltageRange>
 8004a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a32:	4a1d      	ldr	r2, [pc, #116]	; (8004aa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a40:	d10b      	bne.n	8004a5a <RCC_SetFlashLatencyFromMSIRange+0x6e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b80      	cmp	r3, #128	; 0x80
 8004a46:	d919      	bls.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8004a4c:	d902      	bls.n	8004a54 <RCC_SetFlashLatencyFromMSIRange+0x68>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a4e:	2302      	movs	r3, #2
 8004a50:	613b      	str	r3, [r7, #16]
 8004a52:	e013      	b.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a54:	2301      	movs	r3, #1
 8004a56:	613b      	str	r3, [r7, #16]
 8004a58:	e010      	b.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d902      	bls.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0x7a>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a60:	2303      	movs	r3, #3
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	e00a      	b.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d102      	bne.n	8004a72 <RCC_SetFlashLatencyFromMSIRange+0x86>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	e004      	b.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
      }
      else if(msirange == RCC_MSIRANGE_7) 
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b70      	cmp	r3, #112	; 0x70
 8004a76:	d101      	bne.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x90>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a78:	2301      	movs	r3, #1
 8004a7a:	613b      	str	r3, [r7, #16]
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	4909      	ldr	r1, [pc, #36]	; (8004aac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <RCC_SetFlashLatencyFromMSIRange+0xb2>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  }
  
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40022000 	.word	0x40022000

08004ab0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e075      	b.n	8004bae <HAL_RTC_Init+0xfe>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
  
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f91c 	bl	8004d14 <HAL_RTC_MspInit>
  }

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	22ca      	movs	r2, #202	; 0xca
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2253      	movs	r2, #83	; 0x53
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f947 	bl	8004d88 <RTC_EnterInitMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e04c      	b.n	8004bae <HAL_RTC_Init+0xfe>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b72:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0203 	bic.w	r2, r2, #3
 8004b82:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_RTC_DeInit>:
  * @param  hrtc: RTC handle
  * @note   This function doesn't reset the RTC Backup Data registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	22ca      	movs	r2, #202	; 0xca
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2253      	movs	r2, #83	; 0x53
 8004bda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8d3 	bl	8004d88 <RTC_EnterInitMode>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <HAL_RTC_DeInit+0x44>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	22ff      	movs	r2, #255	; 0xff
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2204      	movs	r2, #4
 8004bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e084      	b.n	8004d06 <HAL_RTC_DeInit+0x14e>
  }
  else
  {
    /* Reset TR, DR and CR registers */
    //hrtc->Instance->TR = (uint32_t)0x00000000;
    hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f242 1201 	movw	r2, #8449	; 0x2101
 8004c04:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    hrtc->Instance->CR &= RTC_CR_WUCKSEL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f002 0207 	and.w	r2, r2, #7
 8004c14:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004c16:	f7fc fc4b 	bl	80014b0 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

    /* Wait till WUTWF flag is set and if Time out is reached exit */
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8004c1c:	e011      	b.n	8004c42 <HAL_RTC_DeInit+0x8a>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c1e:	f7fc fc47 	bl	80014b0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c2c:	d909      	bls.n	8004c42 <HAL_RTC_DeInit+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	22ff      	movs	r2, #255	; 0xff
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e061      	b.n	8004d06 <HAL_RTC_DeInit+0x14e>
    while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e6      	beq.n	8004c1e <HAL_RTC_DeInit+0x66>
      }
    }

    /* Reset all RTC CR register bits */
    hrtc->Instance->CR &= (uint32_t)0x00000000;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->WUTR = RTC_WUTR_WUT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c66:	615a      	str	r2, [r3, #20]
    hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FF));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <HAL_RTC_DeInit+0x158>)
 8004c6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ALRMAR = (uint32_t)0x00000000;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2200      	movs	r2, #0
 8004c76:	61da      	str	r2, [r3, #28]
    hrtc->Instance->ALRMBR = (uint32_t)0x00000000;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	621a      	str	r2, [r3, #32]
    hrtc->Instance->SHIFTR = (uint32_t)0x00000000;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Instance->CALR = (uint32_t)0x00000000;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hrtc->Instance->ALRMASSR = (uint32_t)0x00000000;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
    hrtc->Instance->ALRMBSSR = (uint32_t)0x00000000;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Reset ISR register and exit initialization mode */
    hrtc->Instance->ISR = (uint32_t)0x00000000;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60da      	str	r2, [r3, #12]

    /* Reset Tamper configuration register */
    hrtc->Instance->TAMPCR = 0x00000000;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2200      	movs	r2, #0
 8004cae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Reset Option register */
    hrtc->Instance->OR = 0x00000000;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10f      	bne.n	8004ce6 <HAL_RTC_DeInit+0x12e>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f836 	bl	8004d38 <HAL_RTC_WaitForSynchro>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_RTC_DeInit+0x12e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	22ff      	movs	r2, #255	; 0xff
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2204      	movs	r2, #4
 8004cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00f      	b.n	8004d06 <HAL_RTC_DeInit+0x14e>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	22ff      	movs	r2, #255	; 0xff
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Initialize RTC MSP */
  HAL_RTC_MspDeInit(hrtc);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f819 	bl	8004d26 <HAL_RTC_MspDeInit>

  hrtc->State = HAL_RTC_STATE_RESET;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	007f00ff 	.word	0x007f00ff

08004d14 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_RTC_MspDeInit>:
  * @brief  DeInitialize the RTC MSP.
  * @param  hrtc: RTC handle 
  * @retval None
  */
__weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspDeInit could be implemented in the user file
   */ 
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004d54:	f7fc fbac 	bl	80014b0 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d5a:	e009      	b.n	8004d70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d5c:	f7fc fba8 	bl	80014b0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6a:	d901      	bls.n	8004d70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e007      	b.n	8004d80 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ee      	beq.n	8004d5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d119      	bne.n	8004dd6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004dac:	f7fc fb80 	bl	80014b0 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004db2:	e009      	b.n	8004dc8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004db4:	f7fc fb7c 	bl	80014b0 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc2:	d901      	bls.n	8004dc8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e007      	b.n	8004dd8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0ee      	beq.n	8004db4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter: Wake up counter
  * @param  WakeUpClock: Wake up clock  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8004dec:	2300      	movs	r3, #0
 8004dee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_RTCEx_SetWakeUpTimer_IT+0x1e>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e09d      	b.n	8004f3a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2202      	movs	r2, #2
 8004e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	22ca      	movs	r2, #202	; 0xca
 8004e14:	625a      	str	r2, [r3, #36]	; 0x24
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2253      	movs	r2, #83	; 0x53
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d020      	beq.n	8004e6e <HAL_RTCEx_SetWakeUpTimer_IT+0x8e>
  {
    tickstart = HAL_GetTick();
 8004e2c:	f7fc fb40 	bl	80014b0 <HAL_GetTick>
 8004e30:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004e32:	e015      	b.n	8004e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e34:	f7fc fb3c 	bl	80014b0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e42:	d90d      	bls.n	8004e60 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	22ff      	movs	r2, #255	; 0xff
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e06c      	b.n	8004f3a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0304 	and.w	r3, r3, #4
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e2      	bne.n	8004e34 <HAL_RTCEx_SetWakeUpTimer_IT+0x54>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004e7e:	f7fc fb17 	bl	80014b0 <HAL_GetTick>
 8004e82:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004e84:	e015      	b.n	8004eb2 <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e86:	f7fc fb13 	bl	80014b0 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e94:	d90d      	bls.n	8004eb2 <HAL_RTCEx_SetWakeUpTimer_IT+0xd2>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	22ff      	movs	r2, #255	; 0xff
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e043      	b.n	8004f3a <HAL_RTCEx_SetWakeUpTimer_IT+0x15a>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0e2      	beq.n	8004e86 <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0207 	bic.w	r2, r2, #7
 8004ed6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6899      	ldr	r1, [r3, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8004eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef2:	6013      	str	r3, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	; (8004f44 <HAL_RTCEx_SetWakeUpTimer_IT+0x164>)
 8004efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004efe:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f0e:	609a      	str	r2, [r3, #8]
  
  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	22ff      	movs	r2, #255	; 0xff
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY; 
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40010400 	.word	0x40010400

08004f48 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004f56:	615a      	str	r2, [r3, #20]
  
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00b      	beq.n	8004f7e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {   
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004f76:	60da      	str	r2, [r3, #12]

    /* WAKEUPTIMER callback */ 
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f002 fc71 	bl	8007860 <HAL_RTCEx_WakeUpTimerEventCallback>
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40010400 	.word	0x40010400

08004f94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e07c      	b.n	80050a0 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f899 	bl	80050f8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fe6:	d902      	bls.n	8004fee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e002      	b.n	8004ff4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ff2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004ffc:	d007      	beq.n	800500e <HAL_SPI_Init+0x7a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005006:	d002      	beq.n	800500e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800501e:	d903      	bls.n	8005028 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	631a      	str	r2, [r3, #48]	; 0x30
 8005026:	e002      	b.n	800502e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	431a      	orrs	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	ea42 0103 	orr.w	r1, r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	f003 0204 	and.w	r2, r3, #4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	ea42 0103 	orr.w	r1, r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_SPI_DeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e01a      	b.n	80050f0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f819 	bl	800510a <HAL_SPI_MspDeInit>

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <HAL_SPI_MspInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr

0800510a <HAL_SPI_MspDeInit>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e01d      	b.n	800516a <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f845 	bl	80051d2 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	3304      	adds	r3, #4
 8005158:	4619      	mov	r1, r3
 800515a:	4610      	mov	r0, r2
 800515c:	f000 f99e 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitialize the TIM Base peripheral
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	f241 1311 	movw	r3, #4369	; 0x1111
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10f      	bne.n	80051b2 <HAL_TIM_Base_DeInit+0x40>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	f240 4344 	movw	r3, #1092	; 0x444
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_Base_DeInit+0x40>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f816 	bl	80051e4 <HAL_TIM_Base_MspDeInit>

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051da:	bf00      	nop
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitialize TIM Base MSP.
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0201 	orr.w	r2, r2, #1
 800520c:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 0201 	orr.w	r2, r2, #1
 800521c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	bc80      	pop	{r7}
 8005228:	4770      	bx	lr

0800522a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b082      	sub	sp, #8
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d122      	bne.n	8005286 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b02      	cmp	r3, #2
 800524c:	d11b      	bne.n	8005286 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0202 	mvn.w	r2, #2
 8005256:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f8f9 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 8005272:	e005      	b.n	8005280 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f8ec 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f8fb 	bl	8005476 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b04      	cmp	r3, #4
 8005292:	d122      	bne.n	80052da <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d11b      	bne.n	80052da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0204 	mvn.w	r2, #4
 80052aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8cf 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 80052c6:	e005      	b.n	80052d4 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8c2 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f8d1 	bl	8005476 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d122      	bne.n	800532e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d11b      	bne.n	800532e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0208 	mvn.w	r2, #8
 80052fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2204      	movs	r2, #4
 8005304:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8a5 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 800531a:	e005      	b.n	8005328 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f898 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8a7 	bl	8005476 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d122      	bne.n	8005382 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0310 	and.w	r3, r3, #16
 8005346:	2b10      	cmp	r3, #16
 8005348:	d11b      	bne.n	8005382 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f06f 0210 	mvn.w	r2, #16
 8005352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2208      	movs	r2, #8
 8005358:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f87b 	bl	8005464 <HAL_TIM_IC_CaptureCallback>
 800536e:	e005      	b.n	800537c <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f86e 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f87d 	bl	8005476 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d111      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x18a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10a      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x18a>
    {
     	  __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0201 	mvn.w	r2, #1
 80053a6:	611a      	str	r2, [r3, #16]
      	  HAL_TIM_PeriodElapsedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f849 	bl	8005440 <HAL_TIM_PeriodElapsedCallback>
	  HAL_TIM_CallBack(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f002 fdac 	bl	8007f0c <HAL_TIM_CallBack>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1b6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053cc:	2b80      	cmp	r3, #128	; 0x80
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x1b6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053d8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8c5 	bl	800556a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d10e      	bne.n	800540c <HAL_TIM_IRQHandler+0x1e2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d107      	bne.n	800540c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005404:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f83e 	bl	8005488 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b20      	cmp	r3, #32
 8005418:	d10e      	bne.n	8005438 <HAL_TIM_IRQHandler+0x20e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d107      	bne.n	8005438 <HAL_TIM_IRQHandler+0x20e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0220 	mvn.w	r2, #32
 8005430:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f890 	bl	8005558 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8005438:	bf00      	nop
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	bc80      	pop	{r7}
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005476:	b480      	push	{r7}
 8005478:	b083      	sub	sp, #12
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	bc80      	pop	{r7}
 8005498:	4770      	bx	lr
	...

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0xb0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0x24>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054be:	d108      	bne.n	80054d2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1d      	ldr	r2, [pc, #116]	; (800554c <TIM_Base_SetConfig+0xb0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_Base_SetConfig+0x56>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e0:	d007      	beq.n	80054f2 <TIM_Base_SetConfig+0x56>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <TIM_Base_SetConfig+0xb4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_Base_SetConfig+0x56>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a19      	ldr	r2, [pc, #100]	; (8005554 <TIM_Base_SetConfig+0xb8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d108      	bne.n	8005504 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a0b      	ldr	r2, [pc, #44]	; (800554c <TIM_Base_SetConfig+0xb0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d007      	beq.n	8005532 <TIM_Base_SetConfig+0x96>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <TIM_Base_SetConfig+0xb4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d003      	beq.n	8005532 <TIM_Base_SetConfig+0x96>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a09      	ldr	r2, [pc, #36]	; (8005554 <TIM_Base_SetConfig+0xb8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d103      	bne.n	800553a <TIM_Base_SetConfig+0x9e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	615a      	str	r2, [r3, #20]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40014000 	.word	0x40014000
 8005554:	40014400 	.word	0x40014400

08005558 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e043      	b.n	8005616 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f873 	bl	800568e <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0201 	bic.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f877 	bl	80056b4 <UART_SetConfig>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e022      	b.n	8005616 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 fb95 	bl	8005d08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055fc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fc1b 	bl	8005e4a <UART_CheckIdleState>
 8005614:	4603      	mov	r3, r0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e02a      	b.n	8005686 <HAL_UART_DeInit+0x68>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2200      	movs	r2, #0
 800565e:	609a      	str	r2, [r3, #8]

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f81d 	bl	80056a0 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->gState    = HAL_UART_STATE_RESET;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState   = HAL_UART_STATE_RESET;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3708      	adds	r7, #8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr
	...

080056b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056b8:	b09c      	sub	sp, #112	; 0x70
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg                     = 0x00000000;
 80056be:	2300      	movs	r3, #0
 80056c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80056c2:	2310      	movs	r3, #16
 80056c4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint16_t brrtemp                    = 0x0000;
 80056c8:	2300      	movs	r3, #0
 80056ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  uint16_t usartdiv                   = 0x0000;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  HAL_StatusTypeDef ret               = HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80056f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	49aa      	ldr	r1, [pc, #680]	; (80059a4 <UART_SetConfig+0x2f0>)
 80056fa:	4019      	ands	r1, r3
 80056fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	430b      	orrs	r3, r1
 8005704:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005712:	68d9      	ldr	r1, [r3, #12]
 8005714:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	ea40 0301 	orr.w	r3, r0, r1
 800571c:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800571e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4b9f      	ldr	r3, [pc, #636]	; (80059a8 <UART_SetConfig+0x2f4>)
 800572a:	429a      	cmp	r2, r3
 800572c:	d004      	beq.n	8005738 <UART_SetConfig+0x84>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800572e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005730:	6a1a      	ldr	r2, [r3, #32]
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	4313      	orrs	r3, r2
 8005736:	66fb      	str	r3, [r7, #108]	; 0x6c
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8005738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005748:	430b      	orrs	r3, r1
 800574a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800574c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b96      	ldr	r3, [pc, #600]	; (80059ac <UART_SetConfig+0x2f8>)
 8005752:	429a      	cmp	r2, r3
 8005754:	d126      	bne.n	80057a4 <UART_SetConfig+0xf0>
 8005756:	4b96      	ldr	r3, [pc, #600]	; (80059b0 <UART_SetConfig+0x2fc>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f003 0303 	and.w	r3, r3, #3
 8005760:	2b03      	cmp	r3, #3
 8005762:	d81b      	bhi.n	800579c <UART_SetConfig+0xe8>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <UART_SetConfig+0xb8>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	0800577d 	.word	0x0800577d
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005785 	.word	0x08005785
 8005778:	08005795 	.word	0x08005795
 800577c:	2301      	movs	r3, #1
 800577e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005782:	e0a9      	b.n	80058d8 <UART_SetConfig+0x224>
 8005784:	2302      	movs	r3, #2
 8005786:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800578a:	e0a5      	b.n	80058d8 <UART_SetConfig+0x224>
 800578c:	2304      	movs	r3, #4
 800578e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005792:	e0a1      	b.n	80058d8 <UART_SetConfig+0x224>
 8005794:	2308      	movs	r3, #8
 8005796:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800579a:	e09d      	b.n	80058d8 <UART_SetConfig+0x224>
 800579c:	2310      	movs	r3, #16
 800579e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80057a2:	e099      	b.n	80058d8 <UART_SetConfig+0x224>
 80057a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	4b82      	ldr	r3, [pc, #520]	; (80059b4 <UART_SetConfig+0x300>)
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d138      	bne.n	8005820 <UART_SetConfig+0x16c>
 80057ae:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <UART_SetConfig+0x2fc>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b0c      	cmp	r3, #12
 80057ba:	d82d      	bhi.n	8005818 <UART_SetConfig+0x164>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x110>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057f9 	.word	0x080057f9
 80057c8:	08005819 	.word	0x08005819
 80057cc:	08005819 	.word	0x08005819
 80057d0:	08005819 	.word	0x08005819
 80057d4:	08005809 	.word	0x08005809
 80057d8:	08005819 	.word	0x08005819
 80057dc:	08005819 	.word	0x08005819
 80057e0:	08005819 	.word	0x08005819
 80057e4:	08005801 	.word	0x08005801
 80057e8:	08005819 	.word	0x08005819
 80057ec:	08005819 	.word	0x08005819
 80057f0:	08005819 	.word	0x08005819
 80057f4:	08005811 	.word	0x08005811
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80057fe:	e06b      	b.n	80058d8 <UART_SetConfig+0x224>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005806:	e067      	b.n	80058d8 <UART_SetConfig+0x224>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800580e:	e063      	b.n	80058d8 <UART_SetConfig+0x224>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005816:	e05f      	b.n	80058d8 <UART_SetConfig+0x224>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800581e:	e05b      	b.n	80058d8 <UART_SetConfig+0x224>
 8005820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b64      	ldr	r3, [pc, #400]	; (80059b8 <UART_SetConfig+0x304>)
 8005826:	429a      	cmp	r2, r3
 8005828:	d125      	bne.n	8005876 <UART_SetConfig+0x1c2>
 800582a:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <UART_SetConfig+0x2fc>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d016      	beq.n	8005866 <UART_SetConfig+0x1b2>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d818      	bhi.n	800586e <UART_SetConfig+0x1ba>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d00a      	beq.n	8005856 <UART_SetConfig+0x1a2>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d814      	bhi.n	800586e <UART_SetConfig+0x1ba>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <UART_SetConfig+0x19a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d008      	beq.n	800585e <UART_SetConfig+0x1aa>
 800584c:	e00f      	b.n	800586e <UART_SetConfig+0x1ba>
 800584e:	2300      	movs	r3, #0
 8005850:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005854:	e040      	b.n	80058d8 <UART_SetConfig+0x224>
 8005856:	2302      	movs	r3, #2
 8005858:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800585c:	e03c      	b.n	80058d8 <UART_SetConfig+0x224>
 800585e:	2304      	movs	r3, #4
 8005860:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005864:	e038      	b.n	80058d8 <UART_SetConfig+0x224>
 8005866:	2308      	movs	r3, #8
 8005868:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800586c:	e034      	b.n	80058d8 <UART_SetConfig+0x224>
 800586e:	2310      	movs	r3, #16
 8005870:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8005874:	e030      	b.n	80058d8 <UART_SetConfig+0x224>
 8005876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	4b4b      	ldr	r3, [pc, #300]	; (80059a8 <UART_SetConfig+0x2f4>)
 800587c:	429a      	cmp	r2, r3
 800587e:	d12a      	bne.n	80058d6 <UART_SetConfig+0x222>
 8005880:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <UART_SetConfig+0x2fc>)
 8005882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005886:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800588a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800588e:	d01a      	beq.n	80058c6 <UART_SetConfig+0x212>
 8005890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005894:	d81b      	bhi.n	80058ce <UART_SetConfig+0x21a>
 8005896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589a:	d00c      	beq.n	80058b6 <UART_SetConfig+0x202>
 800589c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a0:	d815      	bhi.n	80058ce <UART_SetConfig+0x21a>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <UART_SetConfig+0x1fa>
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d008      	beq.n	80058be <UART_SetConfig+0x20a>
 80058ac:	e00f      	b.n	80058ce <UART_SetConfig+0x21a>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80058b4:	e010      	b.n	80058d8 <UART_SetConfig+0x224>
 80058b6:	2302      	movs	r3, #2
 80058b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80058bc:	e00c      	b.n	80058d8 <UART_SetConfig+0x224>
 80058be:	2304      	movs	r3, #4
 80058c0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80058c4:	e008      	b.n	80058d8 <UART_SetConfig+0x224>
 80058c6:	2308      	movs	r3, #8
 80058c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80058cc:	e004      	b.n	80058d8 <UART_SetConfig+0x224>
 80058ce:	2310      	movs	r3, #16
 80058d0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 80058d4:	e000      	b.n	80058d8 <UART_SetConfig+0x224>
 80058d6:	bf00      	nop

  /* Check LPUART instance */
  if(UART_INSTANCE_LOWPOWER(huart))
 80058d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b32      	ldr	r3, [pc, #200]	; (80059a8 <UART_SetConfig+0x2f4>)
 80058de:	429a      	cmp	r2, r3
 80058e0:	f040 811b 	bne.w	8005b1a <UART_SetConfig+0x466>
  {
    /* Retrieve frequency clock */
    tmpreg = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    switch (clocksource)
 80058e8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d824      	bhi.n	800593a <UART_SetConfig+0x286>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x244>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	0800593b 	.word	0x0800593b
 8005900:	08005925 	.word	0x08005925
 8005904:	0800593b 	.word	0x0800593b
 8005908:	0800592b 	.word	0x0800592b
 800590c:	0800593b 	.word	0x0800593b
 8005910:	0800593b 	.word	0x0800593b
 8005914:	0800593b 	.word	0x0800593b
 8005918:	08005933 	.word	0x08005933
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fe fff2 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8005920:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8005922:	e00e      	b.n	8005942 <UART_SetConfig+0x28e>
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8005924:	4b25      	ldr	r3, [pc, #148]	; (80059bc <UART_SetConfig+0x308>)
 8005926:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
 8005928:	e00b      	b.n	8005942 <UART_SetConfig+0x28e>
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 800592a:	f7fe fee7 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 800592e:	66f8      	str	r0, [r7, #108]	; 0x6c
      break;
 8005930:	e007      	b.n	8005942 <UART_SetConfig+0x28e>
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005936:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
 8005938:	e003      	b.n	8005942 <UART_SetConfig+0x28e>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005940:	bf00      	nop
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 81d7 	beq.w	8005cf8 <UART_SetConfig+0x644>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	441a      	add	r2, r3
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	4293      	cmp	r3, r2
 8005958:	d305      	bcc.n	8005966 <UART_SetConfig+0x2b2>
           (tmpreg > (4096 * huart->Init.BaudRate) ))
 800595a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	031a      	lsls	r2, r3, #12
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8005960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005962:	4293      	cmp	r3, r2
 8005964:	d903      	bls.n	800596e <UART_SetConfig+0x2ba>
      {
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800596c:	e1c4      	b.n	8005cf8 <UART_SetConfig+0x644>
      }
      else
      {
        switch (clocksource)
 800596e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005972:	2b08      	cmp	r3, #8
 8005974:	f200 80bc 	bhi.w	8005af0 <UART_SetConfig+0x43c>
 8005978:	a201      	add	r2, pc, #4	; (adr r2, 8005980 <UART_SetConfig+0x2cc>)
 800597a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597e:	bf00      	nop
 8005980:	080059c1 	.word	0x080059c1
 8005984:	08005af1 	.word	0x08005af1
 8005988:	08005a1f 	.word	0x08005a1f
 800598c:	08005af1 	.word	0x08005af1
 8005990:	08005a5f 	.word	0x08005a5f
 8005994:	08005af1 	.word	0x08005af1
 8005998:	08005af1 	.word	0x08005af1
 800599c:	08005af1 	.word	0x08005af1
 80059a0:	08005ab9 	.word	0x08005ab9
 80059a4:	efff69f3 	.word	0xefff69f3
 80059a8:	40008000 	.word	0x40008000
 80059ac:	40013800 	.word	0x40013800
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40004400 	.word	0x40004400
 80059b8:	40004800 	.word	0x40004800
 80059bc:	00f42400 	.word	0x00f42400
        {
        case UART_CLOCKSOURCE_PCLK1:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80059c0:	f7fe ffa0 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2200      	movs	r2, #0
 80059c8:	4698      	mov	r8, r3
 80059ca:	4691      	mov	r9, r2
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	ea4f 2309 	mov.w	r3, r9, lsl #8
 80059d8:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 80059dc:	ea4f 2208 	mov.w	r2, r8, lsl #8
 80059e0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80059e2:	6849      	ldr	r1, [r1, #4]
 80059e4:	0849      	lsrs	r1, r1, #1
 80059e6:	2000      	movs	r0, #0
 80059e8:	6539      	str	r1, [r7, #80]	; 0x50
 80059ea:	6578      	str	r0, [r7, #84]	; 0x54
 80059ec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80059f0:	4621      	mov	r1, r4
 80059f2:	1851      	adds	r1, r2, r1
 80059f4:	64b9      	str	r1, [r7, #72]	; 0x48
 80059f6:	4629      	mov	r1, r5
 80059f8:	eb43 0101 	adc.w	r1, r3, r1
 80059fc:	64f9      	str	r1, [r7, #76]	; 0x4c
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
 8005a06:	647a      	str	r2, [r7, #68]	; 0x44
 8005a08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005a10:	f7fb fb94 	bl	800113c <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8005a1c:	e06c      	b.n	8005af8 <UART_SetConfig+0x444>
        case UART_CLOCKSOURCE_HSI:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	2200      	movs	r2, #0
 8005a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a2a:	4bb0      	ldr	r3, [pc, #704]	; (8005cec <UART_SetConfig+0x638>)
 8005a2c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005a30:	4602      	mov	r2, r0
 8005a32:	18d3      	adds	r3, r2, r3
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30
 8005a36:	460b      	mov	r3, r1
 8005a38:	f143 0300 	adc.w	r3, r3, #0
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005a50:	f7fb fb74 	bl	800113c <__aeabi_uldivmod>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4613      	mov	r3, r2
 8005a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8005a5c:	e04c      	b.n	8005af8 <UART_SetConfig+0x444>
        case UART_CLOCKSOURCE_SYSCLK:
            tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a5e:	f7fe fe4d 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2200      	movs	r2, #0
 8005a66:	461c      	mov	r4, r3
 8005a68:	4615      	mov	r5, r2
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	022b      	lsls	r3, r5, #8
 8005a74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a78:	0222      	lsls	r2, r4, #8
 8005a7a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005a7c:	6849      	ldr	r1, [r1, #4]
 8005a7e:	0849      	lsrs	r1, r1, #1
 8005a80:	2000      	movs	r0, #0
 8005a82:	6239      	str	r1, [r7, #32]
 8005a84:	6278      	str	r0, [r7, #36]	; 0x24
 8005a86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005a8a:	4621      	mov	r1, r4
 8005a8c:	1851      	adds	r1, r2, r1
 8005a8e:	61b9      	str	r1, [r7, #24]
 8005a90:	4629      	mov	r1, r5
 8005a92:	eb43 0101 	adc.w	r1, r3, r1
 8005a96:	61f9      	str	r1, [r7, #28]
 8005a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	613b      	str	r3, [r7, #16]
 8005aa0:	617a      	str	r2, [r7, #20]
 8005aa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005aaa:	f7fb fb47 	bl	800113c <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8005ab6:	e01f      	b.n	8005af8 <UART_SetConfig+0x444>
        case UART_CLOCKSOURCE_LSE:
            tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	2200      	movs	r2, #0
 8005ac0:	469a      	mov	sl, r3
 8005ac2:	4693      	mov	fp, r2
 8005ac4:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8005ac8:	60bb      	str	r3, [r7, #8]
 8005aca:	f14b 0300 	adc.w	r3, fp, #0
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	607a      	str	r2, [r7, #4]
 8005ada:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ade:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ae2:	f7fb fb2b 	bl	800113c <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4613      	mov	r3, r2
 8005aec:	66fb      	str	r3, [r7, #108]	; 0x6c
          break;
 8005aee:	e003      	b.n	8005af8 <UART_SetConfig+0x444>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
            ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8005af6:	bf00      	nop
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8005af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005afe:	d308      	bcc.n	8005b12 <UART_SetConfig+0x45e>
 8005b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b06:	d204      	bcs.n	8005b12 <UART_SetConfig+0x45e>
        {
           huart->Instance->BRR = tmpreg;
 8005b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005b0e:	60da      	str	r2, [r3, #12]
 8005b10:	e0f2      	b.n	8005cf8 <UART_SetConfig+0x644>
        }
        else
        {
          ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005b18:	e0ee      	b.n	8005cf8 <UART_SetConfig+0x644>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b22:	d17c      	bne.n	8005c1e <UART_SetConfig+0x56a>
  {
    switch (clocksource)
 8005b24:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d85c      	bhi.n	8005be6 <UART_SetConfig+0x532>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0x480>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b77 	.word	0x08005b77
 8005b3c:	08005b95 	.word	0x08005b95
 8005b40:	08005be7 	.word	0x08005be7
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005be7 	.word	0x08005be7
 8005b4c:	08005be7 	.word	0x08005be7
 8005b50:	08005be7 	.word	0x08005be7
 8005b54:	08005bcf 	.word	0x08005bcf
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b58:	f7fe fed4 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	005a      	lsls	r2, r3, #1
 8005b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	441a      	add	r2, r3
 8005b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
      break;
 8005b74:	e03b      	b.n	8005bee <UART_SetConfig+0x53a>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005b76:	f7fe fee7 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	005a      	lsls	r2, r3, #1
 8005b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	441a      	add	r2, r3
 8005b86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
      break;
 8005b92:	e02c      	b.n	8005bee <UART_SetConfig+0x53a>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b9e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8005ba2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ba4:	6852      	ldr	r2, [r2, #4]
 8005ba6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005baa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
      break;
 8005bae:	e01e      	b.n	8005bee <UART_SetConfig+0x53a>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005bb0:	f7fe fda4 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	005a      	lsls	r2, r3, #1
 8005bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	441a      	add	r2, r3
 8005bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
      break;
 8005bcc:	e00f      	b.n	8005bee <UART_SetConfig+0x53a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
      break;
 8005be4:	e003      	b.n	8005bee <UART_SetConfig+0x53a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005bec:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0;
 8005bee:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8005bfa:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8005bfe:	105b      	asrs	r3, r3, #1
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    huart->Instance->BRR = brrtemp;
 8005c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e06c      	b.n	8005cf8 <UART_SetConfig+0x644>
  }
  else
  {
    switch (clocksource)
 8005c1e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8005c22:	2b08      	cmp	r3, #8
 8005c24:	d864      	bhi.n	8005cf0 <UART_SetConfig+0x63c>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x578>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c71 	.word	0x08005c71
 8005c34:	08005c91 	.word	0x08005c91
 8005c38:	08005cf1 	.word	0x08005cf1
 8005c3c:	08005cb1 	.word	0x08005cb1
 8005c40:	08005cf1 	.word	0x08005cf1
 8005c44:	08005cf1 	.word	0x08005cf1
 8005c48:	08005cf1 	.word	0x08005cf1
 8005c4c:	08005cd1 	.word	0x08005cd1
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005c50:	f7fe fe58 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	441a      	add	r2, r3
 8005c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60da      	str	r2, [r3, #12]
      break;
 8005c6e:	e043      	b.n	8005cf8 <UART_SetConfig+0x644>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005c70:	f7fe fe6a 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	085b      	lsrs	r3, r3, #1
 8005c7c:	441a      	add	r2, r3
 8005c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60da      	str	r2, [r3, #12]
      break;
 8005c8e:	e033      	b.n	8005cf8 <UART_SetConfig+0x644>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	085b      	lsrs	r3, r3, #1
 8005c96:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005c9a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005c9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca0:	6852      	ldr	r2, [r2, #4]
 8005ca2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	60da      	str	r2, [r3, #12]
      break;
 8005cae:	e023      	b.n	8005cf8 <UART_SetConfig+0x644>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005cb0:	f7fe fd24 	bl	80046fc <HAL_RCC_GetSysClockFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	441a      	add	r2, r3
 8005cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60da      	str	r2, [r3, #12]
      break;
 8005cce:	e013      	b.n	8005cf8 <UART_SetConfig+0x644>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	085b      	lsrs	r3, r3, #1
 8005cd6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60da      	str	r2, [r3, #12]
      break;
 8005cea:	e005      	b.n	8005cf8 <UART_SetConfig+0x644>
 8005cec:	f4240000 	.word	0xf4240000
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005cf6:	bf00      	nop
    }
  }

  return ret;
 8005cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67

}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3770      	adds	r7, #112	; 0x70
 8005d00:	46bd      	mov	sp, r7
 8005d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d06:	bf00      	nop

08005d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e06:	d10a      	bne.n	8005e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b086      	sub	sp, #24
 8005e4e:	af02      	add	r7, sp, #8
 8005e50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005e5c:	f7fb fb28 	bl	80014b0 <HAL_GetTick>
 8005e60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d10e      	bne.n	8005e8e <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f82c 	bl	8005edc <UART_WaitOnFlagUntilTimeout>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <UART_CheckIdleState+0x44>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e022      	b.n	8005ed4 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d10e      	bne.n	8005eba <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f816 	bl	8005edc <UART_WaitOnFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <UART_CheckIdleState+0x70>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e00c      	b.n	8005ed4 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	603b      	str	r3, [r7, #0]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eec:	e02c      	b.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d028      	beq.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8005efc:	f7fb fad8 	bl	80014b0 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d21d      	bcs.n	8005f48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f1a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0201 	bic.w	r2, r2, #1
 8005f2a:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2220      	movs	r2, #32
 8005f30:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e00f      	b.n	8005f68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	4013      	ands	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d0c3      	beq.n	8005eee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <ActivateScan>:


static char adc_Sample_completed = 0;

sADC_Msrs* ActivateScan(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
	unsigned count = 10000;
 8005f76:	f242 7310 	movw	r3, #10000	; 0x2710
 8005f7a:	607b      	str	r3, [r7, #4]

	sADC_Msrs* ptr = NULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	603b      	str	r3, [r7, #0]

	adc_Sample_completed = 0;
 8005f80:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <ActivateScan+0x48>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]

	// get sample
	if (HAL_ADC_Start_DMA(&AdcHandle, (unsigned*)ADC1CnvDat, ADC_CONV_BUFF_SIZE) != HAL_OK)
 8005f86:	2204      	movs	r2, #4
 8005f88:	490c      	ldr	r1, [pc, #48]	; (8005fbc <ActivateScan+0x4c>)
 8005f8a:	480d      	ldr	r0, [pc, #52]	; (8005fc0 <ActivateScan+0x50>)
 8005f8c:	f7fb fd54 	bl	8001a38 <HAL_ADC_Start_DMA>
	{
		//Error_Handler();//
	}

	while (count > 0)
 8005f90:	e009      	b.n	8005fa6 <ActivateScan+0x36>
	{
		if (adc_Sample_completed)
 8005f92:	4b09      	ldr	r3, [pc, #36]	; (8005fb8 <ActivateScan+0x48>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <ActivateScan+0x30>
		{
			ptr = &measurements;
 8005f9a:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <ActivateScan+0x54>)
 8005f9c:	603b      	str	r3, [r7, #0]
			break;
 8005f9e:	e005      	b.n	8005fac <ActivateScan+0x3c>
		}
		count--;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
	while (count > 0)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1f2      	bne.n	8005f92 <ActivateScan+0x22>
	}

	return ptr;
 8005fac:	683b      	ldr	r3, [r7, #0]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	200001ac 	.word	0x200001ac
 8005fbc:	20000188 	.word	0x20000188
 8005fc0:	200000a8 	.word	0x200000a8
 8005fc4:	20000170 	.word	0x20000170

08005fc8 <ADC1_Init>:



void ADC1_Init(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af02      	add	r7, sp, #8
	__HAL_RCC_ADC_CLK_DISABLE();
 8005fce:	4b9b      	ldr	r3, [pc, #620]	; (800623c <ADC1_Init+0x274>)
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	4a9a      	ldr	r2, [pc, #616]	; (800623c <ADC1_Init+0x274>)
 8005fd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_ADC_CLK_ENABLE();
 8005fda:	4b98      	ldr	r3, [pc, #608]	; (800623c <ADC1_Init+0x274>)
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	4a97      	ldr	r2, [pc, #604]	; (800623c <ADC1_Init+0x274>)
 8005fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fe6:	4b95      	ldr	r3, [pc, #596]	; (800623c <ADC1_Init+0x274>)
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fee:	607b      	str	r3, [r7, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_ADC_FORCE_RESET();
 8005ff2:	4b92      	ldr	r3, [pc, #584]	; (800623c <ADC1_Init+0x274>)
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	4a91      	ldr	r2, [pc, #580]	; (800623c <ADC1_Init+0x274>)
 8005ff8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
	__HAL_RCC_ADC_RELEASE_RESET();
 8005ffe:	4b8f      	ldr	r3, [pc, #572]	; (800623c <ADC1_Init+0x274>)
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	4a8e      	ldr	r2, [pc, #568]	; (800623c <ADC1_Init+0x274>)
 8006004:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006008:	62d3      	str	r3, [r2, #44]	; 0x2c
		
	__HAL_RCC_ADC_CONFIG(RCC_ADCCLKSOURCE_SYSCLK);
 800600a:	4b8c      	ldr	r3, [pc, #560]	; (800623c <ADC1_Init+0x274>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	4a8a      	ldr	r2, [pc, #552]	; (800623c <ADC1_Init+0x274>)
 8006012:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8006016:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	
	HAL_GPIO_DeInit(IO_PORT_SOLAR_VOLTAGE, IO_PIN_SOLAR_VOLTAGE);
 800601a:	2101      	movs	r1, #1
 800601c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006020:	f7fd fc64 	bl	80038ec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(IO_PORT_BATTERY_VOLTAGE, IO_PIN_BATTERY_VOLTAGE);
 8006024:	2102      	movs	r1, #2
 8006026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800602a:	f7fd fc5f 	bl	80038ec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(IO_PORT_USB_BUS, IO_PIN_USB_BUS);
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	4883      	ldr	r0, [pc, #524]	; (8006240 <ADC1_Init+0x278>)
 8006032:	f7fd fc5b 	bl	80038ec <HAL_GPIO_DeInit>
	
	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_ANALOG_ADC_CONTROL, IO_PIN_SOLAR_VOLTAGE , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8006036:	2300      	movs	r3, #0
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	2300      	movs	r3, #0
 800603c:	2201      	movs	r2, #1
 800603e:	210b      	movs	r1, #11
 8006040:	4880      	ldr	r0, [pc, #512]	; (8006244 <ADC1_Init+0x27c>)
 8006042:	f001 f949 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_SOLAR_VOLTAGE, &GPIO_InitStructure);
 8006046:	497f      	ldr	r1, [pc, #508]	; (8006244 <ADC1_Init+0x27c>)
 8006048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800604c:	f7fd fad0 	bl	80035f0 <HAL_GPIO_Init>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_ANALOG_ADC_CONTROL, IO_PIN_BATTERY_VOLTAGE , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8006050:	2300      	movs	r3, #0
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	2300      	movs	r3, #0
 8006056:	2202      	movs	r2, #2
 8006058:	210b      	movs	r1, #11
 800605a:	487a      	ldr	r0, [pc, #488]	; (8006244 <ADC1_Init+0x27c>)
 800605c:	f001 f93c 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_BATTERY_VOLTAGE, &GPIO_InitStructure);
 8006060:	4978      	ldr	r1, [pc, #480]	; (8006244 <ADC1_Init+0x27c>)
 8006062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006066:	f7fd fac3 	bl	80035f0 <HAL_GPIO_Init>
	
	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_ANALOG_ADC_CONTROL, IO_PIN_BATTERY_TEMP , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800606a:	2300      	movs	r3, #0
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	2300      	movs	r3, #0
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	210b      	movs	r1, #11
 8006074:	4873      	ldr	r0, [pc, #460]	; (8006244 <ADC1_Init+0x27c>)
 8006076:	f001 f92f 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PIN_BATTERY_TEMP, &GPIO_InitStructure);
 800607a:	4972      	ldr	r1, [pc, #456]	; (8006244 <ADC1_Init+0x27c>)
 800607c:	2040      	movs	r0, #64	; 0x40
 800607e:	f7fd fab7 	bl	80035f0 <HAL_GPIO_Init>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_INPUT, IO_PIN_USB_BUS , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8006082:	2300      	movs	r3, #0
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2300      	movs	r3, #0
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	2100      	movs	r1, #0
 800608c:	486d      	ldr	r0, [pc, #436]	; (8006244 <ADC1_Init+0x27c>)
 800608e:	f001 f923 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_USB_BUS, &GPIO_InitStructure);
 8006092:	496c      	ldr	r1, [pc, #432]	; (8006244 <ADC1_Init+0x27c>)
 8006094:	486a      	ldr	r0, [pc, #424]	; (8006240 <ADC1_Init+0x278>)
 8006096:	f7fd faab 	bl	80035f0 <HAL_GPIO_Init>

	I_dma1Cnl1.Instance = DMA1_Channel1;
 800609a:	4b6b      	ldr	r3, [pc, #428]	; (8006248 <ADC1_Init+0x280>)
 800609c:	4a6b      	ldr	r2, [pc, #428]	; (800624c <ADC1_Init+0x284>)
 800609e:	601a      	str	r2, [r3, #0]
	
	if(HAL_DMA_DeInit(&I_dma1Cnl1) != HAL_OK)
 80060a0:	4869      	ldr	r0, [pc, #420]	; (8006248 <ADC1_Init+0x280>)
 80060a2:	f7fc fdb1 	bl	8002c08 <HAL_DMA_DeInit>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <ADC1_Init+0xe8>
	{
		Error_Handler();
 80060ac:	f001 f947 	bl	800733e <Error_Handler>
	}
	
	I_dma1Cnl1.Init.Request 			    	= DMA_REQUEST_0;
 80060b0:	4b65      	ldr	r3, [pc, #404]	; (8006248 <ADC1_Init+0x280>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	605a      	str	r2, [r3, #4]
	I_dma1Cnl1.Init.Direction			   		= DMA_PERIPH_TO_MEMORY;
 80060b6:	4b64      	ldr	r3, [pc, #400]	; (8006248 <ADC1_Init+0x280>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	609a      	str	r2, [r3, #8]
	I_dma1Cnl1.Init.PeriphInc		   			= DMA_PINC_DISABLE;
 80060bc:	4b62      	ldr	r3, [pc, #392]	; (8006248 <ADC1_Init+0x280>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
	I_dma1Cnl1.Init.MemInc			   			= DMA_MINC_ENABLE;
 80060c2:	4b61      	ldr	r3, [pc, #388]	; (8006248 <ADC1_Init+0x280>)
 80060c4:	2280      	movs	r2, #128	; 0x80
 80060c6:	611a      	str	r2, [r3, #16]
	I_dma1Cnl1.Init.PeriphDataAlignment  		= DMA_PDATAALIGN_HALFWORD;
 80060c8:	4b5f      	ldr	r3, [pc, #380]	; (8006248 <ADC1_Init+0x280>)
 80060ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060ce:	615a      	str	r2, [r3, #20]
	I_dma1Cnl1.Init.MemDataAlignment	   		= DMA_MDATAALIGN_HALFWORD;
 80060d0:	4b5d      	ldr	r3, [pc, #372]	; (8006248 <ADC1_Init+0x280>)
 80060d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060d6:	619a      	str	r2, [r3, #24]
	I_dma1Cnl1.Init.Mode			   			= DMA_CIRCULAR;
 80060d8:	4b5b      	ldr	r3, [pc, #364]	; (8006248 <ADC1_Init+0x280>)
 80060da:	2220      	movs	r2, #32
 80060dc:	61da      	str	r2, [r3, #28]
	I_dma1Cnl1.Init.Priority					= DMA_PRIORITY_LOW;
 80060de:	4b5a      	ldr	r3, [pc, #360]	; (8006248 <ADC1_Init+0x280>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	621a      	str	r2, [r3, #32]
	
	if (HAL_DMA_Init(&I_dma1Cnl1) != HAL_OK)
 80060e4:	4858      	ldr	r0, [pc, #352]	; (8006248 <ADC1_Init+0x280>)
 80060e6:	f7fc fcd1 	bl	8002a8c <HAL_DMA_Init>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <ADC1_Init+0x12c>
	{
		Error_Handler();
 80060f0:	f001 f925 	bl	800733e <Error_Handler>
	}
			
	AdcHandle.Instance	= ADC1;
 80060f4:	4b56      	ldr	r3, [pc, #344]	; (8006250 <ADC1_Init+0x288>)
 80060f6:	4a57      	ldr	r2, [pc, #348]	; (8006254 <ADC1_Init+0x28c>)
 80060f8:	601a      	str	r2, [r3, #0]
	
	if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 80060fa:	4855      	ldr	r0, [pc, #340]	; (8006250 <ADC1_Init+0x288>)
 80060fc:	f7fb fb64 	bl	80017c8 <HAL_ADC_DeInit>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <ADC1_Init+0x142>
	{
		Error_Handler();
 8006106:	f001 f91a 	bl	800733e <Error_Handler>
	}
	
	// AdcHandle.Init.ClockPrescaler			= ADC_CLOCK_SYNC_PCLK_DIV4;		/* Synchronous clock mode, input ADC clock divided by 2*/

	AdcHandle.Init.ClockPrescaler			= ADC_CLOCK_SYNC_PCLK_DIV1;
 800610a:	4b51      	ldr	r3, [pc, #324]	; (8006250 <ADC1_Init+0x288>)
 800610c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006110:	605a      	str	r2, [r3, #4]
	
	AdcHandle.Init.Resolution				= ADC_RESOLUTION_12B;		  	/* 12-bit resolution for converted data */
 8006112:	4b4f      	ldr	r3, [pc, #316]	; (8006250 <ADC1_Init+0x288>)
 8006114:	2200      	movs	r2, #0
 8006116:	609a      	str	r2, [r3, #8]
	
	AdcHandle.Init.DataAlign				= ADC_DATAALIGN_RIGHT;		  	/* Right-alignment for converted data */
 8006118:	4b4d      	ldr	r3, [pc, #308]	; (8006250 <ADC1_Init+0x288>)
 800611a:	2200      	movs	r2, #0
 800611c:	60da      	str	r2, [r3, #12]
	
	AdcHandle.Init.ScanConvMode 			= ADC_SCAN_ENABLE; 			 	/* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 800611e:	4b4c      	ldr	r3, [pc, #304]	; (8006250 <ADC1_Init+0x288>)
 8006120:	2201      	movs	r2, #1
 8006122:	611a      	str	r2, [r3, #16]
	
	AdcHandle.Init.EOCSelection 			= ADC_EOC_SINGLE_CONV;		  	/* EOC flag picked-up to indicate conversion end */
 8006124:	4b4a      	ldr	r3, [pc, #296]	; (8006250 <ADC1_Init+0x288>)
 8006126:	2204      	movs	r2, #4
 8006128:	615a      	str	r2, [r3, #20]
	
	AdcHandle.Init.LowPowerAutoWait 		= DISABLE;					  	/* Auto-delayed conversion feature disabled */
 800612a:	4b49      	ldr	r3, [pc, #292]	; (8006250 <ADC1_Init+0x288>)
 800612c:	2200      	movs	r2, #0
 800612e:	619a      	str	r2, [r3, #24]
	
	AdcHandle.Init.ContinuousConvMode		= DISABLE;					  	/* Continuous mode enabled (automatic conversion restart after each conversion) */
 8006130:	4b47      	ldr	r3, [pc, #284]	; (8006250 <ADC1_Init+0x288>)
 8006132:	2200      	movs	r2, #0
 8006134:	61da      	str	r2, [r3, #28]
	
	AdcHandle.Init.NbrOfConversion		 	= 4;							/* Parameter discarded because sequencer is disabled */
 8006136:	4b46      	ldr	r3, [pc, #280]	; (8006250 <ADC1_Init+0x288>)
 8006138:	2204      	movs	r2, #4
 800613a:	621a      	str	r2, [r3, #32]
	
	AdcHandle.Init.DiscontinuousConvMode	= ENABLE;					  	/* Parameter discarded because sequencer is disabled */
 800613c:	4b44      	ldr	r3, [pc, #272]	; (8006250 <ADC1_Init+0x288>)
 800613e:	2201      	movs	r2, #1
 8006140:	625a      	str	r2, [r3, #36]	; 0x24
	
	AdcHandle.Init.NbrOfDiscConversion		= 4;							/* Parameter discarded because sequencer is disabled */
 8006142:	4b43      	ldr	r3, [pc, #268]	; (8006250 <ADC1_Init+0x288>)
 8006144:	2204      	movs	r2, #4
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
	
	AdcHandle.Init.ExternalTrigConv 		= ADC_SOFTWARE_START;			/* Software start to trig the 1st conversion manually, without external event */
 8006148:	4b41      	ldr	r3, [pc, #260]	; (8006250 <ADC1_Init+0x288>)
 800614a:	2201      	movs	r2, #1
 800614c:	62da      	str	r2, [r3, #44]	; 0x2c
	
	AdcHandle.Init.ExternalTrigConvEdge 	= ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because software trigger chosen */
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <ADC1_Init+0x288>)
 8006150:	2200      	movs	r2, #0
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
	
	AdcHandle.Init.DMAContinuousRequests	= DISABLE;					  	/* ADC DMA continuous request to match with DMA circular mode */
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <ADC1_Init+0x288>)
 8006156:	2200      	movs	r2, #0
 8006158:	635a      	str	r2, [r3, #52]	; 0x34
	
	AdcHandle.Init.Overrun					=  ADC_OVR_DATA_PRESERVED;	  	/* DR register is overwritten with the last conversion result in case of overrun */
 800615a:	4b3d      	ldr	r3, [pc, #244]	; (8006250 <ADC1_Init+0x288>)
 800615c:	2200      	movs	r2, #0
 800615e:	639a      	str	r2, [r3, #56]	; 0x38
	
	AdcHandle.Init.OversamplingMode 		= DISABLE;					  	/* No oversampling */
 8006160:	4b3b      	ldr	r3, [pc, #236]	; (8006250 <ADC1_Init+0x288>)
 8006162:	2200      	movs	r2, #0
 8006164:	63da      	str	r2, [r3, #60]	; 0x3c

	if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8006166:	483a      	ldr	r0, [pc, #232]	; (8006250 <ADC1_Init+0x288>)
 8006168:	f7fb f9ac 	bl	80014c4 <HAL_ADC_Init>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <ADC1_Init+0x1ae>
	{
		Error_Handler();
 8006172:	f001 f8e4 	bl	800733e <Error_Handler>
	}
	
	if (HAL_ADCEx_Calibration_Start(&AdcHandle, ADC_SINGLE_ENDED) !=  HAL_OK)
 8006176:	2100      	movs	r1, #0
 8006178:	4835      	ldr	r0, [pc, #212]	; (8006250 <ADC1_Init+0x288>)
 800617a:	f7fc faa1 	bl	80026c0 <HAL_ADCEx_Calibration_Start>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <ADC1_Init+0x1c0>
	{
		Error_Handler();
 8006184:	f001 f8db 	bl	800733e <Error_Handler>
	}

	sConfig.Rank			= ADC_REGULAR_RANK_1; 	 		/* Rank of sampled channel number ADCx_CHANNEL */
 8006188:	4b33      	ldr	r3, [pc, #204]	; (8006258 <ADC1_Init+0x290>)
 800618a:	2201      	movs	r2, #1
 800618c:	605a      	str	r2, [r3, #4]
	// sConfig.SamplingTime 	= ADC_SAMPLETIME_12CYCLES_5; 	/* Sampling time (number of clock cycles unit) */
	sConfig.SamplingTime 	= ADC_SAMPLETIME_92CYCLES_5;
 800618e:	4b32      	ldr	r3, [pc, #200]	; (8006258 <ADC1_Init+0x290>)
 8006190:	2205      	movs	r2, #5
 8006192:	609a      	str	r2, [r3, #8]
	sConfig.SingleDiff	  	= ADC_SINGLE_ENDED;				/* Single-ended input channel */
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <ADC1_Init+0x290>)
 8006196:	2200      	movs	r2, #0
 8006198:	60da      	str	r2, [r3, #12]
	sConfig.OffsetNumber 	= ADC_OFFSET_NONE; 				/* No offset subtraction */
 800619a:	4b2f      	ldr	r3, [pc, #188]	; (8006258 <ADC1_Init+0x290>)
 800619c:	2200      	movs	r2, #0
 800619e:	611a      	str	r2, [r3, #16]
	sConfig.Offset		  	= 0;							/* Parameter discarded because offset correction is disabled */
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <ADC1_Init+0x290>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	615a      	str	r2, [r3, #20]
	sConfig.Channel 	 	= ADC_CHANNEL_5;
 80061a6:	4b2c      	ldr	r3, [pc, #176]	; (8006258 <ADC1_Init+0x290>)
 80061a8:	2205      	movs	r2, #5
 80061aa:	601a      	str	r2, [r3, #0]
	
	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 80061ac:	492a      	ldr	r1, [pc, #168]	; (8006258 <ADC1_Init+0x290>)
 80061ae:	4828      	ldr	r0, [pc, #160]	; (8006250 <ADC1_Init+0x288>)
 80061b0:	f7fb fcd6 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <ADC1_Init+0x1f6>
	{
		Error_Handler();
 80061ba:	f001 f8c0 	bl	800733e <Error_Handler>
	}
	
	sConfig.Rank		= ADC_REGULAR_RANK_2;
 80061be:	4b26      	ldr	r3, [pc, #152]	; (8006258 <ADC1_Init+0x290>)
 80061c0:	2202      	movs	r2, #2
 80061c2:	605a      	str	r2, [r3, #4]
	sConfig.Channel 	= ADC_CHANNEL_6;
 80061c4:	4b24      	ldr	r3, [pc, #144]	; (8006258 <ADC1_Init+0x290>)
 80061c6:	2206      	movs	r2, #6
 80061c8:	601a      	str	r2, [r3, #0]
	
	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 80061ca:	4923      	ldr	r1, [pc, #140]	; (8006258 <ADC1_Init+0x290>)
 80061cc:	4820      	ldr	r0, [pc, #128]	; (8006250 <ADC1_Init+0x288>)
 80061ce:	f7fb fcc7 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <ADC1_Init+0x214>
	{
		Error_Handler();
 80061d8:	f001 f8b1 	bl	800733e <Error_Handler>
	}

	// ALON: 04-01-2023 external temperature instead of CPU temperature
	sConfig.Rank		  	= ADC_REGULAR_RANK_3;
 80061dc:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <ADC1_Init+0x290>)
 80061de:	2203      	movs	r2, #3
 80061e0:	605a      	str	r2, [r3, #4]
	//sConfig.Channel 	 	= ADC_CHANNEL_17;
	sConfig.Channel 	 	= ADC_CHANNEL_11;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <ADC1_Init+0x290>)
 80061e4:	220b      	movs	r2, #11
 80061e6:	601a      	str	r2, [r3, #0]
	
	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 80061e8:	491b      	ldr	r1, [pc, #108]	; (8006258 <ADC1_Init+0x290>)
 80061ea:	4819      	ldr	r0, [pc, #100]	; (8006250 <ADC1_Init+0x288>)
 80061ec:	f7fb fcb8 	bl	8001b60 <HAL_ADC_ConfigChannel>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <ADC1_Init+0x232>
	{
		Error_Handler();
 80061f6:	f001 f8a2 	bl	800733e <Error_Handler>
	}
	
	sConfig.Rank			= ADC_REGULAR_RANK_4;
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <ADC1_Init+0x290>)
 80061fc:	2204      	movs	r2, #4
 80061fe:	605a      	str	r2, [r3, #4]
	sConfig.Channel 	 	= ADC_CHANNEL_VREFINT;
 8006200:	4b15      	ldr	r3, [pc, #84]	; (8006258 <ADC1_Init+0x290>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	
	if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8006206:	4914      	ldr	r1, [pc, #80]	; (8006258 <ADC1_Init+0x290>)
 8006208:	4811      	ldr	r0, [pc, #68]	; (8006250 <ADC1_Init+0x288>)
 800620a:	f7fb fca9 	bl	8001b60 <HAL_ADC_ConfigChannel>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <ADC1_Init+0x250>
	{
		Error_Handler();
 8006214:	f001 f893 	bl	800733e <Error_Handler>
	}
	
	//Associate the DMA handle//
	AdcHandle.DMA_Handle = &I_dma1Cnl1;
 8006218:	4b0d      	ldr	r3, [pc, #52]	; (8006250 <ADC1_Init+0x288>)
 800621a:	4a0b      	ldr	r2, [pc, #44]	; (8006248 <ADC1_Init+0x280>)
 800621c:	651a      	str	r2, [r3, #80]	; 0x50
	I_dma1Cnl1.Parent = &AdcHandle;
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <ADC1_Init+0x280>)
 8006220:	4a0b      	ldr	r2, [pc, #44]	; (8006250 <ADC1_Init+0x288>)
 8006222:	629a      	str	r2, [r3, #40]	; 0x28
	
	/* NVIC configuration for DMA Input data interrupt */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	210f      	movs	r1, #15
 8006228:	200b      	movs	r0, #11
 800622a:	f7fc fbbc 	bl	80029a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800622e:	200b      	movs	r0, #11
 8006230:	f7fc fbd5 	bl	80029de <HAL_NVIC_EnableIRQ>
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	40021000 	.word	0x40021000
 8006240:	48000400 	.word	0x48000400
 8006244:	20000198 	.word	0x20000198
 8006248:	20000128 	.word	0x20000128
 800624c:	40020008 	.word	0x40020008
 8006250:	200000a8 	.word	0x200000a8
 8006254:	50040000 	.word	0x50040000
 8006258:	20000110 	.word	0x20000110

0800625c <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler(void)
{	
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&I_dma1Cnl1);
 8006260:	4802      	ldr	r0, [pc, #8]	; (800626c <DMA1_Channel1_IRQHandler+0x10>)
 8006262:	f7fc fdb1 	bl	8002dc8 <HAL_DMA_IRQHandler>

	// measurement received
}
 8006266:	bf00      	nop
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000128 	.word	0x20000128

08006270 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
	static unsigned count = 0;
	if (hadc->Instance == ADC1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <HAL_ADC_ConvCpltCallback+0x54>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d11b      	bne.n	80062ba <HAL_ADC_ConvCpltCallback+0x4a>
	{
		count++;
 8006282:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <HAL_ADC_ConvCpltCallback+0x58>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	4a0f      	ldr	r2, [pc, #60]	; (80062c8 <HAL_ADC_ConvCpltCallback+0x58>)
 800628a:	6013      	str	r3, [r2, #0]

		measurements.solar = (int)ADC1CnvDat[0];
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <HAL_ADC_ConvCpltCallback+0x5c>)
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_ADC_ConvCpltCallback+0x60>)
 8006294:	601a      	str	r2, [r3, #0]
		measurements.vBatt = (int)ADC1CnvDat[1];
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <HAL_ADC_ConvCpltCallback+0x5c>)
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	461a      	mov	r2, r3
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_ADC_ConvCpltCallback+0x60>)
 800629e:	605a      	str	r2, [r3, #4]
		measurements.temperature = (int)ADC1CnvDat[2];
 80062a0:	4b0a      	ldr	r3, [pc, #40]	; (80062cc <HAL_ADC_ConvCpltCallback+0x5c>)
 80062a2:	889b      	ldrh	r3, [r3, #4]
 80062a4:	461a      	mov	r2, r3
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_ADC_ConvCpltCallback+0x60>)
 80062a8:	611a      	str	r2, [r3, #16]
		measurements.vRefernce = (int)ADC1CnvDat[3];
 80062aa:	4b08      	ldr	r3, [pc, #32]	; (80062cc <HAL_ADC_ConvCpltCallback+0x5c>)
 80062ac:	88db      	ldrh	r3, [r3, #6]
 80062ae:	461a      	mov	r2, r3
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <HAL_ADC_ConvCpltCallback+0x60>)
 80062b2:	60da      	str	r2, [r3, #12]

		adc_Sample_completed = 1;
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_ADC_ConvCpltCallback+0x64>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
	}
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	50040000 	.word	0x50040000
 80062c8:	200001b0 	.word	0x200001b0
 80062cc:	20000188 	.word	0x20000188
 80062d0:	20000170 	.word	0x20000170
 80062d4:	200001ac 	.word	0x200001ac

080062d8 <Going_To_APP>:
	}
}
*/

void Going_To_APP(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
	u32 inx = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]

	WD_Refresh();
 80062e2:	f002 fd1b 	bl	8008d1c <WD_Refresh>
	ledFinished = 1;
 80062e6:	4b28      	ldr	r3, [pc, #160]	; (8006388 <Going_To_APP+0xb0>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	701a      	strb	r2, [r3, #0]
	Led_GPIO_Init();
 80062ec:	f000 ff60 	bl	80071b0 <Led_GPIO_Init>

	TMR2_Sleep(2000*10);
 80062f0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80062f4:	f001 fd6f 	bl	8007dd6 <TMR2_Sleep>

	if (success_code==1)
 80062f8:	4b24      	ldr	r3, [pc, #144]	; (800638c <Going_To_APP+0xb4>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d103      	bne.n	8006308 <Going_To_APP+0x30>
		BlinkLed(0);	// error - red blink
 8006300:	2000      	movs	r0, #0
 8006302:	f000 ffb9 	bl	8007278 <BlinkLed>
 8006306:	e006      	b.n	8006316 <Going_To_APP+0x3e>
	else if (success_code==2)
 8006308:	4b20      	ldr	r3, [pc, #128]	; (800638c <Going_To_APP+0xb4>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d102      	bne.n	8006316 <Going_To_APP+0x3e>
		BlinkLed(1);	// success - green blink
 8006310:	2001      	movs	r0, #1
 8006312:	f000 ffb1 	bl	8007278 <BlinkLed>

	TMR2_Sleep(1000*10);
 8006316:	f242 7010 	movw	r0, #10000	; 0x2710
 800631a:	f001 fd5c 	bl	8007dd6 <TMR2_Sleep>
	AllLights();
 800631e:	f002 fc5b 	bl	8008bd8 <AllLights>
	TMR2_Sleep(2000*10);
 8006322:	f644 6020 	movw	r0, #20000	; 0x4e20
 8006326:	f001 fd56 	bl	8007dd6 <TMR2_Sleep>
	Led_GPIO_Init();
 800632a:	f000 ff41 	bl	80071b0 <Led_GPIO_Init>

	HAL_FLASH_Lock();
 800632e:	f7fc fea3 	bl	8003078 <HAL_FLASH_Lock>

	Disable_Interrupts();
 8006332:	f001 f811 	bl	8007358 <Disable_Interrupts>

	// DeInit_Peripherals();
	
	HAL_NVIC_DisableIRQ(SysTick_IRQn);
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	f7fc fb5e 	bl	80029fa <HAL_NVIC_DisableIRQ>
	SysTick->LOAD  = (u32)(0UL);						  				/* set reload register */
 800633e:	4b14      	ldr	r3, [pc, #80]	; (8006390 <Going_To_APP+0xb8>)
 8006340:	2200      	movs	r2, #0
 8006342:	605a      	str	r2, [r3, #4]
	SysTick->VAL   = 0UL;											  	/* Load the SysTick Counter Value */
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <Going_To_APP+0xb8>)
 8006346:	2200      	movs	r2, #0
 8006348:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 0;	
 800634a:	4b11      	ldr	r3, [pc, #68]	; (8006390 <Going_To_APP+0xb8>)
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
	
	Disable_Per_Clocks();
 8006350:	f001 f80a 	bl	8007368 <Disable_Per_Clocks>

	JumpAddress = (uint32_t) *((__IO uint32_t*)INNFLS_STR_APP_ADD);
 8006354:	4b0f      	ldr	r3, [pc, #60]	; (8006394 <Going_To_APP+0xbc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a0f      	ldr	r2, [pc, #60]	; (8006398 <Going_To_APP+0xc0>)
 800635a:	6013      	str	r3, [r2, #0]

	/*Get the application entry point (Second entry in the application vector table)*/

	Jump_To_Application = (pFunction) *(__IO uint32_t*) (INNFLS_STR_APP_ADD + 4);
 800635c:	4b0f      	ldr	r3, [pc, #60]	; (800639c <Going_To_APP+0xc4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	4b0f      	ldr	r3, [pc, #60]	; (80063a0 <Going_To_APP+0xc8>)
 8006364:	601a      	str	r2, [r3, #0]

	/* Reconfigure vector table offset register to match the application location */

	SCB->VTOR = INNFLS_STR_APP_ADD;
 8006366:	4b0f      	ldr	r3, [pc, #60]	; (80063a4 <Going_To_APP+0xcc>)
 8006368:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <Going_To_APP+0xbc>)
 800636a:	609a      	str	r2, [r3, #8]

	/*Set the application stack pointer */

	__set_MSP(JumpAddress);
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <Going_To_APP+0xc0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	f383 8808 	msr	MSP, r3
}
 8006378:	bf00      	nop

	/*Start the application */

	Jump_To_Application();
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <Going_To_APP+0xc8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4798      	blx	r3
}
 8006380:	bf00      	nop
 8006382:	3708      	adds	r7, #8
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	2000070a 	.word	0x2000070a
 800638c:	20000c81 	.word	0x20000c81
 8006390:	e000e010 	.word	0xe000e010
 8006394:	0800a000 	.word	0x0800a000
 8006398:	200001b8 	.word	0x200001b8
 800639c:	0800a004 	.word	0x0800a004
 80063a0:	200001b4 	.word	0x200001b4
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <DevParms_Program_Flash>:
#include "IO_Mapping.h"

sDevice_Params  I_DevicePrm;

ErrorStatus DevParms_Program_Flash(u8 * flsWrtBf, u16 flsWrtBfLn, u32 flsAddr)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08a      	sub	sp, #40	; 0x28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	817b      	strh	r3, [r7, #10]
    static u8 wrPrgBff[320];
	static u8 rdPrgBff[320];
	
	u8 sttCmd = FLS_RD_STTREG1_INST;
 80063b6:	2305      	movs	r3, #5
 80063b8:	77fb      	strb	r3, [r7, #31]
	u8 wrtEnbl = FLS_WRT_ENABLE_INST;
 80063ba:	2306      	movs	r3, #6
 80063bc:	77bb      	strb	r3, [r7, #30]
	u8 wrtDsbl = FLS_WRT_DISABLE_INST;
 80063be:	2304      	movs	r3, #4
 80063c0:	777b      	strb	r3, [r7, #29]
	
	u8 wrBuff[4] = {'\0'};
 80063c2:	2300      	movs	r3, #0
 80063c4:	61bb      	str	r3, [r7, #24]
	
	u16 inxI = 0, inxJ = 0, inxZ = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80063ca:	2300      	movs	r3, #0
 80063cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80063ce:	2300      	movs	r3, #0
 80063d0:	847b      	strh	r3, [r7, #34]	; 0x22

	u8 sttRg1Val = 0, writeEnBit = 0x00, busyBit = 0x00;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 3020 	strb.w	r3, [r7, #32]
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	
	wrPrgBff[0] = FLS_PRG_PAGE_INST;
 80063e2:	4b6c      	ldr	r3, [pc, #432]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 80063e4:	2202      	movs	r2, #2
 80063e6:	701a      	strb	r2, [r3, #0]
	wrPrgBff[1] = (u8)((flsAddr & 0x00FF0000) >> 16);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	0c1b      	lsrs	r3, r3, #16
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4b69      	ldr	r3, [pc, #420]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 80063f0:	705a      	strb	r2, [r3, #1]
	wrPrgBff[2] = (u8)((flsAddr & 0x0000FF00) >> 8);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	0a1b      	lsrs	r3, r3, #8
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	4b66      	ldr	r3, [pc, #408]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 80063fa:	709a      	strb	r2, [r3, #2]
	wrPrgBff[3] = (u8)((flsAddr & 0x000000FF));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b64      	ldr	r3, [pc, #400]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 8006402:	70da      	strb	r2, [r3, #3]

	memcpy(&wrPrgBff[4] , flsWrtBf, flsWrtBfLn);
 8006404:	897b      	ldrh	r3, [r7, #10]
 8006406:	461a      	mov	r2, r3
 8006408:	68f9      	ldr	r1, [r7, #12]
 800640a:	4863      	ldr	r0, [pc, #396]	; (8006598 <DevParms_Program_Flash+0x1f0>)
 800640c:	f002 fe6c 	bl	80090e8 <memcpy>

	wrBuff[0] = FLS_RD_DATA_INST;
 8006410:	2303      	movs	r3, #3
 8006412:	763b      	strb	r3, [r7, #24]
	wrBuff[1] = (u8)((flsAddr & 0x00FF0000) >> 16);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	b2db      	uxtb	r3, r3
 800641a:	767b      	strb	r3, [r7, #25]
	wrBuff[2] = (u8)((flsAddr & 0x0000FF00) >> 8);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b2db      	uxtb	r3, r3
 8006422:	76bb      	strb	r3, [r7, #26]
	wrBuff[3] = (u8)((flsAddr & 0x000000FF));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	76fb      	strb	r3, [r7, #27]

	if(Flash_Write_Data(&wrtEnbl, 1) == SUCCESS)
 800642a:	f107 031e 	add.w	r3, r7, #30
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fb45 	bl	8006ac0 <Flash_Write_Data>
 8006436:	4603      	mov	r3, r0
 8006438:	2b01      	cmp	r3, #1
 800643a:	f040 80a7 	bne.w	800658c <DevParms_Program_Flash+0x1e4>
	{
		if(Flash_Read_Data(&sttCmd, 1, &sttRg1Val , 1) == SUCCESS)
 800643e:	f107 0217 	add.w	r2, r7, #23
 8006442:	f107 001f 	add.w	r0, r7, #31
 8006446:	2301      	movs	r3, #1
 8006448:	2101      	movs	r1, #1
 800644a:	f000 fb77 	bl	8006b3c <Flash_Read_Data>
 800644e:	4603      	mov	r3, r0
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 809b 	bne.w	800658c <DevParms_Program_Flash+0x1e4>
		{
			writeEnBit = ((sttRg1Val & 0x02) >> 1);
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	105b      	asrs	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0301 	and.w	r3, r3, #1
 8006460:	f887 3020 	strb.w	r3, [r7, #32]
	
			busyBit = (sttRg1Val & 0x01);
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	
			if((writeEnBit == 0x01) && (busyBit == 0x00))
 800646e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006472:	2b01      	cmp	r3, #1
 8006474:	f040 808a 	bne.w	800658c <DevParms_Program_Flash+0x1e4>
 8006478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 8085 	bne.w	800658c <DevParms_Program_Flash+0x1e4>
			{
				if(Flash_Write_Data(wrPrgBff, (4 + flsWrtBfLn)) == SUCCESS)
 8006482:	897b      	ldrh	r3, [r7, #10]
 8006484:	3304      	adds	r3, #4
 8006486:	b29b      	uxth	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	4842      	ldr	r0, [pc, #264]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 800648c:	f000 fb18 	bl	8006ac0 <Flash_Write_Data>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d17a      	bne.n	800658c <DevParms_Program_Flash+0x1e4>
				{
					if(Flash_Read_Data(&sttCmd, 1, &sttRg1Val , 1) == SUCCESS)
 8006496:	f107 0217 	add.w	r2, r7, #23
 800649a:	f107 001f 	add.w	r0, r7, #31
 800649e:	2301      	movs	r3, #1
 80064a0:	2101      	movs	r1, #1
 80064a2:	f000 fb4b 	bl	8006b3c <Flash_Read_Data>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d16f      	bne.n	800658c <DevParms_Program_Flash+0x1e4>
					{
						busyBit = (sttRg1Val & 0x01);
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						
						for(inxJ=0; inxJ < 20; inxJ++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064ba:	e035      	b.n	8006528 <DevParms_Program_Flash+0x180>
						{
							for(inxZ=0;inxZ<1500;inxZ++);//Delay of 500 micro//
 80064bc:	2300      	movs	r3, #0
 80064be:	847b      	strh	r3, [r7, #34]	; 0x22
 80064c0:	e002      	b.n	80064c8 <DevParms_Program_Flash+0x120>
 80064c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064c4:	3301      	adds	r3, #1
 80064c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80064c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ca:	f240 52db 	movw	r2, #1499	; 0x5db
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d9f7      	bls.n	80064c2 <DevParms_Program_Flash+0x11a>
							
							if(busyBit == 1)
 80064d2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d12a      	bne.n	8006530 <DevParms_Program_Flash+0x188>
							{
								if(inxJ >= 19)
 80064da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064dc:	2b12      	cmp	r3, #18
 80064de:	d907      	bls.n	80064f0 <DevParms_Program_Flash+0x148>
								{
									Flash_Write_Data(&wrtDsbl,1);
 80064e0:	f107 031d 	add.w	r3, r7, #29
 80064e4:	2101      	movs	r1, #1
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 faea 	bl	8006ac0 <Flash_Write_Data>
									
									return ERROR;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e04d      	b.n	800658c <DevParms_Program_Flash+0x1e4>
							{
								break;
							}

							
							if(Flash_Read_Data(&sttCmd, 1, &sttRg1Val , 1) == SUCCESS)
 80064f0:	f107 0217 	add.w	r2, r7, #23
 80064f4:	f107 001f 	add.w	r0, r7, #31
 80064f8:	2301      	movs	r3, #1
 80064fa:	2101      	movs	r1, #1
 80064fc:	f000 fb1e 	bl	8006b3c <Flash_Read_Data>
 8006500:	4603      	mov	r3, r0
 8006502:	2b01      	cmp	r3, #1
 8006504:	d105      	bne.n	8006512 <DevParms_Program_Flash+0x16a>
							{
								busyBit = (sttRg1Val & 0x01);
 8006506:	7dfb      	ldrb	r3, [r7, #23]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006510:	e007      	b.n	8006522 <DevParms_Program_Flash+0x17a>
							}
							else
							{
								Flash_Write_Data(&wrtDsbl,1);
 8006512:	f107 031d 	add.w	r3, r7, #29
 8006516:	2101      	movs	r1, #1
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fad1 	bl	8006ac0 <Flash_Write_Data>
						
								return ERROR;
 800651e:	2300      	movs	r3, #0
 8006520:	e034      	b.n	800658c <DevParms_Program_Flash+0x1e4>
						for(inxJ=0; inxJ < 20; inxJ++)
 8006522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006524:	3301      	adds	r3, #1
 8006526:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800652a:	2b13      	cmp	r3, #19
 800652c:	d9c6      	bls.n	80064bc <DevParms_Program_Flash+0x114>
 800652e:	e000      	b.n	8006532 <DevParms_Program_Flash+0x18a>
								break;
 8006530:	bf00      	nop
							}

						}

						if(Flash_Read_Data(wrBuff,4, rdPrgBff, flsWrtBfLn) == SUCCESS)
 8006532:	897b      	ldrh	r3, [r7, #10]
 8006534:	f107 0018 	add.w	r0, r7, #24
 8006538:	4a18      	ldr	r2, [pc, #96]	; (800659c <DevParms_Program_Flash+0x1f4>)
 800653a:	2104      	movs	r1, #4
 800653c:	f000 fafe 	bl	8006b3c <Flash_Read_Data>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d122      	bne.n	800658c <DevParms_Program_Flash+0x1e4>
						{
							for(inxI = 0; inxI < flsWrtBfLn; inxI++)
 8006546:	2300      	movs	r3, #0
 8006548:	84fb      	strh	r3, [r7, #38]	; 0x26
 800654a:	e013      	b.n	8006574 <DevParms_Program_Flash+0x1cc>
							{
								if(rdPrgBff[inxI]  !=  wrPrgBff[(inxI + 4)])
 800654c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800654e:	4a13      	ldr	r2, [pc, #76]	; (800659c <DevParms_Program_Flash+0x1f4>)
 8006550:	5cd2      	ldrb	r2, [r2, r3]
 8006552:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006554:	3304      	adds	r3, #4
 8006556:	490f      	ldr	r1, [pc, #60]	; (8006594 <DevParms_Program_Flash+0x1ec>)
 8006558:	5ccb      	ldrb	r3, [r1, r3]
 800655a:	429a      	cmp	r2, r3
 800655c:	d007      	beq.n	800656e <DevParms_Program_Flash+0x1c6>
								{
									Flash_Write_Data(&wrtDsbl,1);
 800655e:	f107 031d 	add.w	r3, r7, #29
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 faab 	bl	8006ac0 <Flash_Write_Data>
									
									return ERROR;
 800656a:	2300      	movs	r3, #0
 800656c:	e00e      	b.n	800658c <DevParms_Program_Flash+0x1e4>
							for(inxI = 0; inxI < flsWrtBfLn; inxI++)
 800656e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006570:	3301      	adds	r3, #1
 8006572:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006574:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	429a      	cmp	r2, r3
 800657a:	d3e7      	bcc.n	800654c <DevParms_Program_Flash+0x1a4>
								}
							}
							
							Flash_Write_Data(&wrtDsbl,1);
 800657c:	f107 031d 	add.w	r3, r7, #29
 8006580:	2101      	movs	r1, #1
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fa9c 	bl	8006ac0 <Flash_Write_Data>
							
							return SUCCESS;
 8006588:	2301      	movs	r3, #1
 800658a:	e7ff      	b.n	800658c <DevParms_Program_Flash+0x1e4>
					}
				}
			}
		}
	}
} 
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	; 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20000308 	.word	0x20000308
 8006598:	2000030c 	.word	0x2000030c
 800659c:	20000448 	.word	0x20000448

080065a0 <DevParms_Read_Flash>:
 
ErrorStatus DevParms_Read_Flash(sDevice_Params *P_HbDvcPrms, u32 dpFlsAddr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  	u32	crcCalcFls = 0;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]

  	u8 wrBuff[4] = {0};
 80065ae:	2300      	movs	r3, #0
 80065b0:	60fb      	str	r3, [r7, #12]

  	wrBuff[0] = FLS_RD_DATA_INST;
 80065b2:	2303      	movs	r3, #3
 80065b4:	733b      	strb	r3, [r7, #12]
  	wrBuff[1] = (u8)((dpFlsAddr & 0x00FF0000) >> 16);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	737b      	strb	r3, [r7, #13]
  	wrBuff[2] = (u8)((dpFlsAddr & 0x0000FF00) >> 8);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	0a1b      	lsrs	r3, r3, #8
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	73bb      	strb	r3, [r7, #14]
  	wrBuff[3] = (u8)((dpFlsAddr & 0x000000FF));
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	73fb      	strb	r3, [r7, #15]

  	u32 data_size = sizeof(sDevice_Params);
 80065cc:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 80065d0:	613b      	str	r3, [r7, #16]

  	memset(P_HbDvcPrms, 0, data_size);
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	2100      	movs	r1, #0
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f002 fd94 	bl	8009104 <memset>

  	if (Flash_Read_Data(wrBuff, 4, (u8*)P_HbDvcPrms , data_size ))
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f107 000c 	add.w	r0, r7, #12
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	2104      	movs	r1, #4
 80065e8:	f000 faa8 	bl	8006b3c <Flash_Read_Data>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d012      	beq.n	8006618 <DevParms_Read_Flash+0x78>
  	{
  		crcCalcFls = CRC_Calc_Flash_Data((u8*)P_HbDvcPrms, Get_Param_Size_Without_CRC() );
 80065f2:	f000 f971 	bl	80068d8 <Get_Param_Size_Without_CRC>
 80065f6:	4603      	mov	r3, r0
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f810 	bl	8006622 <CRC_Calc_Flash_Data>
 8006602:	6178      	str	r0, [r7, #20]

  		if (P_HbDvcPrms->dpCrc == crcCalcFls)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d101      	bne.n	8006614 <DevParms_Read_Flash+0x74>
  		{
  			return SUCCESS;
 8006610:	2301      	movs	r3, #1
 8006612:	e002      	b.n	800661a <DevParms_Read_Flash+0x7a>
  		}
  		else
  		{
  			return ERROR;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <DevParms_Read_Flash+0x7a>
  		}

  	}
  	else
  	{
  		return ERROR;
 8006618:	2300      	movs	r3, #0
  	}

  	return ERROR;
  }
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <CRC_Calc_Flash_Data>:

  
  u32 CRC_Calc_Flash_Data(u8* pRdFlsbf, u16 dataBtSz)
  {
 8006622:	b480      	push	{r7}
 8006624:	b085      	sub	sp, #20
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	807b      	strh	r3, [r7, #2]
	  u16 inx = 0;
 800662e:	2300      	movs	r3, #0
 8006630:	81fb      	strh	r3, [r7, #14]
	  
	  u32 sum = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
	  
	  for(inx = 0; inx < dataBtSz ;inx++)
 8006636:	2300      	movs	r3, #0
 8006638:	81fb      	strh	r3, [r7, #14]
 800663a:	e00a      	b.n	8006652 <CRC_Calc_Flash_Data+0x30>
	  {
		  sum += (u32)pRdFlsbf[inx];
 800663c:	89fb      	ldrh	r3, [r7, #14]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4413      	add	r3, r2
 800664a:	60bb      	str	r3, [r7, #8]
	  for(inx = 0; inx < dataBtSz ;inx++)
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	3301      	adds	r3, #1
 8006650:	81fb      	strh	r3, [r7, #14]
 8006652:	89fa      	ldrh	r2, [r7, #14]
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	429a      	cmp	r2, r3
 8006658:	d3f0      	bcc.n	800663c <CRC_Calc_Flash_Data+0x1a>
	  }
  
	  return sum;
 800665a:	68bb      	ldr	r3, [r7, #8]
  }
 800665c:	4618      	mov	r0, r3
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	bc80      	pop	{r7}
 8006664:	4770      	bx	lr

08006666 <DevParms_Burn_Flash>:
  


ErrorStatus DevParms_Burn_Flash(sDevice_Params* P_DevicePrms)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b086      	sub	sp, #24
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
	u8* write_buffer;
	write_buffer = (u8*)P_DevicePrms;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	617b      	str	r3, [r7, #20]
	u32 address = 0;
 8006672:	2300      	movs	r3, #0
 8006674:	613b      	str	r3, [r7, #16]

	u32 data_size = sizeof(sDevice_Params);
 8006676:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800667a:	60fb      	str	r3, [r7, #12]
	P_DevicePrms->dpCrc = CRC_Calc_Flash_Data((u8*)P_DevicePrms, Get_Param_Size_Without_CRC() );
 800667c:	f000 f92c 	bl	80068d8 <Get_Param_Size_Without_CRC>
 8006680:	4603      	mov	r3, r0
 8006682:	b29b      	uxth	r3, r3
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ffcb 	bl	8006622 <CRC_Calc_Flash_Data>
 800668c:	4602      	mov	r2, r0
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

	if (Flash_Erase_Sector(((u32)(address))))
 8006694:	6938      	ldr	r0, [r7, #16]
 8006696:	f000 f995 	bl	80069c4 <Flash_Erase_Sector>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01c      	beq.n	80066da <DevParms_Burn_Flash+0x74>
	{
		if (DevParms_Program_Flash(write_buffer, 256 ,((u32)(address))))
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066a6:	6978      	ldr	r0, [r7, #20]
 80066a8:	f7ff fe7e 	bl	80063a8 <DevParms_Program_Flash>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d013      	beq.n	80066da <DevParms_Burn_Flash+0x74>
		{
			data_size -= 256;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80066b8:	60fb      	str	r3, [r7, #12]
			if (DevParms_Program_Flash(&(write_buffer[256]), (data_size) ,((u32)(address+0x100))))
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	b299      	uxth	r1, r3
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80066ca:	461a      	mov	r2, r3
 80066cc:	f7ff fe6c 	bl	80063a8 <DevParms_Program_Flash>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <DevParms_Burn_Flash+0x74>
			{
				return SUCCESS;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <DevParms_Burn_Flash+0x76>
			}
		}
	}

	return ERROR;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <Flash_Calc_Version_CRC16>:
 

  
  ErrorStatus Flash_Calc_Version_CRC16(u32 verByteLn, u32 extFlsAdd,u8 * dataBuff, u16 * pCrc16)
  {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
	  u8 wrBuff[4] = {0};
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  
	  u16 crc16Lcl = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	82fb      	strh	r3, [r7, #22]
		  
	  wrBuff[0] = FLS_RD_DATA_INST;
 80066fa:	2303      	movs	r3, #3
 80066fc:	743b      	strb	r3, [r7, #16]
		  
	  wrBuff[1] = (u8)((extFlsAdd & 0x00FF0000) >> 16);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	b2db      	uxtb	r3, r3
 8006704:	747b      	strb	r3, [r7, #17]
		  
	  wrBuff[2] = (u8)((extFlsAdd & 0x0000FF00) >> 8);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	0a1b      	lsrs	r3, r3, #8
 800670a:	b2db      	uxtb	r3, r3
 800670c:	74bb      	strb	r3, [r7, #18]
		  
	  wrBuff[3] = (u8)((extFlsAdd & 0x000000FF));
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	b2db      	uxtb	r3, r3
 8006712:	74fb      	strb	r3, [r7, #19]
  
	  while(verByteLn >= 1024)
 8006714:	e02d      	b.n	8006772 <Flash_Calc_Version_CRC16+0x8e>
	  {
		  if(Flash_Read_Data(wrBuff, 4, dataBuff , 1024))
 8006716:	f107 0010 	add.w	r0, r7, #16
 800671a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	2104      	movs	r1, #4
 8006722:	f000 fa0b 	bl	8006b3c <Flash_Read_Data>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d020      	beq.n	800676e <Flash_Calc_Version_CRC16+0x8a>
		  {
			  crc16Lcl = CRC16_Clc(dataBuff, 1024 , (*pCrc16));
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 faae 	bl	8006c98 <CRC16_Clc>
 800673c:	4603      	mov	r3, r0
 800673e:	82fb      	strh	r3, [r7, #22]
  
			  *pCrc16 = crc16Lcl;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	8afa      	ldrh	r2, [r7, #22]
 8006744:	801a      	strh	r2, [r3, #0]
			  
			  extFlsAdd += 1024;
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674c:	60bb      	str	r3, [r7, #8]
  
			  verByteLn -= 1024;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006754:	60fb      	str	r3, [r7, #12]
  
			  wrBuff[1] = (u8)((extFlsAdd & 0x00FF0000) >> 16);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	0c1b      	lsrs	r3, r3, #16
 800675a:	b2db      	uxtb	r3, r3
 800675c:	747b      	strb	r3, [r7, #17]
				  
			  wrBuff[2] = (u8)((extFlsAdd & 0x0000FF00) >> 8);
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	0a1b      	lsrs	r3, r3, #8
 8006762:	b2db      	uxtb	r3, r3
 8006764:	74bb      	strb	r3, [r7, #18]
				  
			  wrBuff[3] = (u8)((extFlsAdd & 0x000000FF));
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	74fb      	strb	r3, [r7, #19]
 800676c:	e001      	b.n	8006772 <Flash_Calc_Version_CRC16+0x8e>
		  }
		  else
		  {
			  return ERROR;
 800676e:	2300      	movs	r3, #0
 8006770:	e022      	b.n	80067b8 <Flash_Calc_Version_CRC16+0xd4>
	  while(verByteLn >= 1024)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006778:	d2cd      	bcs.n	8006716 <Flash_Calc_Version_CRC16+0x32>
		  }
	  }
  
	  if(verByteLn)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01a      	beq.n	80067b6 <Flash_Calc_Version_CRC16+0xd2>
	  {
		  if(Flash_Read_Data(wrBuff, 4, dataBuff , verByteLn))
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f107 0010 	add.w	r0, r7, #16
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	2104      	movs	r1, #4
 800678c:	f000 f9d6 	bl	8006b3c <Flash_Read_Data>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <Flash_Calc_Version_CRC16+0xce>
		  {
			  crc16Lcl	= CRC16_Clc(dataBuff, verByteLn , (*pCrc16));
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	b299      	uxth	r1, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa79 	bl	8006c98 <CRC16_Clc>
 80067a6:	4603      	mov	r3, r0
 80067a8:	82fb      	strh	r3, [r7, #22]
  
			  *pCrc16 = crc16Lcl;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	8afa      	ldrh	r2, [r7, #22]
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e001      	b.n	80067b6 <Flash_Calc_Version_CRC16+0xd2>
		  }
		  else
		  {
			  return ERROR;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <Flash_Calc_Version_CRC16+0xd4>
		  }
	  }
	  
	  return SUCCESS;
 80067b6:	2301      	movs	r3, #1
  }
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <DevParms_Set_Default>:

 

 // This function and app function should be identical
  void DevParms_Set_Default(sDevice_Params * P_DevicePrms)
  {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  	u16 param_size = sizeof(sDevice_Params);
 80067c8:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 80067cc:	81fb      	strh	r3, [r7, #14]

  	memset(P_DevicePrms, 0, param_size);
 80067ce:	89fb      	ldrh	r3, [r7, #14]
 80067d0:	461a      	mov	r2, r3
 80067d2:	2100      	movs	r1, #0
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f002 fc95 	bl	8009104 <memset>

  	memcpy(P_DevicePrms->dpSrvIp,"www.cloud-wise.net",18);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2212      	movs	r2, #18
 80067de:	493b      	ldr	r1, [pc, #236]	; (80068cc <DevParms_Set_Default+0x10c>)
 80067e0:	4618      	mov	r0, r3
 80067e2:	f002 fc81 	bl	80090e8 <memcpy>
  	//memcpy(P_DevicePrms->ssIdName4,"arkessa.com", 11);
  	memcpy(P_DevicePrms->ssIdName4,"data.mono", 9);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3380      	adds	r3, #128	; 0x80
 80067ea:	2209      	movs	r2, #9
 80067ec:	4938      	ldr	r1, [pc, #224]	; (80068d0 <DevParms_Set_Default+0x110>)
 80067ee:	4618      	mov	r0, r3
 80067f0:	f002 fc7a 	bl	80090e8 <memcpy>
  	//memcpy(P_DevicePrms->ssIdName1,"arkessa", 7);
  	memcpy(P_DevicePrms->ssIdName1,"", 7);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3320      	adds	r3, #32
 80067f8:	2207      	movs	r2, #7
 80067fa:	4936      	ldr	r1, [pc, #216]	; (80068d4 <DevParms_Set_Default+0x114>)
 80067fc:	4618      	mov	r0, r3
 80067fe:	f002 fc73 	bl	80090e8 <memcpy>
  	//memcpy(P_DevicePrms->ssIdPswrd1,"arkessa", 7);
  	memcpy(P_DevicePrms->ssIdPswrd1,"", 7);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	33a0      	adds	r3, #160	; 0xa0
 8006806:	2207      	movs	r2, #7
 8006808:	4932      	ldr	r1, [pc, #200]	; (80068d4 <DevParms_Set_Default+0x114>)
 800680a:	4618      	mov	r0, r3
 800680c:	f002 fc6c 	bl	80090e8 <memcpy>

  	P_DevicePrms->dpSrvUport = 65;//2//
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2241      	movs	r2, #65	; 0x41
 8006814:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
  	P_DevicePrms->dpSrvTDprt = 7777; // 90//42//
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f641 6261 	movw	r2, #7777	; 0x1e61
 800681e:	f8a3 2132 	strh.w	r2, [r3, #306]	; 0x132

  	P_DevicePrms->dpVersion = 0;//45//
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
  	P_DevicePrms->dpBuild = 0;//46//
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
  	P_DevicePrms->dpVersionR = 0;//47//
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  	P_DevicePrms->dpBuildR = 0;//48//
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

  	P_DevicePrms->dpVerRcrc = 0;//49//
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
  	P_DevicePrms->dpVerRdLn = 0;//50//
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

  	//P_DevicePrms->SecurityMode = 1;
  	P_DevicePrms->SecurityMode = 0;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
  	P_DevicePrms->GsmMode = 2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e

  	P_DevicePrms->HardwareType = HARDWARE_TYPE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2206      	movs	r2, #6
 8006866:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

  	//memset(P_DevicePrms->ssIdName1,0x00,32);
  	//memset(P_DevicePrms->ssIdPswrd1,0x00,32);

  	memset(P_DevicePrms->ssIdName2,0x00,32);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3340      	adds	r3, #64	; 0x40
 800686e:	2220      	movs	r2, #32
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f002 fc46 	bl	8009104 <memset>
  	memset(P_DevicePrms->ssIdPswrd2,0x00,32);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	33c0      	adds	r3, #192	; 0xc0
 800687c:	2220      	movs	r2, #32
 800687e:	2100      	movs	r1, #0
 8006880:	4618      	mov	r0, r3
 8006882:	f002 fc3f 	bl	8009104 <memset>

  	memset(P_DevicePrms->ssIdName3,0x00,32);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	3360      	adds	r3, #96	; 0x60
 800688a:	2220      	movs	r2, #32
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f002 fc38 	bl	8009104 <memset>
  	memset(P_DevicePrms->ssIdPswrd3,0x00,32);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	33e0      	adds	r3, #224	; 0xe0
 8006898:	2220      	movs	r2, #32
 800689a:	2100      	movs	r1, #0
 800689c:	4618      	mov	r0, r3
 800689e:	f002 fc31 	bl	8009104 <memset>

  	//memset(P_DevicePrms->ssIdName4,0x00,32);
  	memset(P_DevicePrms->ssIdPswrd4,0x00,16);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80068a8:	2210      	movs	r2, #16
 80068aa:	2100      	movs	r1, #0
 80068ac:	4618      	mov	r0, r3
 80068ae:	f002 fc29 	bl	8009104 <memset>

  	memset(P_DevicePrms->dpDvcID,0x00,16);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80068b8:	2210      	movs	r2, #16
 80068ba:	2100      	movs	r1, #0
 80068bc:	4618      	mov	r0, r3
 80068be:	f002 fc21 	bl	8009104 <memset>
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	08009510 	.word	0x08009510
 80068d0:	08009524 	.word	0x08009524
 80068d4:	08009530 	.word	0x08009530

080068d8 <Get_Param_Size_Without_CRC>:
 
 u32 Get_Param_Size_Without_CRC(void)
 {
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 	char* p2;
 	char* p1;
 	u32 size;

 	p1 = (char*)( &(I_DevicePrm) );
 80068de:	4b07      	ldr	r3, [pc, #28]	; (80068fc <Get_Param_Size_Without_CRC+0x24>)
 80068e0:	60fb      	str	r3, [r7, #12]
 	p2 = (char*)( &(I_DevicePrm.dpCrc) );
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <Get_Param_Size_Without_CRC+0x28>)
 80068e4:	60bb      	str	r3, [r7, #8]

 	size = (p2-p1);
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	607b      	str	r3, [r7, #4]

 	return size;
 80068ee:	687b      	ldr	r3, [r7, #4]
 }
 80068f0:	4618      	mov	r0, r3
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	200001bc 	.word	0x200001bc
 8006900:	20000304 	.word	0x20000304

08006904 <Flash_Init>:
#include "FlashDrv.h"
#include "FlashApp.h"


ErrorStatus Flash_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
	u8 wrtEnbl = FLS_WRT_ENABLE_INST;
 800690a:	2306      	movs	r3, #6
 800690c:	757b      	strb	r3, [r7, #21]

	u8 wrtDsbl = FLS_WRT_DISABLE_INST;
 800690e:	2304      	movs	r3, #4
 8006910:	753b      	strb	r3, [r7, #20]

	u8 sttCmd = FLS_RD_STTREG1_INST;
 8006912:	2305      	movs	r3, #5
 8006914:	74fb      	strb	r3, [r7, #19]

	u8 idWBuf[4] = {FLS_RD_MNDV_ID_INST,0x00,0x00,0x00};
 8006916:	2390      	movs	r3, #144	; 0x90
 8006918:	60fb      	str	r3, [r7, #12]

	u8 idRBuf[3] = {'\0'};
 800691a:	4b29      	ldr	r3, [pc, #164]	; (80069c0 <Flash_Init+0xbc>)
 800691c:	881b      	ldrh	r3, [r3, #0]
 800691e:	813b      	strh	r3, [r7, #8]
 8006920:	2300      	movs	r3, #0
 8006922:	72bb      	strb	r3, [r7, #10]

	u8 sttRg1Val = 0, writeEnBit = 0x00, busyBit = 0x00;
 8006924:	2300      	movs	r3, #0
 8006926:	71fb      	strb	r3, [r7, #7]
 8006928:	2300      	movs	r3, #0
 800692a:	75fb      	strb	r3, [r7, #23]
 800692c:	2300      	movs	r3, #0
 800692e:	75bb      	strb	r3, [r7, #22]

	if(Flash_Write_Data(&wrtEnbl, 1) == SUCCESS)
 8006930:	f107 0315 	add.w	r3, r7, #21
 8006934:	2101      	movs	r1, #1
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f8c2 	bl	8006ac0 <Flash_Write_Data>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d132      	bne.n	80069a8 <Flash_Init+0xa4>
	{
		if(Flash_Read_Data(&sttCmd , 1 , &sttRg1Val , 1))
 8006942:	1dfa      	adds	r2, r7, #7
 8006944:	f107 0013 	add.w	r0, r7, #19
 8006948:	2301      	movs	r3, #1
 800694a:	2101      	movs	r1, #1
 800694c:	f000 f8f6 	bl	8006b3c <Flash_Read_Data>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d028      	beq.n	80069a8 <Flash_Init+0xa4>
		{
			writeEnBit = ((sttRg1Val & 0x02) >> 1);
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	105b      	asrs	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]

			busyBit = (sttRg1Val & 0x01);
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	75bb      	strb	r3, [r7, #22]

			if((writeEnBit == 0x01) && (busyBit == 0x00))
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d11b      	bne.n	80069a8 <Flash_Init+0xa4>
 8006970:	7dbb      	ldrb	r3, [r7, #22]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d118      	bne.n	80069a8 <Flash_Init+0xa4>
			{
				if(Flash_Read_Data(idWBuf ,4 ,idRBuf , 2))
 8006976:	f107 0208 	add.w	r2, r7, #8
 800697a:	f107 000c 	add.w	r0, r7, #12
 800697e:	2302      	movs	r3, #2
 8006980:	2104      	movs	r1, #4
 8006982:	f000 f8db 	bl	8006b3c <Flash_Read_Data>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00d      	beq.n	80069a8 <Flash_Init+0xa4>
				{
					if((idRBuf[0] == MANUFACTURER_ID) && (idRBuf[1] == DEVICE_ID))
 800698c:	7a3b      	ldrb	r3, [r7, #8]
 800698e:	2bef      	cmp	r3, #239	; 0xef
 8006990:	d10a      	bne.n	80069a8 <Flash_Init+0xa4>
 8006992:	7a7b      	ldrb	r3, [r7, #9]
 8006994:	2b16      	cmp	r3, #22
 8006996:	d107      	bne.n	80069a8 <Flash_Init+0xa4>
					{
						Flash_Write_Data(&wrtDsbl,1);
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f88e 	bl	8006ac0 <Flash_Write_Data>

						return SUCCESS;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e006      	b.n	80069b6 <Flash_Init+0xb2>
			}

		}
	}

	Flash_Write_Data(&wrtDsbl,1);
 80069a8:	f107 0314 	add.w	r3, r7, #20
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f886 	bl	8006ac0 <Flash_Write_Data>

	return ERROR;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	08009534 	.word	0x08009534

080069c4 <Flash_Erase_Sector>:

ErrorStatus Flash_Erase_Sector(u32 sctAddr)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
	u8 wrtEnbl = FLS_WRT_ENABLE_INST;
 80069cc:	2306      	movs	r3, #6
 80069ce:	753b      	strb	r3, [r7, #20]

	u8 wrtDsbl = FLS_WRT_DISABLE_INST;
 80069d0:	2304      	movs	r3, #4
 80069d2:	74fb      	strb	r3, [r7, #19]

	u8 sttCmd = FLS_RD_STTREG1_INST;
 80069d4:	2305      	movs	r3, #5
 80069d6:	74bb      	strb	r3, [r7, #18]

	u8 eraseBuf[4] = {'\0'};
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]

	u8 sttRg1Val = 0, timOut = 0, writeEnBit = 0x00, busyBit = 0x00;
 80069dc:	2300      	movs	r3, #0
 80069de:	72fb      	strb	r3, [r7, #11]
 80069e0:	2300      	movs	r3, #0
 80069e2:	75fb      	strb	r3, [r7, #23]
 80069e4:	2300      	movs	r3, #0
 80069e6:	75bb      	strb	r3, [r7, #22]
 80069e8:	2300      	movs	r3, #0
 80069ea:	757b      	strb	r3, [r7, #21]

	eraseBuf[0] = FLS_ERASE_SECTOR_INST;
 80069ec:	2320      	movs	r3, #32
 80069ee:	733b      	strb	r3, [r7, #12]

	eraseBuf[1] = (u8)((sctAddr & 0xFF0000) >> 16);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	0c1b      	lsrs	r3, r3, #16
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	737b      	strb	r3, [r7, #13]

	eraseBuf[2] = (u8)((sctAddr & 0xFF00) >> 8);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	0a1b      	lsrs	r3, r3, #8
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	73bb      	strb	r3, [r7, #14]

	eraseBuf[3] = (u8)(sctAddr & 0xFF);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	73fb      	strb	r3, [r7, #15]

	if(Flash_Write_Data(&wrtEnbl, 1) == SUCCESS)
 8006a06:	f107 0314 	add.w	r3, r7, #20
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f857 	bl	8006ac0 <Flash_Write_Data>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d147      	bne.n	8006aa8 <Flash_Erase_Sector+0xe4>
	{
		if(Flash_Read_Data(&sttCmd, 1, &sttRg1Val , 1) == SUCCESS)
 8006a18:	f107 020b 	add.w	r2, r7, #11
 8006a1c:	f107 0012 	add.w	r0, r7, #18
 8006a20:	2301      	movs	r3, #1
 8006a22:	2101      	movs	r1, #1
 8006a24:	f000 f88a 	bl	8006b3c <Flash_Read_Data>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d13c      	bne.n	8006aa8 <Flash_Erase_Sector+0xe4>
		{
			writeEnBit = ((sttRg1Val & 0x02) >> 1);
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	105b      	asrs	r3, r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	75bb      	strb	r3, [r7, #22]

			busyBit = (sttRg1Val & 0x01);
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	757b      	strb	r3, [r7, #21]

			if((writeEnBit == 0x01) && (busyBit == 0x00))
 8006a42:	7dbb      	ldrb	r3, [r7, #22]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d12f      	bne.n	8006aa8 <Flash_Erase_Sector+0xe4>
 8006a48:	7d7b      	ldrb	r3, [r7, #21]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d12c      	bne.n	8006aa8 <Flash_Erase_Sector+0xe4>
			{
				if(Flash_Write_Data(eraseBuf,4) == SUCCESS)
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	2104      	movs	r1, #4
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f833 	bl	8006ac0 <Flash_Write_Data>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d123      	bne.n	8006aa8 <Flash_Erase_Sector+0xe4>
				{
					while(timOut < 24)
 8006a60:	e01f      	b.n	8006aa2 <Flash_Erase_Sector+0xde>
					{
						timOut++;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
 8006a64:	3301      	adds	r3, #1
 8006a66:	75fb      	strb	r3, [r7, #23]

						// TMR2_Sleep(10);
						TMR2_Sleep(100);
 8006a68:	2064      	movs	r0, #100	; 0x64
 8006a6a:	f001 f9b4 	bl	8007dd6 <TMR2_Sleep>
						
						if(Flash_Read_Data(&sttCmd, 1, &sttRg1Val , 1) == SUCCESS)
 8006a6e:	f107 020b 	add.w	r2, r7, #11
 8006a72:	f107 0012 	add.w	r0, r7, #18
 8006a76:	2301      	movs	r3, #1
 8006a78:	2101      	movs	r1, #1
 8006a7a:	f000 f85f 	bl	8006b3c <Flash_Read_Data>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d10e      	bne.n	8006aa2 <Flash_Erase_Sector+0xde>
						{
							busyBit = (sttRg1Val & 0x01);
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	757b      	strb	r3, [r7, #21]

							if(busyBit == 0x00)
 8006a8c:	7d7b      	ldrb	r3, [r7, #21]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <Flash_Erase_Sector+0xde>
							{
								Flash_Write_Data(&wrtDsbl,1);
 8006a92:	f107 0313 	add.w	r3, r7, #19
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f811 	bl	8006ac0 <Flash_Write_Data>

								return SUCCESS;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e009      	b.n	8006ab6 <Flash_Erase_Sector+0xf2>
					while(timOut < 24)
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b17      	cmp	r3, #23
 8006aa6:	d9dc      	bls.n	8006a62 <Flash_Erase_Sector+0x9e>
				}
			}
		}
	}

	Flash_Write_Data(&wrtDsbl, 1);
 8006aa8:	f107 0313 	add.w	r3, r7, #19
 8006aac:	2101      	movs	r1, #1
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f806 	bl	8006ac0 <Flash_Write_Data>

	return ERROR;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3718      	adds	r7, #24
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <Flash_Write_Data>:
#include "FlashDrv.h"

extern SPI_HandleTypeDef SPI2_Handle;

ErrorStatus Flash_Write_Data(u8* wrtBuf,u16 wrtBufLen)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	807b      	strh	r3, [r7, #2]
	u16 inx = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	82fb      	strh	r3, [r7, #22]
	u8 rdData;
	u8* rdDataPtr = &rdData;
 8006ad0:	f107 030f 	add.w	r3, r7, #15
 8006ad4:	613b      	str	r3, [r7, #16]

	IO_PORT_FLASH_SPI_CS->BRR = IO_PIN_FLASH_SPI_CS;
 8006ad6:	4b18      	ldr	r3, [pc, #96]	; (8006b38 <Flash_Write_Data+0x78>)
 8006ad8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
	TMR7_Sleep (30);
 8006ade:	201e      	movs	r0, #30
 8006ae0:	f001 f870 	bl	8007bc4 <TMR7_Sleep>

	for(inx= 0;inx<wrtBufLen;inx++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	82fb      	strh	r3, [r7, #22]
 8006ae8:	e016      	b.n	8006b18 <Flash_Write_Data+0x58>
	{
		if(SPI_Flash_SendByte(wrtBuf[inx], rdDataPtr) == ERROR)
 8006aea:	8afb      	ldrh	r3, [r7, #22]
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	6939      	ldr	r1, [r7, #16]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f881 	bl	8006bfc <SPI_Flash_SendByte>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d108      	bne.n	8006b12 <Flash_Write_Data+0x52>
		{
			IO_PORT_FLASH_SPI_CS->BSRR = IO_PIN_FLASH_SPI_CS;
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <Flash_Write_Data+0x78>)
 8006b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b06:	619a      	str	r2, [r3, #24]
			TMR7_Sleep (30);
 8006b08:	201e      	movs	r0, #30
 8006b0a:	f001 f85b 	bl	8007bc4 <TMR7_Sleep>
			return ERROR;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	e00e      	b.n	8006b30 <Flash_Write_Data+0x70>
	for(inx= 0;inx<wrtBufLen;inx++)
 8006b12:	8afb      	ldrh	r3, [r7, #22]
 8006b14:	3301      	adds	r3, #1
 8006b16:	82fb      	strh	r3, [r7, #22]
 8006b18:	8afa      	ldrh	r2, [r7, #22]
 8006b1a:	887b      	ldrh	r3, [r7, #2]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d3e4      	bcc.n	8006aea <Flash_Write_Data+0x2a>
		}
	}

	GPIOB->BSRR = GPIO_PIN_12;
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <Flash_Write_Data+0x78>)
 8006b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b26:	619a      	str	r2, [r3, #24]
	TMR7_Sleep (30);
 8006b28:	201e      	movs	r0, #30
 8006b2a:	f001 f84b 	bl	8007bc4 <TMR7_Sleep>
	return SUCCESS;
 8006b2e:	2301      	movs	r3, #1
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	48000400 	.word	0x48000400

08006b3c <Flash_Read_Data>:

ErrorStatus Flash_Read_Data(u8* instBuf,u16 instBufLen,u8* readBuf,u16 readBufLen)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	607a      	str	r2, [r7, #4]
 8006b46:	461a      	mov	r2, r3
 8006b48:	460b      	mov	r3, r1
 8006b4a:	817b      	strh	r3, [r7, #10]
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	813b      	strh	r3, [r7, #8]
	u16 inx = 0;
 8006b50:	2300      	movs	r3, #0
 8006b52:	83fb      	strh	r3, [r7, #30]
	u8 rdData;
	u8* rdDataPtr = &rdData;
 8006b54:	f107 0317 	add.w	r3, r7, #23
 8006b58:	61bb      	str	r3, [r7, #24]

	IO_PORT_FLASH_SPI_CS->BRR = IO_PIN_FLASH_SPI_CS;
 8006b5a:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <Flash_Read_Data+0xbc>)
 8006b5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b60:	629a      	str	r2, [r3, #40]	; 0x28
	TMR7_Sleep (30);
 8006b62:	201e      	movs	r0, #30
 8006b64:	f001 f82e 	bl	8007bc4 <TMR7_Sleep>

	for(inx= 0;inx<instBufLen;inx++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	83fb      	strh	r3, [r7, #30]
 8006b6c:	e016      	b.n	8006b9c <Flash_Read_Data+0x60>
	{
		if(SPI_Flash_SendByte(instBuf[inx], rdDataPtr) == ERROR)
 8006b6e:	8bfb      	ldrh	r3, [r7, #30]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	69b9      	ldr	r1, [r7, #24]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f83f 	bl	8006bfc <SPI_Flash_SendByte>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d108      	bne.n	8006b96 <Flash_Read_Data+0x5a>
		{
			IO_PORT_FLASH_SPI_CS->BSRR = IO_PIN_FLASH_SPI_CS;
 8006b84:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <Flash_Read_Data+0xbc>)
 8006b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b8a:	619a      	str	r2, [r3, #24]
			TMR7_Sleep (30);
 8006b8c:	201e      	movs	r0, #30
 8006b8e:	f001 f819 	bl	8007bc4 <TMR7_Sleep>
			return ERROR;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e02b      	b.n	8006bee <Flash_Read_Data+0xb2>
	for(inx= 0;inx<instBufLen;inx++)
 8006b96:	8bfb      	ldrh	r3, [r7, #30]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	83fb      	strh	r3, [r7, #30]
 8006b9c:	8bfa      	ldrh	r2, [r7, #30]
 8006b9e:	897b      	ldrh	r3, [r7, #10]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d3e4      	bcc.n	8006b6e <Flash_Read_Data+0x32>
		}
	}

	for(inx= 0;inx<readBufLen;inx++)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	83fb      	strh	r3, [r7, #30]
 8006ba8:	e015      	b.n	8006bd6 <Flash_Read_Data+0x9a>
	{
		if(SPI_Flash_SendByte((u8)0x00, (u8*)&readBuf[inx]) == ERROR)
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	f000 f822 	bl	8006bfc <SPI_Flash_SendByte>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d108      	bne.n	8006bd0 <Flash_Read_Data+0x94>
		{
			IO_PORT_FLASH_SPI_CS->BSRR = IO_PIN_FLASH_SPI_CS;
 8006bbe:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <Flash_Read_Data+0xbc>)
 8006bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006bc4:	619a      	str	r2, [r3, #24]
			TMR7_Sleep (30);
 8006bc6:	201e      	movs	r0, #30
 8006bc8:	f000 fffc 	bl	8007bc4 <TMR7_Sleep>
			return ERROR;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e00e      	b.n	8006bee <Flash_Read_Data+0xb2>
	for(inx= 0;inx<readBufLen;inx++)
 8006bd0:	8bfb      	ldrh	r3, [r7, #30]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	83fb      	strh	r3, [r7, #30]
 8006bd6:	8bfa      	ldrh	r2, [r7, #30]
 8006bd8:	893b      	ldrh	r3, [r7, #8]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d3e5      	bcc.n	8006baa <Flash_Read_Data+0x6e>
		}
	}

	IO_PORT_FLASH_SPI_CS->BSRR = IO_PIN_FLASH_SPI_CS;
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <Flash_Read_Data+0xbc>)
 8006be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006be4:	619a      	str	r2, [r3, #24]
	TMR7_Sleep (30);
 8006be6:	201e      	movs	r0, #30
 8006be8:	f000 ffec 	bl	8007bc4 <TMR7_Sleep>
	return SUCCESS;
 8006bec:	2301      	movs	r3, #1
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3720      	adds	r7, #32
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	48000400 	.word	0x48000400

08006bfc <SPI_Flash_SendByte>:

ErrorStatus SPI_Flash_SendByte(u8 wrtByte, u8* rdByte)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	4603      	mov	r3, r0
 8006c04:	6039      	str	r1, [r7, #0]
 8006c06:	71fb      	strb	r3, [r7, #7]
	u8 dlyCnt = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	73fb      	strb	r3, [r7, #15]
	static u8* dRegPtr = NULL;

	dRegPtr = (u8*)0x4000380C;
 8006c0c:	4b1f      	ldr	r3, [pc, #124]	; (8006c8c <SPI_Flash_SendByte+0x90>)
 8006c0e:	4a20      	ldr	r2, [pc, #128]	; (8006c90 <SPI_Flash_SendByte+0x94>)
 8006c10:	601a      	str	r2, [r3, #0]

	while((__HAL_SPI_GET_FLAG(&SPI2_Handle,SPI_FLAG_TXE) == 0)&&(dlyCnt < 10))
 8006c12:	e005      	b.n	8006c20 <SPI_Flash_SendByte+0x24>
	{
		dlyCnt++;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	3301      	adds	r3, #1
 8006c18:	73fb      	strb	r3, [r7, #15]
		TMR7_Sleep (30);
 8006c1a:	201e      	movs	r0, #30
 8006c1c:	f000 ffd2 	bl	8007bc4 <TMR7_Sleep>
	while((__HAL_SPI_GET_FLAG(&SPI2_Handle,SPI_FLAG_TXE) == 0)&&(dlyCnt < 10))
 8006c20:	4b1c      	ldr	r3, [pc, #112]	; (8006c94 <SPI_Flash_SendByte+0x98>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d002      	beq.n	8006c34 <SPI_Flash_SendByte+0x38>
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b09      	cmp	r3, #9
 8006c32:	d9ef      	bls.n	8006c14 <SPI_Flash_SendByte+0x18>
	}

	if(dlyCnt >= 10)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d901      	bls.n	8006c3e <SPI_Flash_SendByte+0x42>
	{
		return ERROR;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e021      	b.n	8006c82 <SPI_Flash_SendByte+0x86>
	}

	*dRegPtr = wrtByte;
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <SPI_Flash_SendByte+0x90>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	79fa      	ldrb	r2, [r7, #7]
 8006c44:	701a      	strb	r2, [r3, #0]

	dlyCnt = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	73fb      	strb	r3, [r7, #15]

	while(( __HAL_SPI_GET_FLAG(&SPI2_Handle,SPI_FLAG_RXNE)== 0)&&(dlyCnt < 10))
 8006c4a:	e005      	b.n	8006c58 <SPI_Flash_SendByte+0x5c>
	{
		dlyCnt++;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	73fb      	strb	r3, [r7, #15]
		TMR7_Sleep (30);
 8006c52:	201e      	movs	r0, #30
 8006c54:	f000 ffb6 	bl	8007bc4 <TMR7_Sleep>
	while(( __HAL_SPI_GET_FLAG(&SPI2_Handle,SPI_FLAG_RXNE)== 0)&&(dlyCnt < 10))
 8006c58:	4b0e      	ldr	r3, [pc, #56]	; (8006c94 <SPI_Flash_SendByte+0x98>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d002      	beq.n	8006c6c <SPI_Flash_SendByte+0x70>
 8006c66:	7bfb      	ldrb	r3, [r7, #15]
 8006c68:	2b09      	cmp	r3, #9
 8006c6a:	d9ef      	bls.n	8006c4c <SPI_Flash_SendByte+0x50>
	}

	if(dlyCnt >= 10)
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d901      	bls.n	8006c76 <SPI_Flash_SendByte+0x7a>
	{
		return ERROR;
 8006c72:	2300      	movs	r3, #0
 8006c74:	e005      	b.n	8006c82 <SPI_Flash_SendByte+0x86>
	}

	*rdByte = *dRegPtr;
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <SPI_Flash_SendByte+0x90>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	701a      	strb	r2, [r3, #0]

	return SUCCESS;
 8006c80:	2301      	movs	r3, #1
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20000588 	.word	0x20000588
 8006c90:	4000380c 	.word	0x4000380c
 8006c94:	200005b4 	.word	0x200005b4

08006c98 <CRC16_Clc>:
#include "FlashDrv.h"
#include "FlashApp.h"
#include "FlashInnApp.h"

 u16 CRC16_Clc(u8 * ptrPct, u16 pctLen, u16  crc16)
 {
 8006c98:	b490      	push	{r4, r7}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	807b      	strh	r3, [r7, #2]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	803b      	strh	r3, [r7, #0]
	 u8  OddParity[16] = { 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0 };
 8006ca8:	4b28      	ldr	r3, [pc, #160]	; (8006d4c <CRC16_Clc+0xb4>)
 8006caa:	f107 040c 	add.w	r4, r7, #12
 8006cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 
	 u16  pwr = 0, data = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	83fb      	strh	r3, [r7, #30]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	83bb      	strh	r3, [r7, #28]
	 
	 for(pwr = 0; pwr < pctLen; pwr++) 
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	83fb      	strh	r3, [r7, #30]
 8006cc0:	e03a      	b.n	8006d38 <CRC16_Clc+0xa0>
	 {
			 data = (u16)ptrPct[pwr];
 8006cc2:	8bfb      	ldrh	r3, [r7, #30]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	83bb      	strh	r3, [r7, #28]
 
			 data = ((data ^ (crc16 & 0xFF)) & 0xFF);
 8006ccc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	b21a      	sxth	r2, r3
 8006cd4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006cd8:	4053      	eors	r3, r2
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	83bb      	strh	r3, [r7, #28]
 
			 crc16 >>= 8;
 8006ce2:	883b      	ldrh	r3, [r7, #0]
 8006ce4:	0a1b      	lsrs	r3, r3, #8
 8006ce6:	803b      	strh	r3, [r7, #0]
 
		  if(OddParity[data & 0xF] ^ OddParity[data >> 4])
 8006ce8:	8bbb      	ldrh	r3, [r7, #28]
 8006cea:	f003 030f 	and.w	r3, r3, #15
 8006cee:	3320      	adds	r3, #32
 8006cf0:	443b      	add	r3, r7
 8006cf2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8006cf6:	8bbb      	ldrh	r3, [r7, #28]
 8006cf8:	091b      	lsrs	r3, r3, #4
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3320      	adds	r3, #32
 8006cfe:	443b      	add	r3, r7
 8006d00:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d006      	beq.n	8006d16 <CRC16_Clc+0x7e>
		  {
				 crc16 ^= 0xC001;
 8006d08:	883b      	ldrh	r3, [r7, #0]
 8006d0a:	f483 537f 	eor.w	r3, r3, #16320	; 0x3fc0
 8006d0e:	f083 033e 	eor.w	r3, r3, #62	; 0x3e
 8006d12:	43db      	mvns	r3, r3
 8006d14:	803b      	strh	r3, [r7, #0]
		  }
  
			 data <<= 6;
 8006d16:	8bbb      	ldrh	r3, [r7, #28]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	83bb      	strh	r3, [r7, #28]
 
			 crc16 ^= data;
 8006d1c:	883a      	ldrh	r2, [r7, #0]
 8006d1e:	8bbb      	ldrh	r3, [r7, #28]
 8006d20:	4053      	eors	r3, r2
 8006d22:	803b      	strh	r3, [r7, #0]
 
			 data <<= 1;
 8006d24:	8bbb      	ldrh	r3, [r7, #28]
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	83bb      	strh	r3, [r7, #28]
 
			 crc16 ^= data;
 8006d2a:	883a      	ldrh	r2, [r7, #0]
 8006d2c:	8bbb      	ldrh	r3, [r7, #28]
 8006d2e:	4053      	eors	r3, r2
 8006d30:	803b      	strh	r3, [r7, #0]
	 for(pwr = 0; pwr < pctLen; pwr++) 
 8006d32:	8bfb      	ldrh	r3, [r7, #30]
 8006d34:	3301      	adds	r3, #1
 8006d36:	83fb      	strh	r3, [r7, #30]
 8006d38:	8bfa      	ldrh	r2, [r7, #30]
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3c0      	bcc.n	8006cc2 <CRC16_Clc+0x2a>
 
	 }
 
		 return (crc16);
 8006d40:	883b      	ldrh	r3, [r7, #0]
 
 }
 8006d42:	4618      	mov	r0, r3
 8006d44:	3720      	adds	r7, #32
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc90      	pop	{r4, r7}
 8006d4a:	4770      	bx	lr
 8006d4c:	08009540 	.word	0x08009540

08006d50 <Transfer_Version>:
 
 ErrorStatus Transfer_Version(u32 verByteLn, u32 extFlsAddr, u8 * dataBuff, u32 inFlsDstAdd)
 {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
 8006d5c:	603b      	str	r3, [r7, #0]
	 u8 wrBuff[4] = {0};
 8006d5e:	2300      	movs	r3, #0
 8006d60:	617b      	str	r3, [r7, #20]
	 
  	memset(dataBuff, '\0', 1024);
 8006d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d66:	2100      	movs	r1, #0
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f002 f9cb 	bl	8009104 <memset>
	
	 wrBuff[0] = FLS_RD_DATA_INST;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	753b      	strb	r3, [r7, #20]
		 
	 wrBuff[1] = (u8)((extFlsAddr & 0x00FF0000) >> 16);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	0c1b      	lsrs	r3, r3, #16
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	757b      	strb	r3, [r7, #21]
		 
	 wrBuff[2] = (u8)((extFlsAddr & 0x0000FF00) >> 8);
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	0a1b      	lsrs	r3, r3, #8
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	75bb      	strb	r3, [r7, #22]
		 
	 wrBuff[3] = (u8)((extFlsAddr & 0x000000FF));
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	75fb      	strb	r3, [r7, #23]
 
	 while(verByteLn >= 1024)
 8006d88:	e039      	b.n	8006dfe <Transfer_Version+0xae>
	 {
		 if(Flash_Read_Data(wrBuff, 4, dataBuff , 1024))
 8006d8a:	f107 0014 	add.w	r0, r7, #20
 8006d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	2104      	movs	r1, #4
 8006d96:	f7ff fed1 	bl	8006b3c <Flash_Read_Data>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02c      	beq.n	8006dfa <Transfer_Version+0xaa>
		 {	 
			 if((((inFlsDstAdd) < INNFLS_STR_APP_ADD) || ((inFlsDstAdd) >= INNFLS_END_APP_ADD)))
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <Transfer_Version+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d303      	bcc.n	8006db0 <Transfer_Version+0x60>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	4a2f      	ldr	r2, [pc, #188]	; (8006e68 <Transfer_Version+0x118>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d901      	bls.n	8006db4 <Transfer_Version+0x64>
			 {
				 return ERROR;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e053      	b.n	8006e5c <Transfer_Version+0x10c>
			 }
			 
			 if(Inner_Flash_Write_Version(dataBuff, 1024 , inFlsDstAdd) == ERROR)
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f87a 	bl	8006eb4 <Inner_Flash_Write_Version>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <Transfer_Version+0x7a>
			 {
				 return ERROR;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e048      	b.n	8006e5c <Transfer_Version+0x10c>
			 }
 
			 inFlsDstAdd += 1024;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	603b      	str	r3, [r7, #0]
			 
			 extFlsAddr += 1024;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd8:	60bb      	str	r3, [r7, #8]
 
			 verByteLn -= 1024;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006de0:	60fb      	str	r3, [r7, #12]
 
			 wrBuff[1] = (u8)((extFlsAddr & 0x00FF0000) >> 16);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	0c1b      	lsrs	r3, r3, #16
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	757b      	strb	r3, [r7, #21]
				 
			 wrBuff[2] = (u8)((extFlsAddr & 0x0000FF00) >> 8);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	0a1b      	lsrs	r3, r3, #8
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	75bb      	strb	r3, [r7, #22]
				 
			 wrBuff[3] = (u8)((extFlsAddr & 0x000000FF));
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	75fb      	strb	r3, [r7, #23]
 8006df8:	e001      	b.n	8006dfe <Transfer_Version+0xae>
		 }
		 else
		 {
			 return ERROR;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e02e      	b.n	8006e5c <Transfer_Version+0x10c>
	 while(verByteLn >= 1024)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e04:	d2c1      	bcs.n	8006d8a <Transfer_Version+0x3a>
		 }
	 }
	 
 	memset(dataBuff, '\0', 1024);
 8006e06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 f979 	bl	8009104 <memset>
	
	 if(verByteLn)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <Transfer_Version+0x10a>
	 {
		 if(Flash_Read_Data(wrBuff, 4, dataBuff , verByteLn))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f107 0014 	add.w	r0, r7, #20
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	2104      	movs	r1, #4
 8006e24:	f7ff fe8a 	bl	8006b3c <Flash_Read_Data>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d013      	beq.n	8006e56 <Transfer_Version+0x106>
		 {
			 if((((inFlsDstAdd) < INNFLS_STR_APP_ADD) || ((inFlsDstAdd) >= INNFLS_END_APP_ADD)))
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	4a0c      	ldr	r2, [pc, #48]	; (8006e64 <Transfer_Version+0x114>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d303      	bcc.n	8006e3e <Transfer_Version+0xee>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	4a0b      	ldr	r2, [pc, #44]	; (8006e68 <Transfer_Version+0x118>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <Transfer_Version+0xf2>
			 {
				 return ERROR;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e00c      	b.n	8006e5c <Transfer_Version+0x10c>
			 }
			 
			 if(Inner_Flash_Write_Version_Mod(dataBuff, verByteLn , inFlsDstAdd) == ERROR)
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f868 	bl	8006f1c <Inner_Flash_Write_Version_Mod>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <Transfer_Version+0x10a>
			 {
				 return ERROR;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e002      	b.n	8006e5c <Transfer_Version+0x10c>
			 }
		 }
		 else
		 {
			 return ERROR;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e000      	b.n	8006e5c <Transfer_Version+0x10c>
		 }
	 }
	 
	 return SUCCESS;
 8006e5a:	2301      	movs	r3, #1
 }
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	0800a000 	.word	0x0800a000
 8006e68:	0803ffff 	.word	0x0803ffff

08006e6c <Inner_Flash_Erase>:
 
 ErrorStatus Inner_Flash_Erase(void)
 {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
	u32 PgErrPtr = 0;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]

	FLASH_EraseInitTypeDef I_FlsErase = {'\0'};
 8006e76:	1d3b      	adds	r3, r7, #4
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]
 8006e7c:	605a      	str	r2, [r3, #4]
 8006e7e:	609a      	str	r2, [r3, #8]
 8006e80:	60da      	str	r2, [r3, #12]

	I_FlsErase.Banks = FLASH_BANK_1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	60bb      	str	r3, [r7, #8]
	I_FlsErase.NbPages = 108;
 8006e86:	236c      	movs	r3, #108	; 0x6c
 8006e88:	613b      	str	r3, [r7, #16]
	I_FlsErase.Page = 20;
 8006e8a:	2314      	movs	r3, #20
 8006e8c:	60fb      	str	r3, [r7, #12]
	I_FlsErase.TypeErase=FLASH_TYPEERASE_PAGES;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
	
	if(HAL_FLASHEx_Erase(&I_FlsErase, &PgErrPtr) != HAL_OK)
 8006e92:	f107 0214 	add.w	r2, r7, #20
 8006e96:	1d3b      	adds	r3, r7, #4
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fc fa76 	bl	800338c <HAL_FLASHEx_Erase>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d001      	beq.n	8006eaa <Inner_Flash_Erase+0x3e>
	{
		return ERROR;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e000      	b.n	8006eac <Inner_Flash_Erase+0x40>
	}

	return SUCCESS;
 8006eaa:	2301      	movs	r3, #1
 }
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <Inner_Flash_Write_Version>:

 ErrorStatus Inner_Flash_Write_Version(u8 * inFlsBuff, u32 inFlsBLen, u32 inFlsDstAdd)
 {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	 u32* RamSourcel = (u32*)inFlsBuff;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	617b      	str	r3, [r7, #20]
 
	 u32 FlsDstAdd = inFlsDstAdd;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	613b      	str	r3, [r7, #16]
	 
	 while(inFlsBLen)
 8006ec8:	e020      	b.n	8006f0c <Inner_Flash_Write_Version+0x58>
	 {		 
		 if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlsDstAdd, *(u64*)RamSourcel) != HAL_OK)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	6939      	ldr	r1, [r7, #16]
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	f7fc f848 	bl	8002f68 <HAL_FLASH_Program>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <Inner_Flash_Write_Version+0x2e>
		 {
			 return ERROR;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	e018      	b.n	8006f14 <Inner_Flash_Write_Version+0x60>
		 }
		 
		 if(*(u64*)FlsDstAdd != *(u64*)RamSourcel)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	bf08      	it	eq
 8006ef2:	4290      	cmpeq	r0, r2
 8006ef4:	d001      	beq.n	8006efa <Inner_Flash_Write_Version+0x46>
		 {
			 return ERROR;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	e00c      	b.n	8006f14 <Inner_Flash_Write_Version+0x60>
		 }
		 
		 FlsDstAdd += 8;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	3308      	adds	r3, #8
 8006efe:	613b      	str	r3, [r7, #16]
		 
		 RamSourcel += 2;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	3308      	adds	r3, #8
 8006f04:	617b      	str	r3, [r7, #20]

		 inFlsBLen -= 8;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3b08      	subs	r3, #8
 8006f0a:	60bb      	str	r3, [r7, #8]
	 while(inFlsBLen)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1db      	bne.n	8006eca <Inner_Flash_Write_Version+0x16>
	 }
 
	 return SUCCESS;
 8006f12:	2301      	movs	r3, #1
 }
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <Inner_Flash_Write_Version_Mod>:

 ErrorStatus Inner_Flash_Write_Version_Mod(u8 * inFlsBuff, u32 inFlsBLen, u32 inFlsDstAdd)
  {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
	  u32* RamSourcel = (u32*)inFlsBuff;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	61fb      	str	r3, [r7, #28]
  
	  u32 FlsDstAdd = inFlsDstAdd;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	61bb      	str	r3, [r7, #24]

	 u32 res = inFlsBLen % 8;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	617b      	str	r3, [r7, #20]

	 inFlsBLen = inFlsBLen - res;
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	60bb      	str	r3, [r7, #8]
	 
	  while(inFlsBLen)
 8006f40:	e020      	b.n	8006f84 <Inner_Flash_Write_Version_Mod+0x68>
	  { 	  
		  if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlsDstAdd, *(u64*)RamSourcel) != HAL_OK)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f48:	69b9      	ldr	r1, [r7, #24]
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	f7fc f80c 	bl	8002f68 <HAL_FLASH_Program>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <Inner_Flash_Write_Version_Mod+0x3e>
		  {
			  return ERROR;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e033      	b.n	8006fc2 <Inner_Flash_Write_Version_Mod+0xa6>
		  }
 
		  if(*(u64*)FlsDstAdd != *(u64*)RamSourcel)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f66:	4299      	cmp	r1, r3
 8006f68:	bf08      	it	eq
 8006f6a:	4290      	cmpeq	r0, r2
 8006f6c:	d001      	beq.n	8006f72 <Inner_Flash_Write_Version_Mod+0x56>
		  {
			  return ERROR;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	e027      	b.n	8006fc2 <Inner_Flash_Write_Version_Mod+0xa6>
		  }
		  
		  FlsDstAdd += 8;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	3308      	adds	r3, #8
 8006f76:	61bb      	str	r3, [r7, #24]
		  
		  RamSourcel += 2;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	61fb      	str	r3, [r7, #28]
 
		  inFlsBLen -= 8;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	3b08      	subs	r3, #8
 8006f82:	60bb      	str	r3, [r7, #8]
	  while(inFlsBLen)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1db      	bne.n	8006f42 <Inner_Flash_Write_Version_Mod+0x26>
	  }

	if(res)
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d017      	beq.n	8006fc0 <Inner_Flash_Write_Version_Mod+0xa4>
	{
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FlsDstAdd, *(u64*)RamSourcel) != HAL_OK)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	69b9      	ldr	r1, [r7, #24]
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f7fb ffe5 	bl	8002f68 <HAL_FLASH_Program>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <Inner_Flash_Write_Version_Mod+0x8c>
		{
			return ERROR;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e00c      	b.n	8006fc2 <Inner_Flash_Write_Version_Mod+0xa6>
		}

		if(*(u64*)FlsDstAdd != *(u64*)RamSourcel)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	4299      	cmp	r1, r3
 8006fb6:	bf08      	it	eq
 8006fb8:	4290      	cmpeq	r0, r2
 8006fba:	d001      	beq.n	8006fc0 <Inner_Flash_Write_Version_Mod+0xa4>
		{
		  	return ERROR;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <Inner_Flash_Write_Version_Mod+0xa6>
		}
	}
	
	  return SUCCESS;
 8006fc0:	2301      	movs	r3, #1
  }
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <Inner_Flash_ClcCrc16>:

 ErrorStatus Inner_Flash_ClcCrc16(u32 verByteLn, u32 innFlsAdd, u16* pCrc16, u8* dataBuff, u32 buffLen)
 {
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08a      	sub	sp, #40	; 0x28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	603b      	str	r3, [r7, #0]
	 u32 innSrcAdd = innFlsAdd;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
 
	 u32 inxI = 0, inxJ = 0 ,dataInbuf = 0, res = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	61fb      	str	r3, [r7, #28]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 
	 u16 lclCrc = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	827b      	strh	r3, [r7, #18]
	 
	 while(verByteLn >= 1024)
 8006ff0:	e042      	b.n	8007078 <Inner_Flash_ClcCrc16+0xae>
	 {
	 	inxJ = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	61fb      	str	r3, [r7, #28]
		
		 for(inxI = 0; inxI < 256 ; inxI++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	e029      	b.n	8007050 <Inner_Flash_ClcCrc16+0x86>
		 {
 			dataInbuf = *(u32*)innSrcAdd;
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	61bb      	str	r3, [r7, #24]

			 dataBuff[inxJ] = (u8)(dataInbuf & 0xFF);
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	4413      	add	r3, r2
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	b2d2      	uxtb	r2, r2
 800700c:	701a      	strb	r2, [r3, #0]
			 
			 dataBuff[(inxJ + 1)] = (u8)((dataInbuf & 0xFF00) >> 8);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	0a19      	lsrs	r1, r3, #8
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	3301      	adds	r3, #1
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4413      	add	r3, r2
 800701a:	b2ca      	uxtb	r2, r1
 800701c:	701a      	strb	r2, [r3, #0]
			 
			 dataBuff[(inxJ + 2)] = (u8)((dataInbuf & 0xFF0000) >> 16);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	0c19      	lsrs	r1, r3, #16
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	3302      	adds	r3, #2
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4413      	add	r3, r2
 800702a:	b2ca      	uxtb	r2, r1
 800702c:	701a      	strb	r2, [r3, #0]
			 
			 dataBuff[(inxJ + 3)] = (u8)((dataInbuf & 0xFF000000) >> 24);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	0e19      	lsrs	r1, r3, #24
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	3303      	adds	r3, #3
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	b2ca      	uxtb	r2, r1
 800703c:	701a      	strb	r2, [r3, #0]

			 inxJ += 4;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	3304      	adds	r3, #4
 8007042:	61fb      	str	r3, [r7, #28]

			 innSrcAdd += 4;
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	3304      	adds	r3, #4
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
		 for(inxI = 0; inxI < 256 ; inxI++)
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	3301      	adds	r3, #1
 800704e:	623b      	str	r3, [r7, #32]
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	2bff      	cmp	r3, #255	; 0xff
 8007054:	d9d2      	bls.n	8006ffc <Inner_Flash_ClcCrc16+0x32>
		 }
		 
		 lclCrc  = CRC16_Clc(dataBuff, buffLen, *pCrc16);
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	b299      	uxth	r1, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	6838      	ldr	r0, [r7, #0]
 8007062:	f7ff fe19 	bl	8006c98 <CRC16_Clc>
 8007066:	4603      	mov	r3, r0
 8007068:	827b      	strh	r3, [r7, #18]
 
		 *pCrc16 = lclCrc;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8a7a      	ldrh	r2, [r7, #18]
 800706e:	801a      	strh	r2, [r3, #0]
 
		 verByteLn -= 1024;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007076:	60fb      	str	r3, [r7, #12]
	 while(verByteLn >= 1024)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800707e:	d2b8      	bcs.n	8006ff2 <Inner_Flash_ClcCrc16+0x28>
	 }

	 res = verByteLn % 4;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	617b      	str	r3, [r7, #20]

	 verByteLn -= res;
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	60fb      	str	r3, [r7, #12]
	 
	 inxJ = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
	 
	for(inxI = 0; inxI < (verByteLn/4) ; inxI++)
 8007094:	2300      	movs	r3, #0
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	e029      	b.n	80070ee <Inner_Flash_ClcCrc16+0x124>
	{
	  dataInbuf = *(u32*)innSrcAdd;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]

	  dataBuff[inxJ] = (u8)(dataInbuf & 0xFF);
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	4413      	add	r3, r2
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
	  
	  dataBuff[(inxJ + 1)] = (u8)((dataInbuf & 0xFF00) >> 8);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	0a19      	lsrs	r1, r3, #8
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	3301      	adds	r3, #1
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	4413      	add	r3, r2
 80070b8:	b2ca      	uxtb	r2, r1
 80070ba:	701a      	strb	r2, [r3, #0]
	  
	  dataBuff[(inxJ + 2)] = (u8)((dataInbuf & 0xFF0000) >> 16);
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	0c19      	lsrs	r1, r3, #16
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3302      	adds	r3, #2
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	4413      	add	r3, r2
 80070c8:	b2ca      	uxtb	r2, r1
 80070ca:	701a      	strb	r2, [r3, #0]
	  
	  dataBuff[(inxJ + 3)] = (u8)((dataInbuf & 0xFF000000) >> 24);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	0e19      	lsrs	r1, r3, #24
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	3303      	adds	r3, #3
 80070d4:	683a      	ldr	r2, [r7, #0]
 80070d6:	4413      	add	r3, r2
 80070d8:	b2ca      	uxtb	r2, r1
 80070da:	701a      	strb	r2, [r3, #0]

	  inxJ += 4;
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	3304      	adds	r3, #4
 80070e0:	61fb      	str	r3, [r7, #28]

	  innSrcAdd += 4;
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	3304      	adds	r3, #4
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
	for(inxI = 0; inxI < (verByteLn/4) ; inxI++)
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	3301      	adds	r3, #1
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	089b      	lsrs	r3, r3, #2
 80070f2:	6a3a      	ldr	r2, [r7, #32]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d3d0      	bcc.n	800709a <Inner_Flash_ClcCrc16+0xd0>
	}
	  
	lclCrc  = CRC16_Clc(dataBuff, verByteLn , *pCrc16);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	b299      	uxth	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6838      	ldr	r0, [r7, #0]
 8007104:	f7ff fdc8 	bl	8006c98 <CRC16_Clc>
 8007108:	4603      	mov	r3, r0
 800710a:	827b      	strh	r3, [r7, #18]

	*pCrc16 = lclCrc;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8a7a      	ldrh	r2, [r7, #18]
 8007110:	801a      	strh	r2, [r3, #0]
	 
	if(res)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02f      	beq.n	8007178 <Inner_Flash_ClcCrc16+0x1ae>
	{
		inxJ = 0;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
		
		dataInbuf = *(u32*)innSrcAdd;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	61bb      	str	r3, [r7, #24]

		dataBuff[inxJ] = (u8)(dataInbuf & 0xFF);
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]

		dataBuff[(inxJ + 1)] = (u8)((dataInbuf & 0xFF00) >> 8);
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	0a19      	lsrs	r1, r3, #8
 8007132:	69fb      	ldr	r3, [r7, #28]
 8007134:	3301      	adds	r3, #1
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	4413      	add	r3, r2
 800713a:	b2ca      	uxtb	r2, r1
 800713c:	701a      	strb	r2, [r3, #0]

		dataBuff[(inxJ + 2)] = (u8)((dataInbuf & 0xFF0000) >> 16);
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	0c19      	lsrs	r1, r3, #16
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3302      	adds	r3, #2
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	4413      	add	r3, r2
 800714a:	b2ca      	uxtb	r2, r1
 800714c:	701a      	strb	r2, [r3, #0]

		dataBuff[(inxJ + 3)] = (u8)((dataInbuf & 0xFF000000) >> 24);
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	0e19      	lsrs	r1, r3, #24
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	3303      	adds	r3, #3
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	4413      	add	r3, r2
 800715a:	b2ca      	uxtb	r2, r1
 800715c:	701a      	strb	r2, [r3, #0]

		lclCrc  = CRC16_Clc(dataBuff, res , *pCrc16);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	b299      	uxth	r1, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	6838      	ldr	r0, [r7, #0]
 800716a:	f7ff fd95 	bl	8006c98 <CRC16_Clc>
 800716e:	4603      	mov	r3, r0
 8007170:	827b      	strh	r3, [r7, #18]

		*pCrc16 = lclCrc;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8a7a      	ldrh	r2, [r7, #18]
 8007176:	801a      	strh	r2, [r3, #0]
	}
	  
	return SUCCESS;
 8007178:	2301      	movs	r3, #1
 }
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <Serial_PutString>:

	return key;
}

void Serial_PutString(u8* s)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b082      	sub	sp, #8
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
	while (*s != '\0')
 800718a:	e007      	b.n	800719c <Serial_PutString+0x1a>
	{
		SerialPutChar(*s);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	4618      	mov	r0, r3
 8007192:	f001 f82d 	bl	80081f0 <SerialPutChar>

		s++;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	3301      	adds	r3, #1
 800719a:	607b      	str	r3, [r7, #4]
	while (*s != '\0')
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1f3      	bne.n	800718c <Serial_PutString+0xa>
	}

	WaitForEndTx();
 80071a4:	f001 f83e 	bl	8008224 <WaitForEndTx>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <Led_GPIO_Init>:
#include "Defines.h"
#include "IO_Mapping.h"
#include "LED.h"

 void Led_GPIO_Init(void)
 {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStructure = {'\0'};
 80071b6:	1d3b      	adds	r3, r7, #4
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	611a      	str	r2, [r3, #16]

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_LED_RED , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80071c4:	1d38      	adds	r0, r7, #4
 80071c6:	2300      	movs	r3, #0
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	2300      	movs	r3, #0
 80071cc:	2208      	movs	r2, #8
 80071ce:	2101      	movs	r1, #1
 80071d0:	f000 f882 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_LED_RED, &GPIO_InitStructure);
 80071d4:	1d3b      	adds	r3, r7, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4825      	ldr	r0, [pc, #148]	; (8007270 <Led_GPIO_Init+0xc0>)
 80071da:	f7fc fa09 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_RED, GPIO_PIN_SET);
 80071de:	2201      	movs	r2, #1
 80071e0:	2108      	movs	r1, #8
 80071e2:	4823      	ldr	r0, [pc, #140]	; (8007270 <Led_GPIO_Init+0xc0>)
 80071e4:	f7fc fc77 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_LED_GREEN , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80071e8:	1d38      	adds	r0, r7, #4
 80071ea:	2300      	movs	r3, #0
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	2300      	movs	r3, #0
 80071f0:	2204      	movs	r2, #4
 80071f2:	2101      	movs	r1, #1
 80071f4:	f000 f870 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_LED_GREEN, &GPIO_InitStructure);
 80071f8:	1d3b      	adds	r3, r7, #4
 80071fa:	4619      	mov	r1, r3
 80071fc:	481c      	ldr	r0, [pc, #112]	; (8007270 <Led_GPIO_Init+0xc0>)
 80071fe:	f7fc f9f7 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_LED_GREEN, IO_PIN_LED_GREEN, GPIO_PIN_SET);
 8007202:	2201      	movs	r2, #1
 8007204:	2104      	movs	r1, #4
 8007206:	481a      	ldr	r0, [pc, #104]	; (8007270 <Led_GPIO_Init+0xc0>)
 8007208:	f7fc fc65 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_LED_BLUE , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800720c:	1d38      	adds	r0, r7, #4
 800720e:	2300      	movs	r3, #0
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	2300      	movs	r3, #0
 8007214:	2210      	movs	r2, #16
 8007216:	2101      	movs	r1, #1
 8007218:	f000 f85e 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_LED_BLUE, &GPIO_InitStructure);
 800721c:	1d3b      	adds	r3, r7, #4
 800721e:	4619      	mov	r1, r3
 8007220:	4813      	ldr	r0, [pc, #76]	; (8007270 <Led_GPIO_Init+0xc0>)
 8007222:	f7fc f9e5 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_LED_BLUE, IO_PIN_LED_BLUE, GPIO_PIN_SET);
 8007226:	2201      	movs	r2, #1
 8007228:	2110      	movs	r1, #16
 800722a:	4811      	ldr	r0, [pc, #68]	; (8007270 <Led_GPIO_Init+0xc0>)
 800722c:	f7fc fc53 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_CLK_OUT , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007230:	1d38      	adds	r0, r7, #4
 8007232:	2300      	movs	r3, #0
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2300      	movs	r3, #0
 8007238:	2208      	movs	r2, #8
 800723a:	2101      	movs	r1, #1
 800723c:	f000 f84c 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_CLK_OUT, &GPIO_InitStructure);
 8007240:	1d3b      	adds	r3, r7, #4
 8007242:	4619      	mov	r1, r3
 8007244:	480b      	ldr	r0, [pc, #44]	; (8007274 <Led_GPIO_Init+0xc4>)
 8007246:	f7fc f9d3 	bl	80035f0 <HAL_GPIO_Init>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_CHARGE_EN , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800724a:	1d38      	adds	r0, r7, #4
 800724c:	2300      	movs	r3, #0
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2300      	movs	r3, #0
 8007252:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007256:	2101      	movs	r1, #1
 8007258:	f000 f83e 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_CHARGE_EN, &GPIO_InitStructure);
 800725c:	1d3b      	adds	r3, r7, #4
 800725e:	4619      	mov	r1, r3
 8007260:	4804      	ldr	r0, [pc, #16]	; (8007274 <Led_GPIO_Init+0xc4>)
 8007262:	f7fc f9c5 	bl	80035f0 <HAL_GPIO_Init>
	/*
	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_BUZZER , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
	HAL_GPIO_Init(IO_PORT_BUZZER, &GPIO_InitStructure);
	HAL_GPIO_WritePin(IO_PORT_BUZZER, IO_PIN_BUZZER, GPIO_PIN_SET);
	*/
 }
 8007266:	bf00      	nop
 8007268:	3718      	adds	r7, #24
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	48000c00 	.word	0x48000c00
 8007274:	48001000 	.word	0x48001000

08007278 <BlinkLed>:

 void BlinkLed(u8 led_code)
 {
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	4603      	mov	r3, r0
 8007280:	71fb      	strb	r3, [r7, #7]
	 // default: 0 - RED
	 u32 port = IO_PORT_LED_RED;
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <BlinkLed+0x5c>)
 8007284:	60fb      	str	r3, [r7, #12]
	 u32 pin = IO_PIN_LED_RED;
 8007286:	2308      	movs	r3, #8
 8007288:	60bb      	str	r3, [r7, #8]

	 if (led_code == 1) // green
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d104      	bne.n	800729a <BlinkLed+0x22>
	 {
		 port = IO_PORT_LED_GREEN;
 8007290:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <BlinkLed+0x5c>)
 8007292:	60fb      	str	r3, [r7, #12]
		 pin = IO_PIN_LED_GREEN;
 8007294:	2304      	movs	r3, #4
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	e006      	b.n	80072a8 <BlinkLed+0x30>
	 }
	 else if (led_code == 2) // blue
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d103      	bne.n	80072a8 <BlinkLed+0x30>
	 {
		 port = IO_PORT_LED_BLUE;
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <BlinkLed+0x5c>)
 80072a2:	60fb      	str	r3, [r7, #12]
		 pin = IO_PIN_LED_BLUE;
 80072a4:	2310      	movs	r3, #16
 80072a6:	60bb      	str	r3, [r7, #8]
	 }

	 HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	b291      	uxth	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fc fc10 	bl	8003ad6 <HAL_GPIO_WritePin>
	 TMR2_Sleep(100*10);
 80072b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ba:	f000 fd8c 	bl	8007dd6 <TMR2_Sleep>
	 HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	b291      	uxth	r1, r2
 80072c4:	2201      	movs	r2, #1
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7fc fc05 	bl	8003ad6 <HAL_GPIO_WritePin>
 }
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	48000c00 	.word	0x48000c00

080072d8 <GPIO_Config_Params>:


void GPIO_Config_Params(GPIO_InitTypeDef * P_gpio, u32 mode,u32 pin,u32 pull,u32 speed)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
	P_gpio->Mode=mode;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	605a      	str	r2, [r3, #4]
	P_gpio->Pin=pin;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	601a      	str	r2, [r3, #0]
	P_gpio->Pull=pull;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	609a      	str	r2, [r3, #8]
	P_gpio->Speed=speed;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	60da      	str	r2, [r3, #12]
}
 80072fe:	bf00      	nop
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr

08007308 <GPIO_Config_Params_AF>:

 void GPIO_Config_Params_AF(GPIO_InitTypeDef * P_gpio, u32 mode,u32 pin,u32 pull,u32 speed, u32 alternate)
 {
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
	 P_gpio->Mode=mode;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	605a      	str	r2, [r3, #4]
	 P_gpio->Pin=pin;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
	 P_gpio->Pull=pull;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	609a      	str	r2, [r3, #8]
	 P_gpio->Speed=speed;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	60da      	str	r2, [r3, #12]
	 P_gpio->Alternate=alternate;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	611a      	str	r2, [r3, #16]
 }
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	bc80      	pop	{r7}
 800733c:	4770      	bx	lr

0800733e <Error_Handler>:
#include "UART.h"
#include "RST.h"


 void Error_Handler(void)
 {
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
	u32 inx = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	607b      	str	r3, [r7, #4]

 	//while(1)
 	//{
 		inx++;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3301      	adds	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 	//}
 }
 800734e:	bf00      	nop
 8007350:	370c      	adds	r7, #12
 8007352:	46bd      	mov	sp, r7
 8007354:	bc80      	pop	{r7}
 8007356:	4770      	bx	lr

08007358 <Disable_Interrupts>:

 void  Disable_Interrupts(void)
 {
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);//TMR6//
 800735c:	2036      	movs	r0, #54	; 0x36
 800735e:	f7fb fb4c 	bl	80029fa <HAL_NVIC_DisableIRQ>
 }
 8007362:	bf00      	nop
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <Disable_Per_Clocks>:

void Disable_Per_Clocks(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_DISABLE();
 800736c:	4b28      	ldr	r3, [pc, #160]	; (8007410 <Disable_Per_Clocks+0xa8>)
 800736e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <Disable_Per_Clocks+0xa8>)
 8007372:	f023 0301 	bic.w	r3, r3, #1
 8007376:	6493      	str	r3, [r2, #72]	; 0x48

	__HAL_RCC_GPIOA_CLK_DISABLE();
 8007378:	4b25      	ldr	r3, [pc, #148]	; (8007410 <Disable_Per_Clocks+0xa8>)
 800737a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737c:	4a24      	ldr	r2, [pc, #144]	; (8007410 <Disable_Per_Clocks+0xa8>)
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8007384:	4b22      	ldr	r3, [pc, #136]	; (8007410 <Disable_Per_Clocks+0xa8>)
 8007386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <Disable_Per_Clocks+0xa8>)
 800738a:	f023 0302 	bic.w	r3, r3, #2
 800738e:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8007390:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <Disable_Per_Clocks+0xa8>)
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	4a1e      	ldr	r2, [pc, #120]	; (8007410 <Disable_Per_Clocks+0xa8>)
 8007396:	f023 0304 	bic.w	r3, r3, #4
 800739a:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800739c:	4b1c      	ldr	r3, [pc, #112]	; (8007410 <Disable_Per_Clocks+0xa8>)
 800739e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a0:	4a1b      	ldr	r2, [pc, #108]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073a2:	f023 0308 	bic.w	r3, r3, #8
 80073a6:	64d3      	str	r3, [r2, #76]	; 0x4c

	__HAL_RCC_USART1_CLK_DISABLE();
 80073a8:	4b19      	ldr	r3, [pc, #100]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	4a18      	ldr	r2, [pc, #96]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073b2:	6613      	str	r3, [r2, #96]	; 0x60

	 __HAL_RCC_TIM2_CLK_DISABLE();
 80073b4:	4b16      	ldr	r3, [pc, #88]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	6593      	str	r3, [r2, #88]	; 0x58
	 __HAL_RCC_TIM6_CLK_DISABLE();
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c4:	4a12      	ldr	r2, [pc, #72]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073c6:	f023 0310 	bic.w	r3, r3, #16
 80073ca:	6593      	str	r3, [r2, #88]	; 0x58
	 __HAL_RCC_TIM7_CLK_DISABLE();
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073d2:	f023 0320 	bic.w	r3, r3, #32
 80073d6:	6593      	str	r3, [r2, #88]	; 0x58
	 __HAL_RCC_TIM16_CLK_DISABLE();
 80073d8:	4b0d      	ldr	r3, [pc, #52]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073dc:	4a0c      	ldr	r2, [pc, #48]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80073e2:	6613      	str	r3, [r2, #96]	; 0x60

	 __HAL_RCC_SPI2_CLK_DISABLE();
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	4a09      	ldr	r2, [pc, #36]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ee:	6593      	str	r3, [r2, #88]	; 0x58

	 __HAL_RCC_SYSCFG_CLK_DISABLE();
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f4:	4a06      	ldr	r2, [pc, #24]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073f6:	f023 0301 	bic.w	r3, r3, #1
 80073fa:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_PWR_CLK_DISABLE();
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <Disable_Per_Clocks+0xa8>)
 80073fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007400:	4a03      	ldr	r2, [pc, #12]	; (8007410 <Disable_Per_Clocks+0xa8>)
 8007402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007406:	6593      	str	r3, [r2, #88]	; 0x58
}
 8007408:	bf00      	nop
 800740a:	46bd      	mov	sp, r7
 800740c:	bc80      	pop	{r7}
 800740e:	4770      	bx	lr
 8007410:	40021000 	.word	0x40021000

08007414 <GPIO_Init>:

void GPIO_Init(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStructure = {'\0'};
 800741a:	1d3b      	adds	r3, r7, #4
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	609a      	str	r2, [r3, #8]
 8007424:	60da      	str	r2, [r3, #12]
 8007426:	611a      	str	r2, [r3, #16]

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_FLASH_RESET , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007428:	1d38      	adds	r0, r7, #4
 800742a:	2300      	movs	r3, #0
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	2300      	movs	r3, #0
 8007430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007434:	2101      	movs	r1, #1
 8007436:	f7ff ff4f 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_FLASH_RESET, &GPIO_InitStructure);
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	4619      	mov	r1, r3
 800743e:	482d      	ldr	r0, [pc, #180]	; (80074f4 <GPIO_Init+0xe0>)
 8007440:	f7fc f8d6 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_FLASH_RESET, IO_PIN_FLASH_RESET, GPIO_PIN_SET);
 8007444:	2201      	movs	r2, #1
 8007446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800744a:	482a      	ldr	r0, [pc, #168]	; (80074f4 <GPIO_Init+0xe0>)
 800744c:	f7fc fb43 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_FLASH_WP , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007450:	1d38      	adds	r0, r7, #4
 8007452:	2300      	movs	r3, #0
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	2300      	movs	r3, #0
 8007458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800745c:	2101      	movs	r1, #1
 800745e:	f7ff ff3b 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_FLASH_WP, &GPIO_InitStructure);
 8007462:	1d3b      	adds	r3, r7, #4
 8007464:	4619      	mov	r1, r3
 8007466:	4823      	ldr	r0, [pc, #140]	; (80074f4 <GPIO_Init+0xe0>)
 8007468:	f7fc f8c2 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_FLASH_WP, IO_PIN_FLASH_WP, GPIO_PIN_SET);
 800746c:	2201      	movs	r2, #1
 800746e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007472:	4820      	ldr	r0, [pc, #128]	; (80074f4 <GPIO_Init+0xe0>)
 8007474:	f7fc fb2f 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_FLASH_SPI_CLK , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007478:	1d38      	adds	r0, r7, #4
 800747a:	2300      	movs	r3, #0
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007484:	2101      	movs	r1, #1
 8007486:	f7ff ff27 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_CLK, &GPIO_InitStructure);
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	4619      	mov	r1, r3
 800748e:	481a      	ldr	r0, [pc, #104]	; (80074f8 <GPIO_Init+0xe4>)
 8007490:	f7fc f8ae 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_FLASH_SPI_CLK, IO_PIN_FLASH_SPI_CLK, GPIO_PIN_SET);
 8007494:	2201      	movs	r2, #1
 8007496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800749a:	4817      	ldr	r0, [pc, #92]	; (80074f8 <GPIO_Init+0xe4>)
 800749c:	f7fc fb1b 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_FLASH_SPI_MOSI , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80074a0:	1d38      	adds	r0, r7, #4
 80074a2:	2300      	movs	r3, #0
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	2300      	movs	r3, #0
 80074a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80074ac:	2101      	movs	r1, #1
 80074ae:	f7ff ff13 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_MOSI, &GPIO_InitStructure);
 80074b2:	1d3b      	adds	r3, r7, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4810      	ldr	r0, [pc, #64]	; (80074f8 <GPIO_Init+0xe4>)
 80074b8:	f7fc f89a 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_FLASH_SPI_MOSI, IO_PIN_FLASH_SPI_MOSI, GPIO_PIN_SET);
 80074bc:	2201      	movs	r2, #1
 80074be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074c2:	480d      	ldr	r0, [pc, #52]	; (80074f8 <GPIO_Init+0xe4>)
 80074c4:	f7fc fb07 	bl	8003ad6 <HAL_GPIO_WritePin>

	// ???????????????
	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_LNA , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80074c8:	1d38      	adds	r0, r7, #4
 80074ca:	2300      	movs	r3, #0
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	2240      	movs	r2, #64	; 0x40
 80074d2:	2101      	movs	r1, #1
 80074d4:	f7ff ff00 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_LNA, &GPIO_InitStructure);
 80074d8:	1d3b      	adds	r3, r7, #4
 80074da:	4619      	mov	r1, r3
 80074dc:	4806      	ldr	r0, [pc, #24]	; (80074f8 <GPIO_Init+0xe4>)
 80074de:	f7fc f887 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_LNA, IO_PIN_LNA, GPIO_PIN_RESET);
 80074e2:	2200      	movs	r2, #0
 80074e4:	2140      	movs	r1, #64	; 0x40
 80074e6:	4804      	ldr	r0, [pc, #16]	; (80074f8 <GPIO_Init+0xe4>)
 80074e8:	f7fc faf5 	bl	8003ad6 <HAL_GPIO_WritePin>


}
 80074ec:	bf00      	nop
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	48000c00 	.word	0x48000c00
 80074f8:	48000400 	.word	0x48000400

080074fc <Enable_GPIO_Clocks>:

void Enable_GPIO_Clocks(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b089      	sub	sp, #36	; 0x24
 8007500:	af00      	add	r7, sp, #0
	__HAL_RCC_PWR_CLK_ENABLE();
 8007502:	4b44      	ldr	r3, [pc, #272]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	4a43      	ldr	r2, [pc, #268]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800750c:	6593      	str	r3, [r2, #88]	; 0x58
 800750e:	4b41      	ldr	r3, [pc, #260]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	69fb      	ldr	r3, [r7, #28]

	__HAL_RCC_DMA1_CLK_DISABLE();
 800751a:	4b3e      	ldr	r3, [pc, #248]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800751c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751e:	4a3d      	ldr	r2, [pc, #244]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	6493      	str	r3, [r2, #72]	; 0x48
	__HAL_RCC_DMA1_CLK_ENABLE();
 8007526:	4b3b      	ldr	r3, [pc, #236]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	4a3a      	ldr	r2, [pc, #232]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	6493      	str	r3, [r2, #72]	; 0x48
 8007532:	4b38      	ldr	r3, [pc, #224]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_DMA1_FORCE_RESET();
 800753e:	4b35      	ldr	r3, [pc, #212]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007542:	4a34      	ldr	r2, [pc, #208]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007544:	f043 0301 	orr.w	r3, r3, #1
 8007548:	6293      	str	r3, [r2, #40]	; 0x28
	__HAL_RCC_DMA1_RELEASE_RESET();
 800754a:	4b32      	ldr	r3, [pc, #200]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	4a31      	ldr	r2, [pc, #196]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	6293      	str	r3, [r2, #40]	; 0x28

	__HAL_RCC_GPIOA_CLK_DISABLE();
 8007556:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755a:	4a2e      	ldr	r2, [pc, #184]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800755c:	f023 0301 	bic.w	r3, r3, #1
 8007560:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8007562:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007566:	4a2b      	ldr	r2, [pc, #172]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007568:	f023 0302 	bic.w	r3, r3, #2
 800756c:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800756e:	4b29      	ldr	r3, [pc, #164]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007572:	4a28      	ldr	r2, [pc, #160]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007574:	f023 0304 	bic.w	r3, r3, #4
 8007578:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 800757a:	4b26      	ldr	r3, [pc, #152]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800757c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757e:	4a25      	ldr	r2, [pc, #148]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007580:	f023 0308 	bic.w	r3, r3, #8
 8007584:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8007586:	4b23      	ldr	r3, [pc, #140]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758a:	4a22      	ldr	r2, [pc, #136]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 800758c:	f023 0310 	bic.w	r3, r3, #16
 8007590:	64d3      	str	r3, [r2, #76]	; 0x4c
	
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007592:	4b20      	ldr	r3, [pc, #128]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007596:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800759e:	4b1d      	ldr	r3, [pc, #116]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80075aa:	4b1a      	ldr	r3, [pc, #104]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ae:	4a19      	ldr	r2, [pc, #100]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075b6:	4b17      	ldr	r3, [pc, #92]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c6:	4a13      	ldr	r2, [pc, #76]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075ce:	4b11      	ldr	r3, [pc, #68]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	60fb      	str	r3, [r7, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80075da:	4b0e      	ldr	r3, [pc, #56]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075de:	4a0d      	ldr	r2, [pc, #52]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075e0:	f043 0308 	orr.w	r3, r3, #8
 80075e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075e6:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	60bb      	str	r3, [r7, #8]
 80075f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075f6:	4a07      	ldr	r2, [pc, #28]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 80075f8:	f043 0310 	orr.w	r3, r3, #16
 80075fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <Enable_GPIO_Clocks+0x118>)
 8007600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
}
 800760a:	bf00      	nop
 800760c:	3724      	adds	r7, #36	; 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr
 8007614:	40021000 	.word	0x40021000

08007618 <Regulator_Init>:

void Regulator_Init(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef  GPIO_InitStruct = {'\0'};
 800761e:	1d3b      	adds	r3, r7, #4
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	605a      	str	r2, [r3, #4]
 8007626:	609a      	str	r2, [r3, #8]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	611a      	str	r2, [r3, #16]

	// regulator is closed on default
	GPIO_Config_Params(&GPIO_InitStruct, GPIO_MODE_OUTPUT_PP, IO_PIN_DC_REG_EN , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 800762c:	1d38      	adds	r0, r7, #4
 800762e:	2300      	movs	r3, #0
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	2300      	movs	r3, #0
 8007634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007638:	2101      	movs	r1, #1
 800763a:	f7ff fe4d 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_DC_REG_EN, &GPIO_InitStruct);
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	4619      	mov	r1, r3
 8007642:	4806      	ldr	r0, [pc, #24]	; (800765c <Regulator_Init+0x44>)
 8007644:	f7fb ffd4 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_DC_REG_EN, IO_PIN_DC_REG_EN, GPIO_PIN_SET);
 8007648:	2201      	movs	r2, #1
 800764a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800764e:	4803      	ldr	r0, [pc, #12]	; (800765c <Regulator_Init+0x44>)
 8007650:	f7fc fa41 	bl	8003ad6 <HAL_GPIO_WritePin>
}
 8007654:	bf00      	nop
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}
 800765c:	48000800 	.word	0x48000800

08007660 <Regulator_DeInit>:

void Regulator_DeInit(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b088      	sub	sp, #32
 8007664:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef  GPIO_InitStruct = {'\0'};
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	605a      	str	r2, [r3, #4]
 800766e:	609a      	str	r2, [r3, #8]
 8007670:	60da      	str	r2, [r3, #12]
 8007672:	611a      	str	r2, [r3, #16]

	// regulator is closed on default
	GPIO_Config_Params(&GPIO_InitStruct, GPIO_MODE_OUTPUT_PP, IO_PIN_DC_REG_EN , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007674:	1d38      	adds	r0, r7, #4
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	2300      	movs	r3, #0
 800767c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007680:	2101      	movs	r1, #1
 8007682:	f7ff fe29 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_DC_REG_EN, &GPIO_InitStruct);
 8007686:	1d3b      	adds	r3, r7, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4806      	ldr	r0, [pc, #24]	; (80076a4 <Regulator_DeInit+0x44>)
 800768c:	f7fb ffb0 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_DC_REG_EN, IO_PIN_DC_REG_EN, GPIO_PIN_RESET);
 8007690:	2200      	movs	r2, #0
 8007692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007696:	4803      	ldr	r0, [pc, #12]	; (80076a4 <Regulator_DeInit+0x44>)
 8007698:	f7fc fa1d 	bl	8003ad6 <HAL_GPIO_WritePin>
}
 800769c:	bf00      	nop
 800769e:	3718      	adds	r7, #24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	48000800 	.word	0x48000800

080076a8 <GPS_GPIO_Close>:

void GPS_GPIO_Close(void)
 {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b088      	sub	sp, #32
 80076ac:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStructure = {'\0'};
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	605a      	str	r2, [r3, #4]
 80076b6:	609a      	str	r2, [r3, #8]
 80076b8:	60da      	str	r2, [r3, #12]
 80076ba:	611a      	str	r2, [r3, #16]

	GPIO_Config_Params(&GPIO_InitStructure, GPIO_MODE_OUTPUT_PP, IO_PIN_GPS_STANDBY , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80076bc:	1d38      	adds	r0, r7, #4
 80076be:	2300      	movs	r3, #0
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2300      	movs	r3, #0
 80076c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c8:	2101      	movs	r1, #1
 80076ca:	f7ff fe05 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_GPS_STANDBY, &GPIO_InitStructure);
 80076ce:	1d3b      	adds	r3, r7, #4
 80076d0:	4619      	mov	r1, r3
 80076d2:	4806      	ldr	r0, [pc, #24]	; (80076ec <GPS_GPIO_Close+0x44>)
 80076d4:	f7fb ff8c 	bl	80035f0 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(IO_PORT_GPS_STANDBY, IO_PIN_GPS_STANDBY, GPIO_PIN_SET);
 80076d8:	2201      	movs	r2, #1
 80076da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076de:	4803      	ldr	r0, [pc, #12]	; (80076ec <GPS_GPIO_Close+0x44>)
 80076e0:	f7fc f9f9 	bl	8003ad6 <HAL_GPIO_WritePin>
 }
 80076e4:	bf00      	nop
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	48000800 	.word	0x48000800

080076f0 <DeInit_Peripherals>:


void  DeInit_Peripherals(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
	#ifdef UART_DEBUG
	USART1_DeInit();
 80076f4:	f000 fd72 	bl	80081dc <USART1_DeInit>
	#endif


	SPI2_DeInit();
 80076f8:	f000 fa34 	bl	8007b64 <SPI2_DeInit>
	
	TMR7_DeInit();
 80076fc:	f000 fcd8 	bl	80080b0 <TMR7_DeInit>
	TMR6_DeInit();
 8007700:	f000 fcb8 	bl	8008074 <TMR6_DeInit>
	TMR2_DeInit();
 8007704:	f000 fcc0 	bl	8008088 <TMR2_DeInit>
	TMR16_DeInit();
 8007708:	f000 fcc8 	bl	800809c <TMR16_DeInit>

	GPIOB->MODER = 0xFFFFFFDF;
 800770c:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <DeInit_Peripherals+0x98>)
 800770e:	f06f 0220 	mvn.w	r2, #32
 8007712:	601a      	str	r2, [r3, #0]
	GPIOC->MODER = 0xFFFFFFFF;
 8007714:	4b1d      	ldr	r3, [pc, #116]	; (800778c <DeInit_Peripherals+0x9c>)
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	601a      	str	r2, [r3, #0]
	GPIOD->MODER = 0xFFFFFFFF;
 800771c:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <DeInit_Peripherals+0xa0>)
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	601a      	str	r2, [r3, #0]
	//GPIOE->MODER = 0xFFFFFFFF;
	GPIOE->MODER = 0xFDFFFFFF;	// charger enable need to be output PE12
 8007724:	4b1b      	ldr	r3, [pc, #108]	; (8007794 <DeInit_Peripherals+0xa4>)
 8007726:	f06f 7200 	mvn.w	r2, #33554432	; 0x2000000
 800772a:	601a      	str	r2, [r3, #0]

	// This line disconnect jtag
	// GPIOA->MODER = 0xFFFFFFFF;

	GPIO_Init();
 800772c:	f7ff fe72 	bl	8007414 <GPIO_Init>

	__HAL_RCC_GPIOB_CLK_DISABLE();
 8007730:	4b19      	ldr	r3, [pc, #100]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007734:	4a18      	ldr	r2, [pc, #96]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007736:	f023 0302 	bic.w	r3, r3, #2
 800773a:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800773c:	4b16      	ldr	r3, [pc, #88]	; (8007798 <DeInit_Peripherals+0xa8>)
 800773e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007740:	4a15      	ldr	r2, [pc, #84]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007742:	f023 0304 	bic.w	r3, r3, #4
 8007746:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOD_CLK_DISABLE();
 8007748:	4b13      	ldr	r3, [pc, #76]	; (8007798 <DeInit_Peripherals+0xa8>)
 800774a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774c:	4a12      	ldr	r2, [pc, #72]	; (8007798 <DeInit_Peripherals+0xa8>)
 800774e:	f023 0308 	bic.w	r3, r3, #8
 8007752:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8007754:	4b10      	ldr	r3, [pc, #64]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007758:	4a0f      	ldr	r2, [pc, #60]	; (8007798 <DeInit_Peripherals+0xa8>)
 800775a:	f023 0310 	bic.w	r3, r3, #16
 800775e:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8007760:	4b0d      	ldr	r3, [pc, #52]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	4a0c      	ldr	r2, [pc, #48]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007766:	f023 0301 	bic.w	r3, r3, #1
 800776a:	64d3      	str	r3, [r2, #76]	; 0x4c

	__HAL_RCC_ADC_CLK_DISABLE();
 800776c:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <DeInit_Peripherals+0xa8>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007770:	4a09      	ldr	r2, [pc, #36]	; (8007798 <DeInit_Peripherals+0xa8>)
 8007772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007776:	64d3      	str	r3, [r2, #76]	; 0x4c
	__HAL_RCC_DMA1_CLK_DISABLE();
 8007778:	4b07      	ldr	r3, [pc, #28]	; (8007798 <DeInit_Peripherals+0xa8>)
 800777a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800777c:	4a06      	ldr	r2, [pc, #24]	; (8007798 <DeInit_Peripherals+0xa8>)
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	6493      	str	r3, [r2, #72]	; 0x48
}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}
 8007788:	48000400 	.word	0x48000400
 800778c:	48000800 	.word	0x48000800
 8007790:	48000c00 	.word	0x48000c00
 8007794:	48001000 	.word	0x48001000
 8007798:	40021000 	.word	0x40021000

0800779c <GPIO_Temperature>:

void GPIO_Temperature(unsigned char enabled)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef  GPIO_InitStruct = {'\0'};
 80077a6:	f107 030c 	add.w	r3, r7, #12
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	605a      	str	r2, [r3, #4]
 80077b0:	609a      	str	r2, [r3, #8]
 80077b2:	60da      	str	r2, [r3, #12]
 80077b4:	611a      	str	r2, [r3, #16]

	// regulator is closed on default
	GPIO_Config_Params(&GPIO_InitStruct, GPIO_MODE_OUTPUT_PP, IO_PIN_BATTERY_TEMP_EN , GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 80077b6:	f107 000c 	add.w	r0, r7, #12
 80077ba:	2300      	movs	r3, #0
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80077c4:	2101      	movs	r1, #1
 80077c6:	f7ff fd87 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_BATTERY_TEMP_EN, &GPIO_InitStruct);
 80077ca:	f107 030c 	add.w	r3, r7, #12
 80077ce:	4619      	mov	r1, r3
 80077d0:	480b      	ldr	r0, [pc, #44]	; (8007800 <GPIO_Temperature+0x64>)
 80077d2:	f7fb ff0d 	bl	80035f0 <HAL_GPIO_Init>

	if (enabled)
 80077d6:	79fb      	ldrb	r3, [r7, #7]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d006      	beq.n	80077ea <GPIO_Temperature+0x4e>
		HAL_GPIO_WritePin(IO_PORT_BATTERY_TEMP_EN, IO_PIN_BATTERY_TEMP_EN, GPIO_PIN_SET);
 80077dc:	2201      	movs	r2, #1
 80077de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077e2:	4807      	ldr	r0, [pc, #28]	; (8007800 <GPIO_Temperature+0x64>)
 80077e4:	f7fc f977 	bl	8003ad6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(IO_PORT_BATTERY_TEMP_EN, IO_PIN_BATTERY_TEMP_EN, GPIO_PIN_RESET);
}
 80077e8:	e005      	b.n	80077f6 <GPIO_Temperature+0x5a>
		HAL_GPIO_WritePin(IO_PORT_BATTERY_TEMP_EN, IO_PIN_BATTERY_TEMP_EN, GPIO_PIN_RESET);
 80077ea:	2200      	movs	r2, #0
 80077ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077f0:	4803      	ldr	r0, [pc, #12]	; (8007800 <GPIO_Temperature+0x64>)
 80077f2:	f7fc f970 	bl	8003ad6 <HAL_GPIO_WritePin>
}
 80077f6:	bf00      	nop
 80077f8:	3720      	adds	r7, #32
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	48000c00 	.word	0x48000c00

08007804 <RTC_WkUp_Init>:
unsigned rtc_count = 0;



HAL_StatusTypeDef RTC_WkUp_Init(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	71fb      	strb	r3, [r7, #7]

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);	
 800780e:	2003      	movs	r0, #3
 8007810:	f7fb f8f3 	bl	80029fa <HAL_NVIC_DisableIRQ>
	
	if (HAL_RTCEx_SetWakeUpTimer_IT(&I_RtcHandle, TICKS_IN_SECONDS*(RTC_WAKEUP_INTERRUPT), RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007814:	2200      	movs	r2, #0
 8007816:	f644 6120 	movw	r1, #20000	; 0x4e20
 800781a:	480b      	ldr	r0, [pc, #44]	; (8007848 <RTC_WkUp_Init+0x44>)
 800781c:	f7fd fae0 	bl	8004de0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <RTC_WkUp_Init+0x2a>
	{
	  	status = Error_Handler();
 8007826:	f7ff fd8a 	bl	800733e <Error_Handler>
 800782a:	4603      	mov	r3, r0
 800782c:	71fb      	strb	r3, [r7, #7]
	}
	
	HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 800782e:	2200      	movs	r2, #0
 8007830:	210f      	movs	r1, #15
 8007832:	2003      	movs	r0, #3
 8007834:	f7fb f8b7 	bl	80029a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8007838:	2003      	movs	r0, #3
 800783a:	f7fb f8d0 	bl	80029de <HAL_NVIC_EnableIRQ>
	
	return status;
 800783e:	79fb      	ldrb	r3, [r7, #7]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	2000058c 	.word	0x2000058c

0800784c <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
	HAL_RTCEx_WakeUpTimerIRQHandler(&I_RtcHandle);
 8007850:	4802      	ldr	r0, [pc, #8]	; (800785c <RTC_WKUP_IRQHandler+0x10>)
 8007852:	f7fd fb79 	bl	8004f48 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8007856:	bf00      	nop
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	2000058c 	.word	0x2000058c

08007860 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
	rtc_count++;
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	4a03      	ldr	r2, [pc, #12]	; (800787c <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 8007870:	6013      	str	r3, [r2, #0]
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr
 800787c:	200005b0 	.word	0x200005b0

08007880 <RTC_Init>:


HAL_StatusTypeDef  RTC_Init(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b098      	sub	sp, #96	; 0x60
 8007884:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	RTC_TimeTypeDef IL_RTCTime = {'\0'};
 800788c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	609a      	str	r2, [r3, #8]
 8007898:	60da      	str	r2, [r3, #12]
 800789a:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef IL_RTCDate = {'\0'};
 800789c:	2300      	movs	r3, #0
 800789e:	647b      	str	r3, [r7, #68]	; 0x44

	__HAL_RCC_RTC_DISABLE();
 80078a0:	4b3a      	ldr	r3, [pc, #232]	; (800798c <RTC_Init+0x10c>)
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a6:	4a39      	ldr	r2, [pc, #228]	; (800798c <RTC_Init+0x10c>)
 80078a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_RTC_ENABLE();
 80078b0:	4b36      	ldr	r3, [pc, #216]	; (800798c <RTC_Init+0x10c>)
 80078b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078b6:	4a35      	ldr	r2, [pc, #212]	; (800798c <RTC_Init+0x10c>)
 80078b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90


	RCC_OscInitTypeDef RCC_OscInitLSE;

	RCC_OscInitLSE.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80078c0:	2304      	movs	r3, #4
 80078c2:	603b      	str	r3, [r7, #0]
	RCC_OscInitLSE.LSEState = RCC_LSE_ON;
 80078c4:	2301      	movs	r3, #1
 80078c6:	60bb      	str	r3, [r7, #8]

	if (HAL_RCC_OscConfig(&RCC_OscInitLSE) != HAL_OK)
 80078c8:	463b      	mov	r3, r7
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fc fa30 	bl	8003d30 <HAL_RCC_OscConfig>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d004      	beq.n	80078e0 <RTC_Init+0x60>
	{
		status = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Error_Handler();
 80078dc:	f7ff fd2f 	bl	800733e <Error_Handler>
	}

	HAL_PWR_EnableBkUpAccess();
 80078e0:	f7fc f988 	bl	8003bf4 <HAL_PWR_EnableBkUpAccess>

	// pick LSE as source for RTC
	RCC->BDCR &= ~(RCC_BDCR_RTCSEL_0|RCC_BDCR_RTCSEL_1);
 80078e4:	4b29      	ldr	r3, [pc, #164]	; (800798c <RTC_Init+0x10c>)
 80078e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ea:	4a28      	ldr	r2, [pc, #160]	; (800798c <RTC_Init+0x10c>)
 80078ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->BDCR |= (RCC_BDCR_RTCEN);
 80078f4:	4b25      	ldr	r3, [pc, #148]	; (800798c <RTC_Init+0x10c>)
 80078f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078fa:	4a24      	ldr	r2, [pc, #144]	; (800798c <RTC_Init+0x10c>)
 80078fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->BDCR |= (RCC_BDCR_RTCSEL_0);
 8007904:	4b21      	ldr	r3, [pc, #132]	; (800798c <RTC_Init+0x10c>)
 8007906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790a:	4a20      	ldr	r2, [pc, #128]	; (800798c <RTC_Init+0x10c>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	TMR2_Sleep(10);
 8007914:	200a      	movs	r0, #10
 8007916:	f000 fa5e 	bl	8007dd6 <TMR2_Sleep>

	I_RtcHandle.Instance = RTC;
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <RTC_Init+0x110>)
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <RTC_Init+0x114>)
 800791e:	601a      	str	r2, [r3, #0]

	 
	if ( HAL_RTC_DeInit(&I_RtcHandle) != HAL_OK)
 8007920:	481b      	ldr	r0, [pc, #108]	; (8007990 <RTC_Init+0x110>)
 8007922:	f7fd f949 	bl	8004bb8 <HAL_RTC_DeInit>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <RTC_Init+0xb6>
	{
		status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Error_Handler();
 8007932:	f7ff fd04 	bl	800733e <Error_Handler>
	}

	   
	I_RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <RTC_Init+0x110>)
 8007938:	2200      	movs	r2, #0
 800793a:	605a      	str	r2, [r3, #4]
	I_RtcHandle.Init.AsynchPrediv = 127;
 800793c:	4b14      	ldr	r3, [pc, #80]	; (8007990 <RTC_Init+0x110>)
 800793e:	227f      	movs	r2, #127	; 0x7f
 8007940:	609a      	str	r2, [r3, #8]
	I_RtcHandle.Init.SynchPrediv = 255;
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <RTC_Init+0x110>)
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	60da      	str	r2, [r3, #12]
	I_RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007948:	4b11      	ldr	r3, [pc, #68]	; (8007990 <RTC_Init+0x110>)
 800794a:	2200      	movs	r2, #0
 800794c:	611a      	str	r2, [r3, #16]
	I_RtcHandle.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <RTC_Init+0x110>)
 8007950:	2200      	movs	r2, #0
 8007952:	615a      	str	r2, [r3, #20]
	I_RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <RTC_Init+0x110>)
 8007956:	2200      	movs	r2, #0
 8007958:	619a      	str	r2, [r3, #24]
	I_RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <RTC_Init+0x110>)
 800795c:	2200      	movs	r2, #0
 800795e:	61da      	str	r2, [r3, #28]
	 
	if ( HAL_RTC_Init(&I_RtcHandle) != HAL_OK)
 8007960:	480b      	ldr	r0, [pc, #44]	; (8007990 <RTC_Init+0x110>)
 8007962:	f7fd f8a5 	bl	8004ab0 <HAL_RTC_Init>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d004      	beq.n	8007976 <RTC_Init+0xf6>
	{
		status = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Error_Handler();
 8007972:	f7ff fce4 	bl	800733e <Error_Handler>
	}
	 
	status = RTC_WkUp_Init();
 8007976:	f7ff ff45 	bl	8007804 <RTC_WkUp_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}
	*/

	// HAL_PWR_DisableBkUpAccess();

	return status;
 8007980:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 }
 8007984:	4618      	mov	r0, r3
 8007986:	3760      	adds	r7, #96	; 0x60
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40021000 	.word	0x40021000
 8007990:	2000058c 	.word	0x2000058c
 8007994:	40002800 	.word	0x40002800

08007998 <SPI2_Init>:
#include "SPI.h"

SPI_HandleTypeDef SPI2_Handle = {'\0'};

void SPI2_Init(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	; 0x28
 800799c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef  GPIO_InitStruct = {'\0'};
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	605a      	str	r2, [r3, #4]
 80079a8:	609a      	str	r2, [r3, #8]
 80079aa:	60da      	str	r2, [r3, #12]
 80079ac:	611a      	str	r2, [r3, #16]

	__HAL_RCC_SPI2_CLK_DISABLE();
 80079ae:	4b69      	ldr	r3, [pc, #420]	; (8007b54 <SPI2_Init+0x1bc>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	4a68      	ldr	r2, [pc, #416]	; (8007b54 <SPI2_Init+0x1bc>)
 80079b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b8:	6593      	str	r3, [r2, #88]	; 0x58
	__HAL_RCC_SPI2_CLK_ENABLE();
 80079ba:	4b66      	ldr	r3, [pc, #408]	; (8007b54 <SPI2_Init+0x1bc>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	4a65      	ldr	r2, [pc, #404]	; (8007b54 <SPI2_Init+0x1bc>)
 80079c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079c4:	6593      	str	r3, [r2, #88]	; 0x58
 80079c6:	4b63      	ldr	r3, [pc, #396]	; (8007b54 <SPI2_Init+0x1bc>)
 80079c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ce:	60bb      	str	r3, [r7, #8]
 80079d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_SPI2_FORCE_RESET();
 80079d2:	4b60      	ldr	r3, [pc, #384]	; (8007b54 <SPI2_Init+0x1bc>)
 80079d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d6:	4a5f      	ldr	r2, [pc, #380]	; (8007b54 <SPI2_Init+0x1bc>)
 80079d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079dc:	6393      	str	r3, [r2, #56]	; 0x38
	__HAL_RCC_SPI2_RELEASE_RESET();
 80079de:	4b5d      	ldr	r3, [pc, #372]	; (8007b54 <SPI2_Init+0x1bc>)
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	4a5c      	ldr	r2, [pc, #368]	; (8007b54 <SPI2_Init+0x1bc>)
 80079e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079e8:	6393      	str	r3, [r2, #56]	; 0x38

	SPI2_Handle.Instance = SPI2;
 80079ea:	4b5b      	ldr	r3, [pc, #364]	; (8007b58 <SPI2_Init+0x1c0>)
 80079ec:	4a5b      	ldr	r2, [pc, #364]	; (8007b5c <SPI2_Init+0x1c4>)
 80079ee:	601a      	str	r2, [r3, #0]

	if(HAL_SPI_DeInit(&SPI2_Handle)  != HAL_OK)
 80079f0:	4859      	ldr	r0, [pc, #356]	; (8007b58 <SPI2_Init+0x1c0>)
 80079f2:	f7fd fb59 	bl	80050a8 <HAL_SPI_DeInit>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <SPI2_Init+0x68>
	{
		Error_Handler();
 80079fc:	f7ff fc9f 	bl	800733e <Error_Handler>
	}

	SPI2_Handle.Init.BaudRatePrescaler=SPI_BAUDRATEPRESCALER_2;
 8007a00:	4b55      	ldr	r3, [pc, #340]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	61da      	str	r2, [r3, #28]
	SPI2_Handle.Init.CLKPhase=SPI_PHASE_2EDGE;
 8007a06:	4b54      	ldr	r3, [pc, #336]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	615a      	str	r2, [r3, #20]
	SPI2_Handle.Init.CLKPolarity=SPI_POLARITY_HIGH;
 8007a0c:	4b52      	ldr	r3, [pc, #328]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a0e:	2202      	movs	r2, #2
 8007a10:	611a      	str	r2, [r3, #16]
	SPI2_Handle.Init.CRCCalculation=SPI_CRCCALCULATION_DISABLE;
 8007a12:	4b51      	ldr	r3, [pc, #324]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28
	SPI2_Handle.Init.CRCLength=SPI_CRC_LENGTH_8BIT;
 8007a18:	4b4f      	ldr	r3, [pc, #316]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
	SPI2_Handle.Init.CRCPolynomial=7;
 8007a1e:	4b4e      	ldr	r3, [pc, #312]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	62da      	str	r2, [r3, #44]	; 0x2c
	SPI2_Handle.Init.DataSize=SPI_DATASIZE_8BIT;
 8007a24:	4b4c      	ldr	r3, [pc, #304]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007a2a:	60da      	str	r2, [r3, #12]
	SPI2_Handle.Init.Direction=SPI_DIRECTION_2LINES;
 8007a2c:	4b4a      	ldr	r3, [pc, #296]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
	SPI2_Handle.Init.FirstBit=SPI_FIRSTBIT_MSB;
 8007a32:	4b49      	ldr	r3, [pc, #292]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	621a      	str	r2, [r3, #32]
	SPI2_Handle.Init.Mode=SPI_MODE_MASTER;
 8007a38:	4b47      	ldr	r3, [pc, #284]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a3a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007a3e:	605a      	str	r2, [r3, #4]
	SPI2_Handle.Init.NSS=SPI_NSS_SOFT;
 8007a40:	4b45      	ldr	r3, [pc, #276]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a46:	619a      	str	r2, [r3, #24]
	SPI2_Handle.Init.NSSPMode=SPI_NSS_PULSE_DISABLE;
 8007a48:	4b43      	ldr	r3, [pc, #268]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	635a      	str	r2, [r3, #52]	; 0x34
	SPI2_Handle.Init.TIMode=SPI_TIMODE_DISABLE;
 8007a4e:	4b42      	ldr	r3, [pc, #264]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_SPI_Init(&SPI2_Handle) != HAL_OK)
 8007a54:	4840      	ldr	r0, [pc, #256]	; (8007b58 <SPI2_Init+0x1c0>)
 8007a56:	f7fd fa9d 	bl	8004f94 <HAL_SPI_Init>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <SPI2_Init+0xcc>
	{
	  	Error_Handler();
 8007a60:	f7ff fc6d 	bl	800733e <Error_Handler>
	}

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007a64:	4b3b      	ldr	r3, [pc, #236]	; (8007b54 <SPI2_Init+0x1bc>)
 8007a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a68:	4a3a      	ldr	r2, [pc, #232]	; (8007b54 <SPI2_Init+0x1bc>)
 8007a6a:	f043 0302 	orr.w	r3, r3, #2
 8007a6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a70:	4b38      	ldr	r3, [pc, #224]	; (8007b54 <SPI2_Init+0x1bc>)
 8007a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	607b      	str	r3, [r7, #4]
 8007a7a:	687b      	ldr	r3, [r7, #4]

	HAL_GPIO_DeInit(IO_PORT_FLASH_SPI_CS,IO_PIN_FLASH_SPI_CS);
 8007a7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007a80:	4837      	ldr	r0, [pc, #220]	; (8007b60 <SPI2_Init+0x1c8>)
 8007a82:	f7fb ff33 	bl	80038ec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(IO_PORT_FLASH_SPI_CLK,IO_PIN_FLASH_SPI_CLK);
 8007a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a8a:	4835      	ldr	r0, [pc, #212]	; (8007b60 <SPI2_Init+0x1c8>)
 8007a8c:	f7fb ff2e 	bl	80038ec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(IO_PORT_FLASH_SPI_MISO,IO_PIN_FLASH_SPI_MISO);
 8007a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a94:	4832      	ldr	r0, [pc, #200]	; (8007b60 <SPI2_Init+0x1c8>)
 8007a96:	f7fb ff29 	bl	80038ec <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(IO_PORT_FLASH_SPI_MOSI,IO_PIN_FLASH_SPI_MOSI);
 8007a9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a9e:	4830      	ldr	r0, [pc, #192]	; (8007b60 <SPI2_Init+0x1c8>)
 8007aa0:	f7fb ff24 	bl	80038ec <HAL_GPIO_DeInit>

	GPIO_Config_Params(&GPIO_InitStruct, GPIO_MODE_OUTPUT_PP, IO_PIN_FLASH_SPI_CS, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
 8007aa4:	f107 000c 	add.w	r0, r7, #12
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	2300      	movs	r3, #0
 8007aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	f7ff fc10 	bl	80072d8 <GPIO_Config_Params>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_CS, &GPIO_InitStruct);
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	4619      	mov	r1, r3
 8007abe:	4828      	ldr	r0, [pc, #160]	; (8007b60 <SPI2_Init+0x1c8>)
 8007ac0:	f7fb fd96 	bl	80035f0 <HAL_GPIO_Init>

	 HAL_GPIO_WritePin(IO_PORT_FLASH_SPI_CS, IO_PIN_FLASH_SPI_CS, GPIO_PIN_SET);
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007aca:	4825      	ldr	r0, [pc, #148]	; (8007b60 <SPI2_Init+0x1c8>)
 8007acc:	f7fc f803 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Config_Params_AF(&GPIO_InitStruct, GPIO_MODE_AF_PP, IO_PIN_FLASH_SPI_CLK, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF5_SPI2);
 8007ad0:	f107 000c 	add.w	r0, r7, #12
 8007ad4:	2305      	movs	r3, #5
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	2300      	movs	r3, #0
 8007ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ae2:	2102      	movs	r1, #2
 8007ae4:	f7ff fc10 	bl	8007308 <GPIO_Config_Params_AF>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_CLK, &GPIO_InitStruct);
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4619      	mov	r1, r3
 8007aee:	481c      	ldr	r0, [pc, #112]	; (8007b60 <SPI2_Init+0x1c8>)
 8007af0:	f7fb fd7e 	bl	80035f0 <HAL_GPIO_Init>

	GPIO_Config_Params_AF(&GPIO_InitStruct, GPIO_MODE_AF_PP, IO_PIN_FLASH_SPI_MISO, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF5_SPI2);
 8007af4:	f107 000c 	add.w	r0, r7, #12
 8007af8:	2305      	movs	r3, #5
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	2300      	movs	r3, #0
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b06:	2102      	movs	r1, #2
 8007b08:	f7ff fbfe 	bl	8007308 <GPIO_Config_Params_AF>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_MISO, &GPIO_InitStruct);
 8007b0c:	f107 030c 	add.w	r3, r7, #12
 8007b10:	4619      	mov	r1, r3
 8007b12:	4813      	ldr	r0, [pc, #76]	; (8007b60 <SPI2_Init+0x1c8>)
 8007b14:	f7fb fd6c 	bl	80035f0 <HAL_GPIO_Init>

	GPIO_Config_Params_AF(&GPIO_InitStruct, GPIO_MODE_AF_PP, IO_PIN_FLASH_SPI_MOSI, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF5_SPI2);
 8007b18:	f107 000c 	add.w	r0, r7, #12
 8007b1c:	2305      	movs	r3, #5
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	2300      	movs	r3, #0
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	2300      	movs	r3, #0
 8007b26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	f7ff fbec 	bl	8007308 <GPIO_Config_Params_AF>
	HAL_GPIO_Init(IO_PORT_FLASH_SPI_MOSI, &GPIO_InitStruct);
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	4619      	mov	r1, r3
 8007b36:	480a      	ldr	r0, [pc, #40]	; (8007b60 <SPI2_Init+0x1c8>)
 8007b38:	f7fb fd5a 	bl	80035f0 <HAL_GPIO_Init>

	SPI2_Handle.Instance->CR1 |= (1<<6);
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <SPI2_Init+0x1c0>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <SPI2_Init+0x1c0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b4a:	601a      	str	r2, [r3, #0]
}
 8007b4c:	bf00      	nop
 8007b4e:	3720      	adds	r7, #32
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	40021000 	.word	0x40021000
 8007b58:	200005b4 	.word	0x200005b4
 8007b5c:	40003800 	.word	0x40003800
 8007b60:	48000400 	.word	0x48000400

08007b64 <SPI2_DeInit>:

void SPI2_DeInit(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&SPI2_Handle);
 8007b68:	4802      	ldr	r0, [pc, #8]	; (8007b74 <SPI2_DeInit+0x10>)
 8007b6a:	f7fd fa9d 	bl	80050a8 <HAL_SPI_DeInit>
}
 8007b6e:	bf00      	nop
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	200005b4 	.word	0x200005b4

08007b78 <TMR7_Set>:
u8 ledFinished = 0;

extern u8 success_code;

void TMR7_Set(u16 micro_seconds)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	80fb      	strh	r3, [r7, #6]
	TIM7->CR1 &= (u16)~TIM_CR1_CEN;
 8007b82:	4b0f      	ldr	r3, [pc, #60]	; (8007bc0 <TMR7_Set+0x48>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	490e      	ldr	r1, [pc, #56]	; (8007bc0 <TMR7_Set+0x48>)
 8007b88:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	600b      	str	r3, [r1, #0]

	TIM7->CNT = 0;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <TMR7_Set+0x48>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	625a      	str	r2, [r3, #36]	; 0x24

	TIM7->ARR = (micro_seconds);
 8007b96:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <TMR7_Set+0x48>)
 8007b98:	88fb      	ldrh	r3, [r7, #6]
 8007b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

	TIM7->EGR |= TIM_EGR_UG;
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <TMR7_Set+0x48>)
 8007b9e:	695b      	ldr	r3, [r3, #20]
 8007ba0:	4a07      	ldr	r2, [pc, #28]	; (8007bc0 <TMR7_Set+0x48>)
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	6153      	str	r3, [r2, #20]

	TIM7->CR1 |= TIM_CR1_CEN;
 8007ba8:	4b05      	ldr	r3, [pc, #20]	; (8007bc0 <TMR7_Set+0x48>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <TMR7_Set+0x48>)
 8007bae:	f043 0301 	orr.w	r3, r3, #1
 8007bb2:	6013      	str	r3, [r2, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40001400 	.word	0x40001400

08007bc4 <TMR7_Sleep>:

void TMR7_Sleep (u16 micro_seconds)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	80fb      	strh	r3, [r7, #6]
	u32 inx = 0;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]

	TMR7_Set(micro_seconds);
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff ffcf 	bl	8007b78 <TMR7_Set>

	while((TIM7->CNT) < micro_seconds);
 8007bda:	bf00      	nop
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <TMR7_Sleep+0x30>)
 8007bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007be0:	88fb      	ldrh	r3, [r7, #6]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3fa      	bcc.n	8007bdc <TMR7_Sleep+0x18>
	{
		inx++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]
	}
}
 8007bec:	bf00      	nop
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40001400 	.word	0x40001400

08007bf8 <TMR7_Init>:

 //TMR 7 counter of 1 micro second//
 void TMR7_Init(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef	clkconfig = {'\0'};
 8007bfe:	f107 0308 	add.w	r3, r7, #8
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	609a      	str	r2, [r3, #8]
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	611a      	str	r2, [r3, #16]
	u32 timclock = 0U, APB1Prescaler = 0U, prescalerValue = 0U,	pFLatency = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
 8007c12:	2300      	movs	r3, #0
 8007c14:	623b      	str	r3, [r7, #32]
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]

	__HAL_RCC_TIM7_CLK_DISABLE();
 8007c1e:	4b23      	ldr	r3, [pc, #140]	; (8007cac <TMR7_Init+0xb4>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	4a22      	ldr	r2, [pc, #136]	; (8007cac <TMR7_Init+0xb4>)
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	6593      	str	r3, [r2, #88]	; 0x58
	__HAL_RCC_TIM7_CLK_ENABLE();
 8007c2a:	4b20      	ldr	r3, [pc, #128]	; (8007cac <TMR7_Init+0xb4>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <TMR7_Init+0xb4>)
 8007c30:	f043 0320 	orr.w	r3, r3, #32
 8007c34:	6593      	str	r3, [r2, #88]	; 0x58
 8007c36:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <TMR7_Init+0xb4>)
 8007c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	683b      	ldr	r3, [r7, #0]

	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007c42:	1d3a      	adds	r2, r7, #4
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fc fe9e 	bl	800498c <HAL_RCC_GetClockConfig>

	APB1Prescaler = clkconfig.APB1CLKDivider;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	623b      	str	r3, [r7, #32]

	if (APB1Prescaler == RCC_HCLK_DIV1)
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <TMR7_Init+0x6a>
	{
	timclock = HAL_RCC_GetPCLK1Freq();
 8007c5a:	f7fc fe53 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007c5e:	6278      	str	r0, [r7, #36]	; 0x24
 8007c60:	e004      	b.n	8007c6c <TMR7_Init+0x74>
	}
	else
	{
	timclock = (2 * HAL_RCC_GetPCLK1Freq());
 8007c62:	f7fc fe4f 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007c66:	4603      	mov	r3, r0
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	prescalerValue = (u32) ((timclock / 1000000U) - 1U);
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	4a10      	ldr	r2, [pc, #64]	; (8007cb0 <TMR7_Init+0xb8>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	0c9b      	lsrs	r3, r3, #18
 8007c76:	3b01      	subs	r3, #1
 8007c78:	61fb      	str	r3, [r7, #28]

	Tim7Handle.Instance = TIM7;
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	; (8007cb4 <TMR7_Init+0xbc>)
 8007c7c:	4a0e      	ldr	r2, [pc, #56]	; (8007cb8 <TMR7_Init+0xc0>)
 8007c7e:	601a      	str	r2, [r3, #0]
	Tim7Handle.Init.Prescaler = prescalerValue;
 8007c80:	4a0c      	ldr	r2, [pc, #48]	; (8007cb4 <TMR7_Init+0xbc>)
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	6053      	str	r3, [r2, #4]
	Tim7Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c86:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <TMR7_Init+0xbc>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	609a      	str	r2, [r3, #8]
	Tim7Handle.Init.Period = 0;
 8007c8c:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <TMR7_Init+0xbc>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_Base_Init(&Tim7Handle) != HAL_OK)
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <TMR7_Init+0xbc>)
 8007c94:	f7fd fa42 	bl	800511c <HAL_TIM_Base_Init>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <TMR7_Init+0xaa>
	{
		Error_Handler();
 8007c9e:	f7ff fb4e 	bl	800733e <Error_Handler>
	}
}
 8007ca2:	bf00      	nop
 8007ca4:	3728      	adds	r7, #40	; 0x28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	431bde83 	.word	0x431bde83
 8007cb4:	20000654 	.word	0x20000654
 8007cb8:	40001400 	.word	0x40001400

08007cbc <TMR2_Init>:
 
 //TMR 2 counter of 1 milli second//
ErrorStatus TMR2_Init(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b08a      	sub	sp, #40	; 0x28
 8007cc0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef	clkconfig = {'\0'};
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	60da      	str	r2, [r3, #12]
 8007cd0:	611a      	str	r2, [r3, #16]
	u32 timclock = 0U, APB1Prescaler = 0U, prescalerValue = 0U, pFLatency = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	623b      	str	r3, [r7, #32]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	607b      	str	r3, [r7, #4]

	__HAL_RCC_TIM2_CLK_DISABLE();
 8007ce2:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <TMR2_Init+0xb8>)
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce6:	4a23      	ldr	r2, [pc, #140]	; (8007d74 <TMR2_Init+0xb8>)
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	6593      	str	r3, [r2, #88]	; 0x58
	__HAL_RCC_TIM2_CLK_ENABLE();
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <TMR2_Init+0xb8>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	4a20      	ldr	r2, [pc, #128]	; (8007d74 <TMR2_Init+0xb8>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <TMR2_Init+0xb8>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	683b      	ldr	r3, [r7, #0]

	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007d06:	1d3a      	adds	r2, r7, #4
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4611      	mov	r1, r2
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fc fe3c 	bl	800498c <HAL_RCC_GetClockConfig>

	APB1Prescaler = clkconfig.APB1CLKDivider;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	623b      	str	r3, [r7, #32]

	if (APB1Prescaler == RCC_HCLK_DIV1)
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d103      	bne.n	8007d26 <TMR2_Init+0x6a>
	{
		timclock = HAL_RCC_GetPCLK1Freq();
 8007d1e:	f7fc fdf1 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007d22:	6278      	str	r0, [r7, #36]	; 0x24
 8007d24:	e004      	b.n	8007d30 <TMR2_Init+0x74>
	}
	else
	{
		timclock = (2 * HAL_RCC_GetPCLK1Freq());
 8007d26:	f7fc fded 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	prescalerValue = (u32) ((timclock / 1000U) - 1U);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	4a11      	ldr	r2, [pc, #68]	; (8007d78 <TMR2_Init+0xbc>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	099b      	lsrs	r3, r3, #6
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]

	Tim2Handle.Instance = TIM2;
 8007d3e:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <TMR2_Init+0xc0>)
 8007d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d44:	601a      	str	r2, [r3, #0]
	Tim2Handle.Init.Prescaler = prescalerValue;
 8007d46:	4a0d      	ldr	r2, [pc, #52]	; (8007d7c <TMR2_Init+0xc0>)
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	6053      	str	r3, [r2, #4]
	Tim2Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d4c:	4b0b      	ldr	r3, [pc, #44]	; (8007d7c <TMR2_Init+0xc0>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	609a      	str	r2, [r3, #8]
	Tim2Handle.Init.Period = 0;
 8007d52:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <TMR2_Init+0xc0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_Base_Init(&Tim2Handle) != HAL_OK)
 8007d58:	4808      	ldr	r0, [pc, #32]	; (8007d7c <TMR2_Init+0xc0>)
 8007d5a:	f7fd f9df 	bl	800511c <HAL_TIM_Base_Init>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <TMR2_Init+0xac>
	{
		Error_Handler();
 8007d64:	f7ff faeb 	bl	800733e <Error_Handler>
	}
}
 8007d68:	bf00      	nop
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3728      	adds	r7, #40	; 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40021000 	.word	0x40021000
 8007d78:	10624dd3 	.word	0x10624dd3
 8007d7c:	20000618 	.word	0x20000618

08007d80 <TMR2_Set>:


void TMR2_Set(u16 milli_seconds)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	80fb      	strh	r3, [r7, #6]
	TIM2->CR1 &= (u16)~TIM_CR1_CEN;
 8007d8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007d94:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007d98:	4013      	ands	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]

	TIM2->CNT = 0;
 8007d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007da0:	2200      	movs	r2, #0
 8007da2:	625a      	str	r2, [r3, #36]	; 0x24

	TIM2->ARR = (milli_seconds);
 8007da4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007da8:	88fb      	ldrh	r3, [r7, #6]
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c

	TIM2->EGR |= TIM_EGR_UG;
 8007dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	6153      	str	r3, [r2, #20]

	TIM2->CR1 |= TIM_CR1_CEN;
 8007dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	6013      	str	r3, [r2, #0]
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bc80      	pop	{r7}
 8007dd4:	4770      	bx	lr

08007dd6 <TMR2_Sleep>:

void TMR2_Sleep (u16 milli_seconds)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	4603      	mov	r3, r0
 8007dde:	80fb      	strh	r3, [r7, #6]
	u32 inx = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

	TMR2_Set(milli_seconds);
 8007de4:	88fb      	ldrh	r3, [r7, #6]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ffca 	bl	8007d80 <TMR2_Set>

	while((TIM2->CNT) < milli_seconds);
 8007dec:	bf00      	nop
 8007dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007df4:	88fb      	ldrh	r3, [r7, #6]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d3f9      	bcc.n	8007dee <TMR2_Sleep+0x18>
	{
		inx++;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	60fb      	str	r3, [r7, #12]
	}
}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <TMR6_Init>:

//TMR 6 interrupt every 100 milli//
ErrorStatus TMR6_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef	 clkconfig = {'\0'};
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
 8007e16:	605a      	str	r2, [r3, #4]
 8007e18:	609a      	str	r2, [r3, #8]
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	611a      	str	r2, [r3, #16]
	u32	timclock = 0U, APB1Prescaler = 0U, prescalerValue = 0U,  pFLatency = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
 8007e22:	2300      	movs	r3, #0
 8007e24:	623b      	str	r3, [r7, #32]
 8007e26:	2300      	movs	r3, #0
 8007e28:	61fb      	str	r3, [r7, #28]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	607b      	str	r3, [r7, #4]

	__HAL_RCC_TIM6_CLK_DISABLE();
 8007e2e:	4b2e      	ldr	r3, [pc, #184]	; (8007ee8 <TMR6_Init+0xe0>)
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	4a2d      	ldr	r2, [pc, #180]	; (8007ee8 <TMR6_Init+0xe0>)
 8007e34:	f023 0310 	bic.w	r3, r3, #16
 8007e38:	6593      	str	r3, [r2, #88]	; 0x58
	__HAL_RCC_TIM6_CLK_ENABLE();
 8007e3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <TMR6_Init+0xe0>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ee8 <TMR6_Init+0xe0>)
 8007e40:	f043 0310 	orr.w	r3, r3, #16
 8007e44:	6593      	str	r3, [r2, #88]	; 0x58
 8007e46:	4b28      	ldr	r3, [pc, #160]	; (8007ee8 <TMR6_Init+0xe0>)
 8007e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0U);
 8007e52:	2200      	movs	r2, #0
 8007e54:	210f      	movs	r1, #15
 8007e56:	2036      	movs	r0, #54	; 0x36
 8007e58:	f7fa fda5 	bl	80029a6 <HAL_NVIC_SetPriority>

	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e5c:	1d3a      	adds	r2, r7, #4
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	4611      	mov	r1, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7fc fd91 	bl	800498c <HAL_RCC_GetClockConfig>

	APB1Prescaler = clkconfig.APB1CLKDivider;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	623b      	str	r3, [r7, #32]

	if (APB1Prescaler == RCC_HCLK_DIV1) 
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <TMR6_Init+0x74>
	{
		timclock = HAL_RCC_GetPCLK1Freq();
 8007e74:	f7fc fd46 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007e78:	6278      	str	r0, [r7, #36]	; 0x24
 8007e7a:	e004      	b.n	8007e86 <TMR6_Init+0x7e>
	}
	else
	{
		timclock = (2 * HAL_RCC_GetPCLK1Freq());
 8007e7c:	f7fc fd42 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8007e80:	4603      	mov	r3, r0
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
	}

	prescalerValue = (u32) ((timclock / 100000U) - 1U);
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	4a18      	ldr	r2, [pc, #96]	; (8007eec <TMR6_Init+0xe4>)
 8007e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e90:	09db      	lsrs	r3, r3, #7
 8007e92:	3b01      	subs	r3, #1
 8007e94:	61fb      	str	r3, [r7, #28]

	Tim6Handle.Instance = TIM6;
 8007e96:	4b16      	ldr	r3, [pc, #88]	; (8007ef0 <TMR6_Init+0xe8>)
 8007e98:	4a16      	ldr	r2, [pc, #88]	; (8007ef4 <TMR6_Init+0xec>)
 8007e9a:	601a      	str	r2, [r3, #0]
	Tim6Handle.Init.Period = (1000000U / 100U) - 1U;
 8007e9c:	4b14      	ldr	r3, [pc, #80]	; (8007ef0 <TMR6_Init+0xe8>)
 8007e9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007ea2:	60da      	str	r2, [r3, #12]
	Tim6Handle.Init.Prescaler = prescalerValue;
 8007ea4:	4a12      	ldr	r2, [pc, #72]	; (8007ef0 <TMR6_Init+0xe8>)
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	6053      	str	r3, [r2, #4]
	Tim6Handle.Init.ClockDivision = 0;
 8007eaa:	4b11      	ldr	r3, [pc, #68]	; (8007ef0 <TMR6_Init+0xe8>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	611a      	str	r2, [r3, #16]
	Tim6Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <TMR6_Init+0xe8>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	609a      	str	r2, [r3, #8]

	if(HAL_TIM_Base_Init(&Tim6Handle) != HAL_OK)
 8007eb6:	480e      	ldr	r0, [pc, #56]	; (8007ef0 <TMR6_Init+0xe8>)
 8007eb8:	f7fd f930 	bl	800511c <HAL_TIM_Base_Init>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <TMR6_Init+0xbe>
	{
		return ERROR;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	e00b      	b.n	8007ede <TMR6_Init+0xd6>
	}

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ec6:	2036      	movs	r0, #54	; 0x36
 8007ec8:	f7fa fd89 	bl	80029de <HAL_NVIC_EnableIRQ>
	
	if(HAL_TIM_Base_Start_IT(&Tim6Handle) != HAL_OK)
 8007ecc:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <TMR6_Init+0xe8>)
 8007ece:	f7fd f992 	bl	80051f6 <HAL_TIM_Base_Start_IT>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <TMR6_Init+0xd4>
	{
		return ERROR;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e000      	b.n	8007ede <TMR6_Init+0xd6>
	}

	return SUCCESS;
 8007edc:	2301      	movs	r3, #1
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	0a7c5ac5 	.word	0x0a7c5ac5
 8007ef0:	20000690 	.word	0x20000690
 8007ef4:	40001000 	.word	0x40001000

08007ef8 <TIM6_DAC_IRQHandler>:
 
void TIM6_DAC_IRQHandler(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&Tim6Handle);
 8007efc:	4802      	ldr	r0, [pc, #8]	; (8007f08 <TIM6_DAC_IRQHandler+0x10>)
 8007efe:	f7fd f994 	bl	800522a <HAL_TIM_IRQHandler>
}
 8007f02:	bf00      	nop
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	20000690 	.word	0x20000690

08007f0c <HAL_TIM_CallBack>:

 void HAL_TIM_CallBack(TIM_HandleTypeDef *htim)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == TIM6)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <HAL_TIM_CallBack+0x20>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_CallBack+0x16>
	{
		TMR6_Process_Handler();
 8007f1e:	f000 f807 	bl	8007f30 <TMR6_Process_Handler>
	}
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	40001000 	.word	0x40001000

08007f30 <TMR6_Process_Handler>:

void TMR6_Process_Handler(void)
{
 8007f30:	b480      	push	{r7}
 8007f32:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(IO_PORT_CLK_OUT, IO_PIN_CLK_OUT, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(IO_PORT_CLK_OUT, IO_PIN_CLK_OUT, GPIO_PIN_RESET);
	*/

	if (!success_code)
 8007f34:	4b19      	ldr	r3, [pc, #100]	; (8007f9c <TMR6_Process_Handler+0x6c>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d028      	beq.n	8007f8e <TMR6_Process_Handler+0x5e>
		return;

	if (ledFinished)
 8007f3c:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <TMR6_Process_Handler+0x70>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d126      	bne.n	8007f92 <TMR6_Process_Handler+0x62>
	{
		// HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
		return;
	}
	cntLed++;
 8007f44:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <TMR6_Process_Handler+0x74>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <TMR6_Process_Handler+0x74>)
 8007f4e:	701a      	strb	r2, [r3, #0]
	
	if(cntLed == 5)
 8007f50:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <TMR6_Process_Handler+0x74>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b05      	cmp	r3, #5
 8007f56:	d102      	bne.n	8007f5e <TMR6_Process_Handler+0x2e>
	{
		IO_PORT_LED_RED->BRR = (u32)IO_PIN_LED_RED;
 8007f58:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <TMR6_Process_Handler+0x78>)
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if(cntLed == 10)
 8007f5e:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <TMR6_Process_Handler+0x74>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d116      	bne.n	8007f94 <TMR6_Process_Handler+0x64>
	{
		cntLed = 0;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	; (8007fa4 <TMR6_Process_Handler+0x74>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
	
		IO_PORT_LED_RED->BSRR = (u32)IO_PIN_LED_RED;
 8007f6c:	4b0e      	ldr	r3, [pc, #56]	; (8007fa8 <TMR6_Process_Handler+0x78>)
 8007f6e:	2208      	movs	r2, #8
 8007f70:	619a      	str	r2, [r3, #24]
		 
		cntISR++;
 8007f72:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <TMR6_Process_Handler+0x7c>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	3301      	adds	r3, #1
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <TMR6_Process_Handler+0x7c>)
 8007f7c:	701a      	strb	r2, [r3, #0]
	
		if(cntISR >= 20)
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <TMR6_Process_Handler+0x7c>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b13      	cmp	r3, #19
 8007f84:	d906      	bls.n	8007f94 <TMR6_Process_Handler+0x64>
		{
			// HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
			
			ledFinished = 1;
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <TMR6_Process_Handler+0x70>)
 8007f88:	2201      	movs	r2, #1
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e002      	b.n	8007f94 <TMR6_Process_Handler+0x64>
		return;
 8007f8e:	bf00      	nop
 8007f90:	e000      	b.n	8007f94 <TMR6_Process_Handler+0x64>
		return;
 8007f92:	bf00      	nop
		}
	}
}
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bc80      	pop	{r7}
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	20000c81 	.word	0x20000c81
 8007fa0:	2000070a 	.word	0x2000070a
 8007fa4:	20000708 	.word	0x20000708
 8007fa8:	48000c00 	.word	0x48000c00
 8007fac:	20000709 	.word	0x20000709

08007fb0 <TMR16_Init>:

//TMR 16 counter of 1 milli second//
ErrorStatus TMR16_Init(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef	clkconfig = {'\0'};
 8007fb6:	f107 0308 	add.w	r3, r7, #8
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	605a      	str	r2, [r3, #4]
 8007fc0:	609a      	str	r2, [r3, #8]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	611a      	str	r2, [r3, #16]
	u32 timclock = 0U, APB2Prescaler = 0U, prescalerValue = 0U, pFLatency = 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]

	__HAL_RCC_TIM16_CLK_DISABLE();
 8007fd6:	4b23      	ldr	r3, [pc, #140]	; (8008064 <TMR16_Init+0xb4>)
 8007fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fda:	4a22      	ldr	r2, [pc, #136]	; (8008064 <TMR16_Init+0xb4>)
 8007fdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007fe0:	6613      	str	r3, [r2, #96]	; 0x60
	__HAL_RCC_TIM16_CLK_ENABLE();
 8007fe2:	4b20      	ldr	r3, [pc, #128]	; (8008064 <TMR16_Init+0xb4>)
 8007fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe6:	4a1f      	ldr	r2, [pc, #124]	; (8008064 <TMR16_Init+0xb4>)
 8007fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fec:	6613      	str	r3, [r2, #96]	; 0x60
 8007fee:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <TMR16_Init+0xb4>)
 8007ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]

	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007ffa:	1d3a      	adds	r2, r7, #4
 8007ffc:	f107 0308 	add.w	r3, r7, #8
 8008000:	4611      	mov	r1, r2
 8008002:	4618      	mov	r0, r3
 8008004:	f7fc fcc2 	bl	800498c <HAL_RCC_GetClockConfig>

	APB2Prescaler = clkconfig.APB2CLKDivider;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	623b      	str	r3, [r7, #32]

	if (APB2Prescaler == RCC_HCLK_DIV1)
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d103      	bne.n	800801a <TMR16_Init+0x6a>
	{
		timclock = HAL_RCC_GetPCLK2Freq();
 8008012:	f7fc fc99 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 8008016:	6278      	str	r0, [r7, #36]	; 0x24
 8008018:	e004      	b.n	8008024 <TMR16_Init+0x74>
	}
	else
	{
		timclock = (2 * HAL_RCC_GetPCLK2Freq());
 800801a:	f7fc fc95 	bl	8004948 <HAL_RCC_GetPCLK2Freq>
 800801e:	4603      	mov	r3, r0
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	627b      	str	r3, [r7, #36]	; 0x24
	}

	prescalerValue = (u32) ((timclock / 1000U) - 1U);
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <TMR16_Init+0xb8>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	099b      	lsrs	r3, r3, #6
 800802e:	3b01      	subs	r3, #1
 8008030:	61fb      	str	r3, [r7, #28]

	Tim16Handle.Instance = TIM16;
 8008032:	4b0e      	ldr	r3, [pc, #56]	; (800806c <TMR16_Init+0xbc>)
 8008034:	4a0e      	ldr	r2, [pc, #56]	; (8008070 <TMR16_Init+0xc0>)
 8008036:	601a      	str	r2, [r3, #0]
	Tim16Handle.Init.Prescaler = prescalerValue;
 8008038:	4a0c      	ldr	r2, [pc, #48]	; (800806c <TMR16_Init+0xbc>)
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	6053      	str	r3, [r2, #4]
	Tim16Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <TMR16_Init+0xbc>)
 8008040:	2200      	movs	r2, #0
 8008042:	609a      	str	r2, [r3, #8]
	Tim16Handle.Init.Period = 0;
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <TMR16_Init+0xbc>)
 8008046:	2200      	movs	r2, #0
 8008048:	60da      	str	r2, [r3, #12]

	if (HAL_TIM_Base_Init(&Tim16Handle) != HAL_OK)
 800804a:	4808      	ldr	r0, [pc, #32]	; (800806c <TMR16_Init+0xbc>)
 800804c:	f7fd f866 	bl	800511c <HAL_TIM_Base_Init>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <TMR16_Init+0xaa>
	{
		Error_Handler();
 8008056:	f7ff f972 	bl	800733e <Error_Handler>
	}
}
 800805a:	bf00      	nop
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	; 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40021000 	.word	0x40021000
 8008068:	10624dd3 	.word	0x10624dd3
 800806c:	200006cc 	.word	0x200006cc
 8008070:	40014400 	.word	0x40014400

08008074 <TMR6_DeInit>:
		return 1;
	}
}

void TMR6_DeInit(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&Tim6Handle);
 8008078:	4802      	ldr	r0, [pc, #8]	; (8008084 <TMR6_DeInit+0x10>)
 800807a:	f7fd f87a 	bl	8005172 <HAL_TIM_Base_DeInit>
}
 800807e:	bf00      	nop
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000690 	.word	0x20000690

08008088 <TMR2_DeInit>:
void TMR2_DeInit(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&Tim2Handle);
 800808c:	4802      	ldr	r0, [pc, #8]	; (8008098 <TMR2_DeInit+0x10>)
 800808e:	f7fd f870 	bl	8005172 <HAL_TIM_Base_DeInit>
}
 8008092:	bf00      	nop
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000618 	.word	0x20000618

0800809c <TMR16_DeInit>:
void TMR16_DeInit(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&Tim16Handle);
 80080a0:	4802      	ldr	r0, [pc, #8]	; (80080ac <TMR16_DeInit+0x10>)
 80080a2:	f7fd f866 	bl	8005172 <HAL_TIM_Base_DeInit>
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200006cc 	.word	0x200006cc

080080b0 <TMR7_DeInit>:
void TMR7_DeInit(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_DeInit(&Tim7Handle);
 80080b4:	4802      	ldr	r0, [pc, #8]	; (80080c0 <TMR7_DeInit+0x10>)
 80080b6:	f7fd f85c 	bl	8005172 <HAL_TIM_Base_DeInit>
}
 80080ba:	bf00      	nop
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20000654 	.word	0x20000654

080080c4 <USART1_Init>:
#include "UART.h"

UART_HandleTypeDef I_Uart1Hndl = {'\0'};
 
void USART1_Init(void)
 {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
	 GPIO_InitTypeDef  GPIO_InitStruct = {'\0'};
 80080ca:	1d3b      	adds	r3, r7, #4
 80080cc:	2200      	movs	r2, #0
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	605a      	str	r2, [r3, #4]
 80080d2:	609a      	str	r2, [r3, #8]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	611a      	str	r2, [r3, #16]
	 
	 __HAL_RCC_USART1_CLK_DISABLE();
 80080d8:	4b3d      	ldr	r3, [pc, #244]	; (80081d0 <USART1_Init+0x10c>)
 80080da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080dc:	4a3c      	ldr	r2, [pc, #240]	; (80081d0 <USART1_Init+0x10c>)
 80080de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080e2:	6613      	str	r3, [r2, #96]	; 0x60
	 __HAL_RCC_USART1_CLK_ENABLE();
 80080e4:	4b3a      	ldr	r3, [pc, #232]	; (80081d0 <USART1_Init+0x10c>)
 80080e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080e8:	4a39      	ldr	r2, [pc, #228]	; (80081d0 <USART1_Init+0x10c>)
 80080ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80080ee:	6613      	str	r3, [r2, #96]	; 0x60
 80080f0:	4b37      	ldr	r3, [pc, #220]	; (80081d0 <USART1_Init+0x10c>)
 80080f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080f8:	603b      	str	r3, [r7, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
	 __HAL_RCC_USART1_FORCE_RESET();
 80080fc:	4b34      	ldr	r3, [pc, #208]	; (80081d0 <USART1_Init+0x10c>)
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	4a33      	ldr	r2, [pc, #204]	; (80081d0 <USART1_Init+0x10c>)
 8008102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008106:	6413      	str	r3, [r2, #64]	; 0x40
	 __HAL_RCC_USART1_RELEASE_RESET();
 8008108:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <USART1_Init+0x10c>)
 800810a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810c:	4a30      	ldr	r2, [pc, #192]	; (80081d0 <USART1_Init+0x10c>)
 800810e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008112:	6413      	str	r3, [r2, #64]	; 0x40
 
	  HAL_GPIO_DeInit(IO_PORT_DBG_TX,IO_PIN_DBG_TX);//USART1_TX//
 8008114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800811c:	f7fb fbe6 	bl	80038ec <HAL_GPIO_DeInit>
	  HAL_GPIO_DeInit(IO_PORT_DBG_RX,IO_PIN_DBG_RX);//USART1_RX//
 8008120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008128:	f7fb fbe0 	bl	80038ec <HAL_GPIO_DeInit>
	  /*
	  HAL_GPIO_DeInit(GPIOC,GPIO_PIN_6);
	  HAL_GPIO_DeInit(GPIOC,GPIO_PIN_7);
	  */

	  GPIO_Config_Params_AF(&GPIO_InitStruct, GPIO_MODE_AF_PP, IO_PIN_DBG_TX, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART1);
 800812c:	1d38      	adds	r0, r7, #4
 800812e:	2307      	movs	r3, #7
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	2300      	movs	r3, #0
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	2300      	movs	r3, #0
 8008138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813c:	2102      	movs	r1, #2
 800813e:	f7ff f8e3 	bl	8007308 <GPIO_Config_Params_AF>
	  HAL_GPIO_Init(IO_PORT_DBG_TX, &GPIO_InitStruct);//USART1_TX//
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	4619      	mov	r1, r3
 8008146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800814a:	f7fb fa51 	bl	80035f0 <HAL_GPIO_Init>
	  
	  GPIO_Config_Params_AF(&GPIO_InitStruct, GPIO_MODE_AF_PP, IO_PIN_DBG_RX, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW, GPIO_AF7_USART1);
 800814e:	1d38      	adds	r0, r7, #4
 8008150:	2307      	movs	r3, #7
 8008152:	9301      	str	r3, [sp, #4]
 8008154:	2300      	movs	r3, #0
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	2300      	movs	r3, #0
 800815a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800815e:	2102      	movs	r1, #2
 8008160:	f7ff f8d2 	bl	8007308 <GPIO_Config_Params_AF>
	  HAL_GPIO_Init(IO_PORT_DBG_RX, &GPIO_InitStruct);//USART1_RX//
 8008164:	1d3b      	adds	r3, r7, #4
 8008166:	4619      	mov	r1, r3
 8008168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800816c:	f7fb fa40 	bl	80035f0 <HAL_GPIO_Init>
	  
	  GPIO_Config_Params(&GPIO_InitStruct, GPIO_MODE_INPUT, GPIO_PIN_7, GPIO_NOPULL, GPIO_SPEED_FREQ_LOW);
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
	  */
	  
	  I_Uart1Hndl.Instance = USART1;
 8008170:	4b18      	ldr	r3, [pc, #96]	; (80081d4 <USART1_Init+0x110>)
 8008172:	4a19      	ldr	r2, [pc, #100]	; (80081d8 <USART1_Init+0x114>)
 8008174:	601a      	str	r2, [r3, #0]
	  
	  if(HAL_UART_DeInit(&I_Uart1Hndl) != HAL_OK)
 8008176:	4817      	ldr	r0, [pc, #92]	; (80081d4 <USART1_Init+0x110>)
 8008178:	f7fd fa51 	bl	800561e <HAL_UART_DeInit>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <USART1_Init+0xc2>
	  {
		  Error_Handler();
 8008182:	f7ff f8dc 	bl	800733e <Error_Handler>
	  }   
	  
	  //I_Uart1Hndl.Init.BaudRate 	 		= 38400;
	  I_Uart1Hndl.Init.BaudRate 	 		= 9600;
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <USART1_Init+0x110>)
 8008188:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800818c:	605a      	str	r2, [r3, #4]
	  I_Uart1Hndl.Init.HwFlowCtl		 	= UART_HWCONTROL_NONE;
 800818e:	4b11      	ldr	r3, [pc, #68]	; (80081d4 <USART1_Init+0x110>)
 8008190:	2200      	movs	r2, #0
 8008192:	619a      	str	r2, [r3, #24]
	  I_Uart1Hndl.Init.Mode 		 		= UART_MODE_TX_RX;
 8008194:	4b0f      	ldr	r3, [pc, #60]	; (80081d4 <USART1_Init+0x110>)
 8008196:	220c      	movs	r2, #12
 8008198:	615a      	str	r2, [r3, #20]
	  I_Uart1Hndl.Init.OneBitSampling	 	= UART_ONE_BIT_SAMPLE_DISABLE;
 800819a:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <USART1_Init+0x110>)
 800819c:	2200      	movs	r2, #0
 800819e:	621a      	str	r2, [r3, #32]
	  I_Uart1Hndl.Init.OverSampling  		= UART_OVERSAMPLING_16;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	; (80081d4 <USART1_Init+0x110>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	61da      	str	r2, [r3, #28]
	  I_Uart1Hndl.Init.Parity			 	= UART_PARITY_NONE;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <USART1_Init+0x110>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
	  I_Uart1Hndl.Init.StopBits 		 	= UART_STOPBITS_1;
 80081ac:	4b09      	ldr	r3, [pc, #36]	; (80081d4 <USART1_Init+0x110>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
	  I_Uart1Hndl.Init.WordLength		 	= UART_WORDLENGTH_8B;
 80081b2:	4b08      	ldr	r3, [pc, #32]	; (80081d4 <USART1_Init+0x110>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	609a      	str	r2, [r3, #8]
	  
	  if(HAL_UART_Init(&I_Uart1Hndl) != HAL_OK)
 80081b8:	4806      	ldr	r0, [pc, #24]	; (80081d4 <USART1_Init+0x110>)
 80081ba:	f7fd f9df 	bl	800557c <HAL_UART_Init>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USART1_Init+0x104>
	  {
		  Error_Handler();
 80081c4:	f7ff f8bb 	bl	800733e <Error_Handler>
	  }
 }
 80081c8:	bf00      	nop
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40021000 	.word	0x40021000
 80081d4:	2000070c 	.word	0x2000070c
 80081d8:	40013800 	.word	0x40013800

080081dc <USART1_DeInit>:

 void USART1_DeInit(void)
 {
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
	 HAL_UART_DeInit(&I_Uart1Hndl);
 80081e0:	4802      	ldr	r0, [pc, #8]	; (80081ec <USART1_DeInit+0x10>)
 80081e2:	f7fd fa1c 	bl	800561e <HAL_UART_DeInit>
 }
 80081e6:	bf00      	nop
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	2000070c 	.word	0x2000070c

080081f0 <SerialPutChar>:
		 return 0;
	 }
 }

 void SerialPutChar(u8 c)
 {
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	71fb      	strb	r3, [r7, #7]
	 I_Uart1Hndl.Instance->TDR = (c & (u16)0x01FF); 
 80081fa:	4b09      	ldr	r3, [pc, #36]	; (8008220 <SerialPutChar+0x30>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	79fa      	ldrb	r2, [r7, #7]
 8008200:	b292      	uxth	r2, r2
 8008202:	851a      	strh	r2, [r3, #40]	; 0x28
	  
	 while (__HAL_USART_GET_FLAG(&I_Uart1Hndl, USART_FLAG_TXE) == RESET)
 8008204:	bf00      	nop
 8008206:	4b06      	ldr	r3, [pc, #24]	; (8008220 <SerialPutChar+0x30>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008210:	2b80      	cmp	r3, #128	; 0x80
 8008212:	d1f8      	bne.n	8008206 <SerialPutChar+0x16>
	 {
	 }
 }
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr
 8008220:	2000070c 	.word	0x2000070c

08008224 <WaitForEndTx>:
 
 void WaitForEndTx(void)
 {
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 	u16 data = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	80fb      	strh	r3, [r7, #6]

	 while ((__HAL_USART_GET_FLAG(&I_Uart1Hndl, USART_FLAG_TC) == RESET));
 800822e:	bf00      	nop
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <WaitForEndTx+0x40>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800823a:	2b40      	cmp	r3, #64	; 0x40
 800823c:	d1f8      	bne.n	8008230 <WaitForEndTx+0xc>
	 
	I_Uart1Hndl.Instance->ICR |= (1<<6);
 800823e:	4b09      	ldr	r3, [pc, #36]	; (8008264 <WaitForEndTx+0x40>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a1a      	ldr	r2, [r3, #32]
 8008244:	4b07      	ldr	r3, [pc, #28]	; (8008264 <WaitForEndTx+0x40>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800824c:	621a      	str	r2, [r3, #32]
	 	 
	 data = (u8)((I_Uart1Hndl.Instance->RDR) & 0xFF);
 800824e:	4b05      	ldr	r3, [pc, #20]	; (8008264 <WaitForEndTx+0x40>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008254:	b29b      	uxth	r3, r3
 8008256:	b2db      	uxtb	r3, r3
 8008258:	80fb      	strh	r3, [r7, #6]
 }
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	bc80      	pop	{r7}
 8008262:	4770      	bx	lr
 8008264:	2000070c 	.word	0x2000070c

08008268 <PrintVersion>:
	boot_constants[16] = { 4, 46, HARDWARE_TYPE, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

int measure_count = 0;

void PrintVersion(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
	SerialPutString("\n\rCar Sticker Boot Loader Version 4.46 (no reg)");
 800826c:	4802      	ldr	r0, [pc, #8]	; (8008278 <PrintVersion+0x10>)
 800826e:	f7fe ff88 	bl	8007182 <Serial_PutString>
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	08009550 	.word	0x08009550

0800827c <main>:


int main(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af02      	add	r7, sp, #8
 	uint32_t inx = 0; //,systemClock = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
	uint8_t tmp8 = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	72fb      	strb	r3, [r7, #11]
	// uint16_t tmp16 = 0;
	uint32_t param_address = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	607b      	str	r3, [r7, #4]



	charger_resistors_value = 0;
 800828e:	4bb9      	ldr	r3, [pc, #740]	; (8008574 <main+0x2f8>)
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]

	HAL_Init();
 8008294:	f7f9 f8d4 	bl	8001440 <HAL_Init>

	hal_status = HAL_OK;
 8008298:	4bb7      	ldr	r3, [pc, #732]	; (8008578 <main+0x2fc>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]

 	// DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_IWDG_STOP;
	DBGMCU->APB1FZR1 &= ~DBGMCU_APB1FZR1_DBG_IWDG_STOP;
 800829e:	4bb7      	ldr	r3, [pc, #732]	; (800857c <main+0x300>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	4ab6      	ldr	r2, [pc, #728]	; (800857c <main+0x300>)
 80082a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082a8:	6093      	str	r3, [r2, #8]


	#ifdef ENABLE_WATCHDOG
		WD_Init();
 80082aa:	f000 fd15 	bl	8008cd8 <WD_Init>
		WD_Refresh();
 80082ae:	f000 fd35 	bl	8008d1c <WD_Refresh>
	#endif

	Enable_GPIO_Clocks();
 80082b2:	f7ff f923 	bl	80074fc <Enable_GPIO_Clocks>

	GPIO_Init();
 80082b6:	f7ff f8ad 	bl	8007414 <GPIO_Init>

	TMR2_Init();
 80082ba:	f7ff fcff 	bl	8007cbc <TMR2_Init>

	//what the purpose of this line ?
	//TMR2_Sleep(100);
	//Regulator_Init();
	//TMR2_Sleep(100);
	Regulator_DeInit();
 80082be:	f7ff f9cf 	bl	8007660 <Regulator_DeInit>
	TMR2_Sleep(100);
 80082c2:	2064      	movs	r0, #100	; 0x64
 80082c4:	f7ff fd87 	bl	8007dd6 <TMR2_Sleep>

	#ifdef UART_DEBUG
	USART1_Init();
 80082c8:	f7ff fefc 	bl	80080c4 <USART1_Init>
	#endif


	hal_status = RTC_Init();
 80082cc:	f7ff fad8 	bl	8007880 <RTC_Init>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	4ba8      	ldr	r3, [pc, #672]	; (8008578 <main+0x2fc>)
 80082d6:	701a      	strb	r2, [r3, #0]


	ADC1_Init();
 80082d8:	f7fd fe76 	bl	8005fc8 <ADC1_Init>
	Led_GPIO_Init();
 80082dc:	f7fe ff68 	bl	80071b0 <Led_GPIO_Init>
	GPS_GPIO_Close();
 80082e0:	f7ff f9e2 	bl	80076a8 <GPS_GPIO_Close>

	// the test is moved to the application
	CheckVoltages();
 80082e4:	f000 fbf4 	bl	8008ad0 <CheckVoltages>

	SystemClock_Config();
 80082e8:	f000 fc9e 	bl	8008c28 <SystemClock_Config>

	HAL_FLASH_Lock();
 80082ec:	f7fa fec4 	bl	8003078 <HAL_FLASH_Lock>

	HAL_FLASH_Unlock();
 80082f0:	f7fa fea8 	bl	8003044 <HAL_FLASH_Unlock>


	SPI2_Init();
 80082f4:	f7ff fb50 	bl	8007998 <SPI2_Init>
	TMR7_Init();
 80082f8:	f7ff fc7e 	bl	8007bf8 <TMR7_Init>
	TMR6_Init();
 80082fc:	f7ff fd84 	bl	8007e08 <TMR6_Init>
	TMR16_Init();
 8008300:	f7ff fe56 	bl	8007fb0 <TMR16_Init>

	#ifndef UART_DEBUG
	USART1_Init();
	#endif
	
	Regulator_Init();
 8008304:	f7ff f988 	bl	8007618 <Regulator_Init>

	memset(&I_DevicePrm,0 , sizeof(I_DevicePrm));
 8008308:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800830c:	2100      	movs	r1, #0
 800830e:	489c      	ldr	r0, [pc, #624]	; (8008580 <main+0x304>)
 8008310:	f000 fef8 	bl	8009104 <memset>
	
	// TMR2_Sleep(25);
	// TMR2_Sleep(1000);
	
	ErrorStatus error = Flash_Init();
 8008314:	f7fe faf6 	bl	8006904 <Flash_Init>
 8008318:	4603      	mov	r3, r0
 800831a:	70fb      	strb	r3, [r7, #3]

	BlinkSequence();
 800831c:	f000 fc40 	bl	8008ba0 <BlinkSequence>

	// SerialPutString("\n\rCar Sticker Boot Loader Version 4.44 (no reg)");
	PrintVersion();
 8008320:	f7ff ffa2 	bl	8008268 <PrintVersion>
#else
	#ifdef V5_REV9
		SerialPutString(" V5 HW5\r\n");
	#else
		#ifdef V6_REV0
			SerialPutString(" V6-R0 HW2\r\n");
 8008324:	4897      	ldr	r0, [pc, #604]	; (8008584 <main+0x308>)
 8008326:	f7fe ff2c 	bl	8007182 <Serial_PutString>
	#endif
#endif

	// check voltage

	SerialPutString("Reading Parameters...");
 800832a:	4897      	ldr	r0, [pc, #604]	; (8008588 <main+0x30c>)
 800832c:	f7fe ff29 	bl	8007182 <Serial_PutString>

	if (DevParms_Read_Flash(&I_DevicePrm, (u32)param_address) == SUCCESS)
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4893      	ldr	r0, [pc, #588]	; (8008580 <main+0x304>)
 8008334:	f7fe f934 	bl	80065a0 <DevParms_Read_Flash>
 8008338:	4603      	mov	r3, r0
 800833a:	2b01      	cmp	r3, #1
 800833c:	f040 8198 	bne.w	8008670 <main+0x3f4>
	{
		SerialPutString(" - Success\r\n");
 8008340:	4892      	ldr	r0, [pc, #584]	; (800858c <main+0x310>)
 8008342:	f7fe ff1e 	bl	8007182 <Serial_PutString>

		BlinkSequence();
 8008346:	f000 fc2b 	bl	8008ba0 <BlinkSequence>

		if (I_DevicePrm.dpVersion == FLASH_ERASE_VALUE)
 800834a:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <main+0x304>)
 800834c:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8008350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008354:	4293      	cmp	r3, r2
 8008356:	d107      	bne.n	8008368 <main+0xec>
		{
			SerialPutString("No Application Found\r\n");
 8008358:	488d      	ldr	r0, [pc, #564]	; (8008590 <main+0x314>)
 800835a:	f7fe ff12 	bl	8007182 <Serial_PutString>

			while(1)
			{
				TMR2_Sleep(3000);
 800835e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8008362:	f7ff fd38 	bl	8007dd6 <TMR2_Sleep>
 8008366:	e7fa      	b.n	800835e <main+0xe2>
			}
			*/
		}
		else
		{
			sprintf( general_str, "application version: %d.%d.%d\r\n" , (I_DevicePrm.dpVersion / 256), (I_DevicePrm.dpVersion % 256),  I_DevicePrm.dpBuild);
 8008368:	4b85      	ldr	r3, [pc, #532]	; (8008580 <main+0x304>)
 800836a:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 800836e:	0a1b      	lsrs	r3, r3, #8
 8008370:	b29b      	uxth	r3, r3
 8008372:	4619      	mov	r1, r3
 8008374:	4b82      	ldr	r3, [pc, #520]	; (8008580 <main+0x304>)
 8008376:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 800837a:	b2db      	uxtb	r3, r3
 800837c:	4a80      	ldr	r2, [pc, #512]	; (8008580 <main+0x304>)
 800837e:	f8b2 2136 	ldrh.w	r2, [r2, #310]	; 0x136
 8008382:	9200      	str	r2, [sp, #0]
 8008384:	460a      	mov	r2, r1
 8008386:	4983      	ldr	r1, [pc, #524]	; (8008594 <main+0x318>)
 8008388:	4883      	ldr	r0, [pc, #524]	; (8008598 <main+0x31c>)
 800838a:	f000 fe73 	bl	8009074 <siprintf>
			SerialPutString(general_str);
 800838e:	4882      	ldr	r0, [pc, #520]	; (8008598 <main+0x31c>)
 8008390:	f7fe fef7 	bl	8007182 <Serial_PutString>
			// SerialPutString("Application is in Inner Flash\n\r");
			
			// debugging only: force new version
			// I_DevicePrm.dpVerRdLn = 200000;

			if (I_DevicePrm.dpVerRdLn == 0)
 8008394:	4b7a      	ldr	r3, [pc, #488]	; (8008580 <main+0x304>)
 8008396:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800839a:	2b00      	cmp	r3, #0
 800839c:	d105      	bne.n	80083aa <main+0x12e>
			{
				SerialPutString("No new firmware found. run the current firmware\r\n");
 800839e:	487f      	ldr	r0, [pc, #508]	; (800859c <main+0x320>)
 80083a0:	f7fe feef 	bl	8007182 <Serial_PutString>

				// TMR2_Sleep(3000);
				Going_To_APP();
 80083a4:	f7fd ff98 	bl	80062d8 <Going_To_APP>
 80083a8:	e15c      	b.n	8008664 <main+0x3e8>
				*/
			}
			else
			{
				// indicate trying to burn new firmware by blinking led
				success_code = 1;
 80083aa:	4b7d      	ldr	r3, [pc, #500]	; (80085a0 <main+0x324>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]

				sprintf( general_str, "new firmware: %d.%d.%d - size: %d\r\n" , (I_DevicePrm.dpVersionR / 256), (I_DevicePrm.dpVersionR % 256),  I_DevicePrm.dpBuildR, I_DevicePrm.dpVerRdLn);
 80083b0:	4b73      	ldr	r3, [pc, #460]	; (8008580 <main+0x304>)
 80083b2:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 80083b6:	0a1b      	lsrs	r3, r3, #8
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	4618      	mov	r0, r3
 80083bc:	4b70      	ldr	r3, [pc, #448]	; (8008580 <main+0x304>)
 80083be:	f8b3 3138 	ldrh.w	r3, [r3, #312]	; 0x138
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	4b6e      	ldr	r3, [pc, #440]	; (8008580 <main+0x304>)
 80083c6:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80083ca:	4619      	mov	r1, r3
 80083cc:	4b6c      	ldr	r3, [pc, #432]	; (8008580 <main+0x304>)
 80083ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	9100      	str	r1, [sp, #0]
 80083d6:	4613      	mov	r3, r2
 80083d8:	4602      	mov	r2, r0
 80083da:	4972      	ldr	r1, [pc, #456]	; (80085a4 <main+0x328>)
 80083dc:	486e      	ldr	r0, [pc, #440]	; (8008598 <main+0x31c>)
 80083de:	f000 fe49 	bl	8009074 <siprintf>
				SerialPutString(general_str);
 80083e2:	486d      	ldr	r0, [pc, #436]	; (8008598 <main+0x31c>)
 80083e4:	f7fe fecd 	bl	8007182 <Serial_PutString>

				if ((I_DevicePrm.dpVerRdLn > 0) && (I_DevicePrm.dpVerRdLn  < (INNFLS_MAX_APP_SIZE + 1)))
 80083e8:	4b65      	ldr	r3, [pc, #404]	; (8008580 <main+0x304>)
 80083ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 8132 	beq.w	8008658 <main+0x3dc>
 80083f4:	4b62      	ldr	r3, [pc, #392]	; (8008580 <main+0x304>)
 80083f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80083fa:	f5b3 3f58 	cmp.w	r3, #221184	; 0x36000
 80083fe:	f200 812b 	bhi.w	8008658 <main+0x3dc>
				{
					SerialPutString("Found New firmware Update\r\n");
 8008402:	4869      	ldr	r0, [pc, #420]	; (80085a8 <main+0x32c>)
 8008404:	f7fe febd 	bl	8007182 <Serial_PutString>

					SerialPutString("Calculating extern CRC...");
 8008408:	4868      	ldr	r0, [pc, #416]	; (80085ac <main+0x330>)
 800840a:	f7fe feba 	bl	8007182 <Serial_PutString>
					
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 800840e:	4b5c      	ldr	r3, [pc, #368]	; (8008580 <main+0x304>)
 8008410:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 8008414:	4b66      	ldr	r3, [pc, #408]	; (80085b0 <main+0x334>)
 8008416:	4a67      	ldr	r2, [pc, #412]	; (80085b4 <main+0x338>)
 8008418:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800841c:	f7fe f962 	bl	80066e4 <Flash_Calc_Version_CRC16>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	f040 8114 	bne.w	8008650 <main+0x3d4>
					{
						SerialPutString(" - Success\r\n");
 8008428:	4858      	ldr	r0, [pc, #352]	; (800858c <main+0x310>)
 800842a:	f7fe feaa 	bl	8007182 <Serial_PutString>

						// SerialPutString("Calc CRC16 of Ext Flash New Application Success\n\r");
						sprintf( general_str, "Expected CRC=%d, Calculated CRC=%d\r\n" , I_DevicePrm.dpVerRcrc, glbCrc16);
 800842e:	4b54      	ldr	r3, [pc, #336]	; (8008580 <main+0x304>)
 8008430:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008434:	461a      	mov	r2, r3
 8008436:	4b5e      	ldr	r3, [pc, #376]	; (80085b0 <main+0x334>)
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	495f      	ldr	r1, [pc, #380]	; (80085b8 <main+0x33c>)
 800843c:	4856      	ldr	r0, [pc, #344]	; (8008598 <main+0x31c>)
 800843e:	f000 fe19 	bl	8009074 <siprintf>
						SerialPutString(general_str);
 8008442:	4855      	ldr	r0, [pc, #340]	; (8008598 <main+0x31c>)
 8008444:	f7fe fe9d 	bl	8007182 <Serial_PutString>
						
						// if (1) // dubug only: force upgrade new firmware.
						if(I_DevicePrm.dpVerRcrc == glbCrc16)
 8008448:	4b4d      	ldr	r3, [pc, #308]	; (8008580 <main+0x304>)
 800844a:	f8b3 213c 	ldrh.w	r2, [r3, #316]	; 0x13c
 800844e:	4b58      	ldr	r3, [pc, #352]	; (80085b0 <main+0x334>)
 8008450:	881b      	ldrh	r3, [r3, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	f040 80f8 	bne.w	8008648 <main+0x3cc>
						{
							SerialPutString("External Flash CRC match\r\n");
 8008458:	4858      	ldr	r0, [pc, #352]	; (80085bc <main+0x340>)
 800845a:	f7fe fe92 	bl	8007182 <Serial_PutString>

							// SerialPutString("CRC16 of Ext Flash Compare Success\n\r");
							SerialPutString("Erasing current firmware...");
 800845e:	4858      	ldr	r0, [pc, #352]	; (80085c0 <main+0x344>)
 8008460:	f7fe fe8f 	bl	8007182 <Serial_PutString>
							
							__HAL_FLASH_CLEAR_FLAG(0xFFFF);
 8008464:	4b57      	ldr	r3, [pc, #348]	; (80085c4 <main+0x348>)
 8008466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800846a:	611a      	str	r2, [r3, #16]

							if (Inner_Flash_Erase() == SUCCESS)
 800846c:	f7fe fcfe 	bl	8006e6c <Inner_Flash_Erase>
 8008470:	4603      	mov	r3, r0
 8008472:	2b01      	cmp	r3, #1
 8008474:	f040 80dc 	bne.w	8008630 <main+0x3b4>
							{
								SerialPutString(" - Success\r\n");
 8008478:	4844      	ldr	r0, [pc, #272]	; (800858c <main+0x310>)
 800847a:	f7fe fe82 	bl	8007182 <Serial_PutString>

								//SerialPutString("Erase Inner Flash Sectors\n\r");
								
								SerialPutString("Copying new firmware...\r\n");
 800847e:	4852      	ldr	r0, [pc, #328]	; (80085c8 <main+0x34c>)
 8008480:	f7fe fe7f 	bl	8007182 <Serial_PutString>

								if (Transfer_Version(I_DevicePrm.dpVerRdLn, EXTERNAL_FLASH_APP_START_ADDRESS, glbDatBuf, INNFLS_STR_APP_ADD) == SUCCESS)
 8008484:	4b3e      	ldr	r3, [pc, #248]	; (8008580 <main+0x304>)
 8008486:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 800848a:	4b50      	ldr	r3, [pc, #320]	; (80085cc <main+0x350>)
 800848c:	4a49      	ldr	r2, [pc, #292]	; (80085b4 <main+0x338>)
 800848e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008492:	f7fe fc5d 	bl	8006d50 <Transfer_Version>
 8008496:	4603      	mov	r3, r0
 8008498:	2b01      	cmp	r3, #1
 800849a:	f040 80bd 	bne.w	8008618 <main+0x39c>
								{
									SerialPutString(" - Success\r\n");
 800849e:	483b      	ldr	r0, [pc, #236]	; (800858c <main+0x310>)
 80084a0:	f7fe fe6f 	bl	8007182 <Serial_PutString>
									// SerialPutString("Transfer Application from Ext Flash to Inner Flash Success\n\r");
									
									glbCrc16 = 0;
 80084a4:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <main+0x334>)
 80084a6:	2200      	movs	r2, #0
 80084a8:	801a      	strh	r2, [r3, #0]

									SerialPutString("Calculating inner flash firmware CRC...\r\n");
 80084aa:	4849      	ldr	r0, [pc, #292]	; (80085d0 <main+0x354>)
 80084ac:	f7fe fe69 	bl	8007182 <Serial_PutString>
									
									if (Inner_Flash_ClcCrc16(I_DevicePrm.dpVerRdLn, INNFLS_STR_APP_ADD , &glbCrc16, glbDatBuf, DATA_BUFFER_SIZE) == SUCCESS)
 80084b0:	4b33      	ldr	r3, [pc, #204]	; (8008580 <main+0x304>)
 80084b2:	f8d3 0140 	ldr.w	r0, [r3, #320]	; 0x140
 80084b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ba:	9300      	str	r3, [sp, #0]
 80084bc:	4b3d      	ldr	r3, [pc, #244]	; (80085b4 <main+0x338>)
 80084be:	4a3c      	ldr	r2, [pc, #240]	; (80085b0 <main+0x334>)
 80084c0:	4942      	ldr	r1, [pc, #264]	; (80085cc <main+0x350>)
 80084c2:	f7fe fd82 	bl	8006fca <Inner_Flash_ClcCrc16>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	f040 8099 	bne.w	8008600 <main+0x384>
									{
										sprintf( general_str, "Expected CRC=%d, Calculated CRC=%d\r\n" , I_DevicePrm.dpVerRcrc, glbCrc16);
 80084ce:	4b2c      	ldr	r3, [pc, #176]	; (8008580 <main+0x304>)
 80084d0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80084d4:	461a      	mov	r2, r3
 80084d6:	4b36      	ldr	r3, [pc, #216]	; (80085b0 <main+0x334>)
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	4937      	ldr	r1, [pc, #220]	; (80085b8 <main+0x33c>)
 80084dc:	482e      	ldr	r0, [pc, #184]	; (8008598 <main+0x31c>)
 80084de:	f000 fdc9 	bl	8009074 <siprintf>
										SerialPutString(general_str);
 80084e2:	482d      	ldr	r0, [pc, #180]	; (8008598 <main+0x31c>)
 80084e4:	f7fe fe4d 	bl	8007182 <Serial_PutString>
										
										// if (1) // debug only: force copy firmware
										if (I_DevicePrm.dpVerRcrc == glbCrc16)
 80084e8:	4b25      	ldr	r3, [pc, #148]	; (8008580 <main+0x304>)
 80084ea:	f8b3 213c 	ldrh.w	r2, [r3, #316]	; 0x13c
 80084ee:	4b30      	ldr	r3, [pc, #192]	; (80085b0 <main+0x334>)
 80084f0:	881b      	ldrh	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d13a      	bne.n	800856c <main+0x2f0>
										{
											SerialPutString("Inner Flash CRC match\r\n");
 80084f6:	4837      	ldr	r0, [pc, #220]	; (80085d4 <main+0x358>)
 80084f8:	f7fe fe43 	bl	8007182 <Serial_PutString>
											SerialPutString("The transfer succeeded\r\n");
 80084fc:	4836      	ldr	r0, [pc, #216]	; (80085d8 <main+0x35c>)
 80084fe:	f7fe fe40 	bl	8007182 <Serial_PutString>
											
											I_DevicePrm.dpVerRcrc = 0;
 8008502:	4b1f      	ldr	r3, [pc, #124]	; (8008580 <main+0x304>)
 8008504:	2200      	movs	r2, #0
 8008506:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
											I_DevicePrm.dpVerRdLn = 0;
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <main+0x304>)
 800850c:	2200      	movs	r2, #0
 800850e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
											I_DevicePrm.dpVersion = I_DevicePrm.dpVersionR;
 8008512:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <main+0x304>)
 8008514:	f8b3 2138 	ldrh.w	r2, [r3, #312]	; 0x138
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <main+0x304>)
 800851a:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
											I_DevicePrm.dpBuild = I_DevicePrm.dpBuildR;
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <main+0x304>)
 8008520:	f8b3 213a 	ldrh.w	r2, [r3, #314]	; 0x13a
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <main+0x304>)
 8008526:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136

											SerialPutString("Burning the new version number...\r\n");
 800852a:	482c      	ldr	r0, [pc, #176]	; (80085dc <main+0x360>)
 800852c:	f7fe fe29 	bl	8007182 <Serial_PutString>
											
											if(DevParms_Burn_Flash(&I_DevicePrm) == SUCCESS)
 8008530:	4813      	ldr	r0, [pc, #76]	; (8008580 <main+0x304>)
 8008532:	f7fe f898 	bl	8006666 <DevParms_Burn_Flash>
 8008536:	4603      	mov	r3, r0
 8008538:	2b01      	cmp	r3, #1
 800853a:	d10b      	bne.n	8008554 <main+0x2d8>
											{
												SerialPutString(" - Success\r\n");
 800853c:	4813      	ldr	r0, [pc, #76]	; (800858c <main+0x310>)
 800853e:	f7fe fe20 	bl	8007182 <Serial_PutString>
												//SerialPutString("Program Parameters into Ext Flash Success\n\r");
												//SerialPutString("Remote Setup New Application Success\n\r");

												success_code = 2;
 8008542:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <main+0x324>)
 8008544:	2202      	movs	r2, #2
 8008546:	701a      	strb	r2, [r3, #0]
												SerialPutString("Jumping To Application\r\n");
 8008548:	4825      	ldr	r0, [pc, #148]	; (80085e0 <main+0x364>)
 800854a:	f7fe fe1a 	bl	8007182 <Serial_PutString>
												Going_To_APP();
 800854e:	f7fd fec3 	bl	80062d8 <Going_To_APP>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 8008552:	e087      	b.n	8008664 <main+0x3e8>
											}
											else
											{	
												SerialPutString(" - Failed\r\n");
 8008554:	4823      	ldr	r0, [pc, #140]	; (80085e4 <main+0x368>)
 8008556:	f7fe fe14 	bl	8007182 <Serial_PutString>
												// SerialPutString("Program Parameters into Ext Flash Failed\n\r");
												
												while(ledFinished == 0)
 800855a:	e002      	b.n	8008562 <main+0x2e6>
												{
													inx++;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	3301      	adds	r3, #1
 8008560:	60fb      	str	r3, [r7, #12]
												while(ledFinished == 0)
 8008562:	4b21      	ldr	r3, [pc, #132]	; (80085e8 <main+0x36c>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f8      	beq.n	800855c <main+0x2e0>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 800856a:	e07b      	b.n	8008664 <main+0x3e8>
												// HAL_NVIC_SystemReset();
											}
										}
										else
										{
											SerialPutString("Inner Flash CRC doesn't match\r\n");
 800856c:	481f      	ldr	r0, [pc, #124]	; (80085ec <main+0x370>)
 800856e:	f7fe fe08 	bl	8007182 <Serial_PutString>
											
											while(ledFinished == 0)
 8008572:	e040      	b.n	80085f6 <main+0x37a>
 8008574:	20000c80 	.word	0x20000c80
 8008578:	20000cac 	.word	0x20000cac
 800857c:	e0042000 	.word	0xe0042000
 8008580:	200001bc 	.word	0x200001bc
 8008584:	08009580 	.word	0x08009580
 8008588:	08009590 	.word	0x08009590
 800858c:	080095a8 	.word	0x080095a8
 8008590:	080095b8 	.word	0x080095b8
 8008594:	080095d0 	.word	0x080095d0
 8008598:	20000b80 	.word	0x20000b80
 800859c:	080095f0 	.word	0x080095f0
 80085a0:	20000c81 	.word	0x20000c81
 80085a4:	08009624 	.word	0x08009624
 80085a8:	08009648 	.word	0x08009648
 80085ac:	08009664 	.word	0x08009664
 80085b0:	20000b7e 	.word	0x20000b7e
 80085b4:	2000077c 	.word	0x2000077c
 80085b8:	08009680 	.word	0x08009680
 80085bc:	080096a8 	.word	0x080096a8
 80085c0:	080096c4 	.word	0x080096c4
 80085c4:	40022000 	.word	0x40022000
 80085c8:	080096e0 	.word	0x080096e0
 80085cc:	0800a000 	.word	0x0800a000
 80085d0:	080096fc 	.word	0x080096fc
 80085d4:	08009728 	.word	0x08009728
 80085d8:	08009740 	.word	0x08009740
 80085dc:	0800975c 	.word	0x0800975c
 80085e0:	08009780 	.word	0x08009780
 80085e4:	0800979c 	.word	0x0800979c
 80085e8:	2000070a 	.word	0x2000070a
 80085ec:	080097a8 	.word	0x080097a8
											{
												inx++;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
											while(ledFinished == 0)
 80085f6:	4b2b      	ldr	r3, [pc, #172]	; (80086a4 <main+0x428>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f8      	beq.n	80085f0 <main+0x374>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 80085fe:	e031      	b.n	8008664 <main+0x3e8>
											// HAL_NVIC_SystemReset();
										}
									}
									else
									{
										SerialPutString("Calculating inner CRC Failed\r\n");
 8008600:	4829      	ldr	r0, [pc, #164]	; (80086a8 <main+0x42c>)
 8008602:	f7fe fdbe 	bl	8007182 <Serial_PutString>
										
										while(ledFinished == 0)
 8008606:	e002      	b.n	800860e <main+0x392>
										{
											inx++;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
										while(ledFinished == 0)
 800860e:	4b25      	ldr	r3, [pc, #148]	; (80086a4 <main+0x428>)
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0f8      	beq.n	8008608 <main+0x38c>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 8008616:	e025      	b.n	8008664 <main+0x3e8>
										// HAL_NVIC_SystemReset();
									}
								}
								else
								{
									SerialPutString(" - Failed\r\n");
 8008618:	4824      	ldr	r0, [pc, #144]	; (80086ac <main+0x430>)
 800861a:	f7fe fdb2 	bl	8007182 <Serial_PutString>
									//SerialPutString("Transfer Application from Ext Flash to Inner Flash Success\n\r");
									
									while (ledFinished == 0)
 800861e:	e002      	b.n	8008626 <main+0x3aa>
									{
										inx++;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3301      	adds	r3, #1
 8008624:	60fb      	str	r3, [r7, #12]
									while (ledFinished == 0)
 8008626:	4b1f      	ldr	r3, [pc, #124]	; (80086a4 <main+0x428>)
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d0f8      	beq.n	8008620 <main+0x3a4>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 800862e:	e019      	b.n	8008664 <main+0x3e8>
									// HAL_NVIC_SystemReset();
								}
							}
							else
							{
								SerialPutString(" - Failed\r\n");
 8008630:	481e      	ldr	r0, [pc, #120]	; (80086ac <main+0x430>)
 8008632:	f7fe fda6 	bl	8007182 <Serial_PutString>
								// SerialPutString("Erase Inner Flash Sectors 1-5 Failed\n\r");
								
								while(ledFinished == 0)
 8008636:	e002      	b.n	800863e <main+0x3c2>
								{
									inx++;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	3301      	adds	r3, #1
 800863c:	60fb      	str	r3, [r7, #12]
								while(ledFinished == 0)
 800863e:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <main+0x428>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d0f8      	beq.n	8008638 <main+0x3bc>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 8008646:	e00d      	b.n	8008664 <main+0x3e8>
								// HAL_NVIC_SystemReset();
							}
						}
						else
						{
							SerialPutString("External Flash CRC doesn't match\r\n");
 8008648:	4819      	ldr	r0, [pc, #100]	; (80086b0 <main+0x434>)
 800864a:	f7fe fd9a 	bl	8007182 <Serial_PutString>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 800864e:	e009      	b.n	8008664 <main+0x3e8>
							// SerialPutString("CRC16 of Ext Flash Compare Failed (Mismatch)\n\r");
						}
					}
					else
					{
						SerialPutString(" - Failed\r\n");	// reading the external flash failed
 8008650:	4816      	ldr	r0, [pc, #88]	; (80086ac <main+0x430>)
 8008652:	f7fe fd96 	bl	8007182 <Serial_PutString>
					if (Flash_Calc_Version_CRC16(I_DevicePrm.dpVerRdLn,  EXTERNAL_FLASH_APP_START_ADDRESS , glbDatBuf ,&glbCrc16) == SUCCESS)
 8008656:	e005      	b.n	8008664 <main+0x3e8>
					}
				}
				else
				{
					SerialPutString(" - Failed\r\n");
 8008658:	4814      	ldr	r0, [pc, #80]	; (80086ac <main+0x430>)
 800865a:	f7fe fd92 	bl	8007182 <Serial_PutString>
					SerialPutString("New firmware is over-sized.\r\n");
 800865e:	4815      	ldr	r0, [pc, #84]	; (80086b4 <main+0x438>)
 8008660:	f7fe fd8f 	bl	8007182 <Serial_PutString>
				}
			}

			SerialPutString("Jumping To Application\r\n");
 8008664:	4814      	ldr	r0, [pc, #80]	; (80086b8 <main+0x43c>)
 8008666:	f7fe fd8c 	bl	8007182 <Serial_PutString>
			Going_To_APP();
 800866a:	f7fd fe35 	bl	80062d8 <Going_To_APP>
 800866e:	e015      	b.n	800869c <main+0x420>
		}
		
	}
	else
	{
		SerialPutString(" - Failed\n\r");
 8008670:	4812      	ldr	r0, [pc, #72]	; (80086bc <main+0x440>)
 8008672:	f7fe fd86 	bl	8007182 <Serial_PutString>
		// SerialPutString("Read Ext Flash Parameters Failed\n\r");

		SerialPutString("Setting manufacture defaults...\r\n");
 8008676:	4812      	ldr	r0, [pc, #72]	; (80086c0 <main+0x444>)
 8008678:	f7fe fd83 	bl	8007182 <Serial_PutString>
		DevParms_Set_Default(&I_DevicePrm);
 800867c:	4811      	ldr	r0, [pc, #68]	; (80086c4 <main+0x448>)
 800867e:	f7fe f89f 	bl	80067c0 <DevParms_Set_Default>
		DevParms_Burn_Flash(&I_DevicePrm);
 8008682:	4810      	ldr	r0, [pc, #64]	; (80086c4 <main+0x448>)
 8008684:	f7fd ffef 	bl	8006666 <DevParms_Burn_Flash>
		
		while (ledFinished == 0)
 8008688:	e002      	b.n	8008690 <main+0x414>
		{
			inx++;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	3301      	adds	r3, #1
 800868e:	60fb      	str	r3, [r7, #12]
		while (ledFinished == 0)
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <main+0x428>)
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d0f8      	beq.n	800868a <main+0x40e>
		}

		HAL_NVIC_SystemReset();
 8008698:	f7fa f9bd 	bl	8002a16 <HAL_NVIC_SystemReset>
	}
	
	while(1)
	{
		inx++;	
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e7fb      	b.n	800869c <main+0x420>
 80086a4:	2000070a 	.word	0x2000070a
 80086a8:	080097c8 	.word	0x080097c8
 80086ac:	0800979c 	.word	0x0800979c
 80086b0:	080097e8 	.word	0x080097e8
 80086b4:	0800980c 	.word	0x0800980c
 80086b8:	08009780 	.word	0x08009780
 80086bc:	0800982c 	.word	0x0800982c
 80086c0:	08009838 	.word	0x08009838
 80086c4:	200001bc 	.word	0x200001bc

080086c8 <ConvertMeasurementUnits>:
	charging_table[15] = CHARGE_CURRENT_MODE_15;
}


void ConvertMeasurementUnits(void)
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
	u16 *voltCalValPtr = NULL;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
	float  fVoltCalVal = 0;
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	60bb      	str	r3, [r7, #8]
	u16 voltCalVal = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	80fb      	strh	r3, [r7, #6]

	voltCalValPtr = (u16*)0x1FFF75AA;
 80086dc:	4baa      	ldr	r3, [pc, #680]	; (8008988 <ConvertMeasurementUnits+0x2c0>)
 80086de:	60fb      	str	r3, [r7, #12]
	voltCalVal = (u16)(*voltCalValPtr);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	80fb      	strh	r3, [r7, #6]
	fVoltCalVal = (float)voltCalVal;
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7f8 fae3 	bl	8000cb4 <__aeabi_ui2f>
 80086ee:	4603      	mov	r3, r0
 80086f0:	60bb      	str	r3, [r7, #8]

	measurements_res.adcVBatt = (float)(((((float)measurements.vBatt) * 3.0 * fVoltCalVal)/(((float)measurements.vRefernce) * 4095.0)) * 2.0);
 80086f2:	4ba6      	ldr	r3, [pc, #664]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f8 fae0 	bl	8000cbc <__aeabi_i2f>
 80086fc:	4603      	mov	r3, r0
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f7 feca 	bl	8000498 <__aeabi_f2d>
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	4ba1      	ldr	r3, [pc, #644]	; (8008990 <ConvertMeasurementUnits+0x2c8>)
 800870a:	f7f7 ff1d 	bl	8000548 <__aeabi_dmul>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4614      	mov	r4, r2
 8008714:	461d      	mov	r5, r3
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f7f7 febe 	bl	8000498 <__aeabi_f2d>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	4620      	mov	r0, r4
 8008722:	4629      	mov	r1, r5
 8008724:	f7f7 ff10 	bl	8000548 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	4b96      	ldr	r3, [pc, #600]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4618      	mov	r0, r3
 8008736:	f7f8 fac1 	bl	8000cbc <__aeabi_i2f>
 800873a:	4603      	mov	r3, r0
 800873c:	4618      	mov	r0, r3
 800873e:	f7f7 feab 	bl	8000498 <__aeabi_f2d>
 8008742:	a38b      	add	r3, pc, #556	; (adr r3, 8008970 <ConvertMeasurementUnits+0x2a8>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 fefe 	bl	8000548 <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4620      	mov	r0, r4
 8008752:	4629      	mov	r1, r5
 8008754:	f7f8 f822 	bl	800079c <__aeabi_ddiv>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4610      	mov	r0, r2
 800875e:	4619      	mov	r1, r3
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	f7f7 fd3a 	bl	80001dc <__adddf3>
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	4610      	mov	r0, r2
 800876e:	4619      	mov	r1, r3
 8008770:	f7f8 f99a 	bl	8000aa8 <__aeabi_d2f>
 8008774:	4603      	mov	r3, r0
 8008776:	4a87      	ldr	r2, [pc, #540]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008778:	6113      	str	r3, [r2, #16]
	measurements_res.adcVBattPer = (float)((( measurements_res.adcVBatt) / 3.75)  * 100.0);
 800877a:	4b86      	ldr	r3, [pc, #536]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	4618      	mov	r0, r3
 8008780:	f7f7 fe8a 	bl	8000498 <__aeabi_f2d>
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	4b83      	ldr	r3, [pc, #524]	; (8008998 <ConvertMeasurementUnits+0x2d0>)
 800878a:	f7f8 f807 	bl	800079c <__aeabi_ddiv>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	f04f 0200 	mov.w	r2, #0
 800879a:	4b80      	ldr	r3, [pc, #512]	; (800899c <ConvertMeasurementUnits+0x2d4>)
 800879c:	f7f7 fed4 	bl	8000548 <__aeabi_dmul>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4610      	mov	r0, r2
 80087a6:	4619      	mov	r1, r3
 80087a8:	f7f8 f97e 	bl	8000aa8 <__aeabi_d2f>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4a79      	ldr	r2, [pc, #484]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 80087b0:	6013      	str	r3, [r2, #0]

	if (measurements_res.adcVBattPer > 100.0)
 80087b2:	4b78      	ldr	r3, [pc, #480]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	497a      	ldr	r1, [pc, #488]	; (80089a0 <ConvertMeasurementUnits+0x2d8>)
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7f8 fc8f 	bl	80010dc <__aeabi_fcmpgt>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <ConvertMeasurementUnits+0x102>
	{
		measurements_res.adcVBattPer = 100.0;
 80087c4:	4b73      	ldr	r3, [pc, #460]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 80087c6:	4a76      	ldr	r2, [pc, #472]	; (80089a0 <ConvertMeasurementUnits+0x2d8>)
 80087c8:	601a      	str	r2, [r3, #0]
	}

	fVoltCalVal = ((float)measurements.temperature)/4096;
 80087ca:	4b70      	ldr	r3, [pc, #448]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7f8 fa74 	bl	8000cbc <__aeabi_i2f>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80087da:	4618      	mov	r0, r3
 80087dc:	f7f8 fb76 	bl	8000ecc <__aeabi_fdiv>
 80087e0:	4603      	mov	r3, r0
 80087e2:	60bb      	str	r3, [r7, #8]
	fVoltCalVal =  R16 * (1-fVoltCalVal) / fVoltCalVal;
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80087ea:	f7f8 f9b1 	bl	8000b50 <__aeabi_fsub>
 80087ee:	4603      	mov	r3, r0
 80087f0:	496c      	ldr	r1, [pc, #432]	; (80089a4 <ConvertMeasurementUnits+0x2dc>)
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7f8 fab6 	bl	8000d64 <__aeabi_fmul>
 80087f8:	4603      	mov	r3, r0
 80087fa:	68b9      	ldr	r1, [r7, #8]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7f8 fb65 	bl	8000ecc <__aeabi_fdiv>
 8008802:	4603      	mov	r3, r0
 8008804:	60bb      	str	r3, [r7, #8]
	fVoltCalVal = log( fVoltCalVal / R0)/B_FACTOR + 1.0/T25;
 8008806:	4967      	ldr	r1, [pc, #412]	; (80089a4 <ConvertMeasurementUnits+0x2dc>)
 8008808:	68b8      	ldr	r0, [r7, #8]
 800880a:	f7f8 fb5f 	bl	8000ecc <__aeabi_fdiv>
 800880e:	4603      	mov	r3, r0
 8008810:	4618      	mov	r0, r3
 8008812:	f7f7 fe41 	bl	8000498 <__aeabi_f2d>
 8008816:	4602      	mov	r2, r0
 8008818:	460b      	mov	r3, r1
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f000 fc7f 	bl	8009120 <log>
 8008822:	a355      	add	r3, pc, #340	; (adr r3, 8008978 <ConvertMeasurementUnits+0x2b0>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 ffb8 	bl	800079c <__aeabi_ddiv>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	a352      	add	r3, pc, #328	; (adr r3, 8008980 <ConvertMeasurementUnits+0x2b8>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fccf 	bl	80001dc <__adddf3>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	f7f8 f92f 	bl	8000aa8 <__aeabi_d2f>
 800884a:	4603      	mov	r3, r0
 800884c:	60bb      	str	r3, [r7, #8]
	fVoltCalVal = (float)1.0f / fVoltCalVal - T0;
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008854:	f7f8 fb3a 	bl	8000ecc <__aeabi_fdiv>
 8008858:	4603      	mov	r3, r0
 800885a:	4953      	ldr	r1, [pc, #332]	; (80089a8 <ConvertMeasurementUnits+0x2e0>)
 800885c:	4618      	mov	r0, r3
 800885e:	f7f8 f977 	bl	8000b50 <__aeabi_fsub>
 8008862:	4603      	mov	r3, r0
 8008864:	60bb      	str	r3, [r7, #8]
	measurements_res.adcTemp = (fVoltCalVal);
 8008866:	4a4b      	ldr	r2, [pc, #300]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	60d3      	str	r3, [r2, #12]


	// measurements_res.adcTemp = (float)((((float)measurements.temperature - 870.0)/150.0) + 25.0);
	measurements_res.adcSolarV = (float)(((((float)measurements.solar) * 3.0 * fVoltCalVal)/(((float)measurements.vRefernce) * 4095.0)) * 2.0);
 800886c:	4b47      	ldr	r3, [pc, #284]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f7f8 fa23 	bl	8000cbc <__aeabi_i2f>
 8008876:	4603      	mov	r3, r0
 8008878:	4618      	mov	r0, r3
 800887a:	f7f7 fe0d 	bl	8000498 <__aeabi_f2d>
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	4b43      	ldr	r3, [pc, #268]	; (8008990 <ConvertMeasurementUnits+0x2c8>)
 8008884:	f7f7 fe60 	bl	8000548 <__aeabi_dmul>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4614      	mov	r4, r2
 800888e:	461d      	mov	r5, r3
 8008890:	68b8      	ldr	r0, [r7, #8]
 8008892:	f7f7 fe01 	bl	8000498 <__aeabi_f2d>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fe53 	bl	8000548 <__aeabi_dmul>
 80088a2:	4602      	mov	r2, r0
 80088a4:	460b      	mov	r3, r1
 80088a6:	4614      	mov	r4, r2
 80088a8:	461d      	mov	r5, r3
 80088aa:	4b38      	ldr	r3, [pc, #224]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7f8 fa04 	bl	8000cbc <__aeabi_i2f>
 80088b4:	4603      	mov	r3, r0
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7f7 fdee 	bl	8000498 <__aeabi_f2d>
 80088bc:	a32c      	add	r3, pc, #176	; (adr r3, 8008970 <ConvertMeasurementUnits+0x2a8>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fe41 	bl	8000548 <__aeabi_dmul>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4620      	mov	r0, r4
 80088cc:	4629      	mov	r1, r5
 80088ce:	f7f7 ff65 	bl	800079c <__aeabi_ddiv>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	4602      	mov	r2, r0
 80088dc:	460b      	mov	r3, r1
 80088de:	f7f7 fc7d 	bl	80001dc <__adddf3>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4610      	mov	r0, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f7f8 f8dd 	bl	8000aa8 <__aeabi_d2f>
 80088ee:	4603      	mov	r3, r0
 80088f0:	4a28      	ldr	r2, [pc, #160]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 80088f2:	6153      	str	r3, [r2, #20]

	measurements_res.adcSolar = (float)((( (((float)measurements.solar) / 4095.0) * 1.0 ) /SOLAR_RESITOR_RATIO) * 100 );
 80088f4:	4b25      	ldr	r3, [pc, #148]	; (800898c <ConvertMeasurementUnits+0x2c4>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7f8 f9df 	bl	8000cbc <__aeabi_i2f>
 80088fe:	4603      	mov	r3, r0
 8008900:	4618      	mov	r0, r3
 8008902:	f7f7 fdc9 	bl	8000498 <__aeabi_f2d>
 8008906:	a31a      	add	r3, pc, #104	; (adr r3, 8008970 <ConvertMeasurementUnits+0x2a8>)
 8008908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890c:	f7f7 ff46 	bl	800079c <__aeabi_ddiv>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	4610      	mov	r0, r2
 8008916:	4619      	mov	r1, r3
 8008918:	f04f 0200 	mov.w	r2, #0
 800891c:	4b23      	ldr	r3, [pc, #140]	; (80089ac <ConvertMeasurementUnits+0x2e4>)
 800891e:	f7f7 ff3d 	bl	800079c <__aeabi_ddiv>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4610      	mov	r0, r2
 8008928:	4619      	mov	r1, r3
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	4b1b      	ldr	r3, [pc, #108]	; (800899c <ConvertMeasurementUnits+0x2d4>)
 8008930:	f7f7 fe0a 	bl	8000548 <__aeabi_dmul>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	f7f8 f8b4 	bl	8000aa8 <__aeabi_d2f>
 8008940:	4603      	mov	r3, r0
 8008942:	4a14      	ldr	r2, [pc, #80]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008944:	6053      	str	r3, [r2, #4]
	measurements_res.adcExtPw = 0.0;
 8008946:	4b13      	ldr	r3, [pc, #76]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008948:	f04f 0200 	mov.w	r2, #0
 800894c:	609a      	str	r2, [r3, #8]

	if (measurements_res.adcSolar > 100.0)
 800894e:	4b11      	ldr	r3, [pc, #68]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	4913      	ldr	r1, [pc, #76]	; (80089a0 <ConvertMeasurementUnits+0x2d8>)
 8008954:	4618      	mov	r0, r3
 8008956:	f7f8 fbc1 	bl	80010dc <__aeabi_fcmpgt>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d100      	bne.n	8008962 <ConvertMeasurementUnits+0x29a>
	{
		measurements_res.adcSolar = 100.0;
	}


	return measurements_res;
 8008960:	e003      	b.n	800896a <ConvertMeasurementUnits+0x2a2>
		measurements_res.adcSolar = 100.0;
 8008962:	4b0c      	ldr	r3, [pc, #48]	; (8008994 <ConvertMeasurementUnits+0x2cc>)
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <ConvertMeasurementUnits+0x2d8>)
 8008966:	605a      	str	r2, [r3, #4]
	return measurements_res;
 8008968:	bf00      	nop
}
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bdb0      	pop	{r4, r5, r7, pc}
 8008970:	00000000 	.word	0x00000000
 8008974:	40affe00 	.word	0x40affe00
 8008978:	00000000 	.word	0x00000000
 800897c:	40aa6800 	.word	0x40aa6800
 8008980:	65883e7b 	.word	0x65883e7b
 8008984:	3f6bc4fd 	.word	0x3f6bc4fd
 8008988:	1fff75aa 	.word	0x1fff75aa
 800898c:	20000170 	.word	0x20000170
 8008990:	40080000 	.word	0x40080000
 8008994:	20000c94 	.word	0x20000c94
 8008998:	400e0000 	.word	0x400e0000
 800899c:	40590000 	.word	0x40590000
 80089a0:	42c80000 	.word	0x42c80000
 80089a4:	41200000 	.word	0x41200000
 80089a8:	43888000 	.word	0x43888000
 80089ac:	3fe00000 	.word	0x3fe00000

080089b0 <TestVoltage>:
}
*/


u8 TestVoltage(unsigned char enable_print)
{
 80089b0:	b5b0      	push	{r4, r5, r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
	static u8 successive_voltage_count = 0;
	u8 ret = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

	// disable charger in order to read voltage correctly
	HAL_GPIO_WritePin(IO_PORT_CHARGE_EN, IO_PIN_CHARGE_EN, GPIO_PIN_SET);
 80089be:	2201      	movs	r2, #1
 80089c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80089c4:	483a      	ldr	r0, [pc, #232]	; (8008ab0 <TestVoltage+0x100>)
 80089c6:	f7fb f886 	bl	8003ad6 <HAL_GPIO_WritePin>

	GPIO_Temperature(1);
 80089ca:	2001      	movs	r0, #1
 80089cc:	f7fe fee6 	bl	800779c <GPIO_Temperature>
	TMR2_Sleep(3);
 80089d0:	2003      	movs	r0, #3
 80089d2:	f7ff fa00 	bl	8007dd6 <TMR2_Sleep>

	ActivateScan();
 80089d6:	f7fd facb 	bl	8005f70 <ActivateScan>
	ConvertMeasurementUnits();
 80089da:	f7ff fe75 	bl	80086c8 <ConvertMeasurementUnits>

	GPIO_Temperature(0);
 80089de:	2000      	movs	r0, #0
 80089e0:	f7fe fedc 	bl	800779c <GPIO_Temperature>

	if ( measurements_res.adcVBatt >= START_OPEREATION_VOLTAGE )
 80089e4:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <TestVoltage+0x104>)
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7f7 fd55 	bl	8000498 <__aeabi_f2d>
 80089ee:	a32e      	add	r3, pc, #184	; (adr r3, 8008aa8 <TestVoltage+0xf8>)
 80089f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f4:	f7f8 f82e 	bl	8000a54 <__aeabi_dcmpge>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00c      	beq.n	8008a18 <TestVoltage+0x68>
	{
		successive_voltage_count++;
 80089fe:	4b2e      	ldr	r3, [pc, #184]	; (8008ab8 <TestVoltage+0x108>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	4b2c      	ldr	r3, [pc, #176]	; (8008ab8 <TestVoltage+0x108>)
 8008a08:	701a      	strb	r2, [r3, #0]

		if (successive_voltage_count >= (3*3))
 8008a0a:	4b2b      	ldr	r3, [pc, #172]	; (8008ab8 <TestVoltage+0x108>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d905      	bls.n	8008a1e <TestVoltage+0x6e>
			ret = 1;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	e002      	b.n	8008a1e <TestVoltage+0x6e>
	}
	else
	{
		successive_voltage_count = 0;
 8008a18:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <TestVoltage+0x108>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
	}

	// enable charger
	unsigned char enable_solar_charger = 0;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73bb      	strb	r3, [r7, #14]

	if (measurements_res.adcTemp <= MAX_TEMPERATURE)
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <TestVoltage+0x104>)
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	4925      	ldr	r1, [pc, #148]	; (8008abc <TestVoltage+0x10c>)
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7f8 fb43 	bl	80010b4 <__aeabi_fcmple>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <TestVoltage+0x88>
		enable_solar_charger = 1;
 8008a34:	2301      	movs	r3, #1
 8008a36:	73bb      	strb	r3, [r7, #14]


	if (enable_solar_charger)
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <TestVoltage+0x9a>
		HAL_GPIO_WritePin(IO_PORT_CHARGE_EN, IO_PIN_CHARGE_EN, GPIO_PIN_RESET);
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a44:	481a      	ldr	r0, [pc, #104]	; (8008ab0 <TestVoltage+0x100>)
 8008a46:	f7fb f846 	bl	8003ad6 <HAL_GPIO_WritePin>


#ifdef UART_DEBUG
	if (enable_print)
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d026      	beq.n	8008a9e <TestVoltage+0xee>
	{
		float x = measurements_res.adcVBatt*1000;
 8008a50:	4b18      	ldr	r3, [pc, #96]	; (8008ab4 <TestVoltage+0x104>)
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	491a      	ldr	r1, [pc, #104]	; (8008ac0 <TestVoltage+0x110>)
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7f8 f984 	bl	8000d64 <__aeabi_fmul>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	60bb      	str	r3, [r7, #8]

		measure_count++;
 8008a60:	4b18      	ldr	r3, [pc, #96]	; (8008ac4 <TestVoltage+0x114>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3301      	adds	r3, #1
 8008a66:	4a17      	ldr	r2, [pc, #92]	; (8008ac4 <TestVoltage+0x114>)
 8008a68:	6013      	str	r3, [r2, #0]
		sprintf( general_str, "\r\n%d) Temperature=%d, Vbat=%dmV, solar charger enable=%d\r\n" , measure_count, (int)measurements_res.adcTemp, (int)x, enable_solar_charger );
 8008a6a:	4b16      	ldr	r3, [pc, #88]	; (8008ac4 <TestVoltage+0x114>)
 8008a6c:	681c      	ldr	r4, [r3, #0]
 8008a6e:	4b11      	ldr	r3, [pc, #68]	; (8008ab4 <TestVoltage+0x104>)
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7f8 fb3c 	bl	80010f0 <__aeabi_f2iz>
 8008a78:	4605      	mov	r5, r0
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7f8 fb38 	bl	80010f0 <__aeabi_f2iz>
 8008a80:	4602      	mov	r2, r0
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	9200      	str	r2, [sp, #0]
 8008a88:	462b      	mov	r3, r5
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	490e      	ldr	r1, [pc, #56]	; (8008ac8 <TestVoltage+0x118>)
 8008a8e:	480f      	ldr	r0, [pc, #60]	; (8008acc <TestVoltage+0x11c>)
 8008a90:	f000 faf0 	bl	8009074 <siprintf>
		SerialPutString(general_str);
 8008a94:	480d      	ldr	r0, [pc, #52]	; (8008acc <TestVoltage+0x11c>)
 8008a96:	f7fe fb74 	bl	8007182 <Serial_PutString>

		PrintVersion();
 8008a9a:	f7ff fbe5 	bl	8008268 <PrintVersion>
	}
#endif


	return ret;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa8:	66666666 	.word	0x66666666
 8008aac:	400a6666 	.word	0x400a6666
 8008ab0:	48001000 	.word	0x48001000
 8008ab4:	20000c94 	.word	0x20000c94
 8008ab8:	20000cb4 	.word	0x20000cb4
 8008abc:	42340000 	.word	0x42340000
 8008ac0:	447a0000 	.word	0x447a0000
 8008ac4:	20000cb0 	.word	0x20000cb0
 8008ac8:	0800985c 	.word	0x0800985c
 8008acc:	20000b80 	.word	0x20000b80

08008ad0 <CheckVoltages>:


void CheckVoltages(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af00      	add	r7, sp, #0
	//u8 stay_in_bootloader;
	//u8 resitor_changed;
	//u8 successive_voltage_count = 0;
	u8 first_loop = 1;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	71bb      	strb	r3, [r7, #6]
	*/

	while (1)
	{
		// usb connected
		if (HAL_GPIO_ReadPin(IO_PORT_USB_BUS,IO_PIN_USB_BUS))
 8008ada:	2180      	movs	r1, #128	; 0x80
 8008adc:	482c      	ldr	r0, [pc, #176]	; (8008b90 <CheckVoltages+0xc0>)
 8008ade:	f7fa ffe3 	bl	8003aa8 <HAL_GPIO_ReadPin>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d002      	beq.n	8008aee <CheckVoltages+0x1e>
		{
			AllLights();
 8008ae8:	f000 f876 	bl	8008bd8 <AllLights>
			break;
 8008aec:	e04c      	b.n	8008b88 <CheckVoltages+0xb8>
		// if (first_loop)
		if (1)
		{
			// SetChargingMode1(1);

			HAL_GPIO_WritePin(IO_PORT_CLK_OUT, IO_PIN_CLK_OUT, GPIO_PIN_SET);
 8008aee:	2201      	movs	r2, #1
 8008af0:	2108      	movs	r1, #8
 8008af2:	4828      	ldr	r0, [pc, #160]	; (8008b94 <CheckVoltages+0xc4>)
 8008af4:	f7fa ffef 	bl	8003ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO_PORT_LED_GREEN, IO_PIN_LED_RED, GPIO_PIN_RESET);
 8008af8:	2200      	movs	r2, #0
 8008afa:	2108      	movs	r1, #8
 8008afc:	4826      	ldr	r0, [pc, #152]	; (8008b98 <CheckVoltages+0xc8>)
 8008afe:	f7fa ffea 	bl	8003ad6 <HAL_GPIO_WritePin>

			for (i=0 ; i<3 ; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	71fb      	strb	r3, [r7, #7]
 8008b06:	e008      	b.n	8008b1a <CheckVoltages+0x4a>
			{
				TMR2_Sleep(15);
 8008b08:	200f      	movs	r0, #15
 8008b0a:	f7ff f964 	bl	8007dd6 <TMR2_Sleep>
				TestVoltage(0);
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f7ff ff4e 	bl	80089b0 <TestVoltage>
			for (i=0 ; i<3 ; i++)
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	3301      	adds	r3, #1
 8008b18:	71fb      	strb	r3, [r7, #7]
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d9f3      	bls.n	8008b08 <CheckVoltages+0x38>
			}

			HAL_GPIO_WritePin(IO_PORT_LED_GREEN, IO_PIN_LED_RED, GPIO_PIN_SET);
 8008b20:	2201      	movs	r2, #1
 8008b22:	2108      	movs	r1, #8
 8008b24:	481c      	ldr	r0, [pc, #112]	; (8008b98 <CheckVoltages+0xc8>)
 8008b26:	f7fa ffd6 	bl	8003ad6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO_PORT_CLK_OUT, IO_PIN_CLK_OUT, GPIO_PIN_RESET);
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2108      	movs	r1, #8
 8008b2e:	4819      	ldr	r0, [pc, #100]	; (8008b94 <CheckVoltages+0xc4>)
 8008b30:	f7fa ffd1 	bl	8003ad6 <HAL_GPIO_WritePin>
			TMR2_Sleep(10);
 8008b34:	200a      	movs	r0, #10
 8008b36:	f7ff f94e 	bl	8007dd6 <TMR2_Sleep>
		}

		WD_Refresh();
 8008b3a:	f000 f8ef 	bl	8008d1c <WD_Refresh>
				successive_voltage_count = 0;
			}
		}
		*/

		if (TestVoltage(1))
 8008b3e:	2001      	movs	r0, #1
 8008b40:	f7ff ff36 	bl	80089b0 <TestVoltage>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d11d      	bne.n	8008b86 <CheckVoltages+0xb6>
			TMR2_Sleep(1000);
			TMR2_Sleep(1000);
			TMR2_Sleep(1000);
			*/

			WD_Refresh();
 8008b4a:	f000 f8e7 	bl	8008d1c <WD_Refresh>
			*/

			//HAL_GPIO_WritePin(IO_PORT_LED_BLUE, IO_PIN_LED_BLUE, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_RED, GPIO_PIN_SET);

			WD_Refresh();
 8008b4e:	f000 f8e5 	bl	8008d1c <WD_Refresh>

			// close ports

			DeInit_Peripherals();
 8008b52:	f7fe fdcd 	bl	80076f0 <DeInit_Peripherals>

			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8008b56:	2001      	movs	r0, #1
 8008b58:	f7fb f8bc 	bl	8003cd4 <HAL_PWREx_EnterSTOP2Mode>

			// open ports

			Enable_GPIO_Clocks();
 8008b5c:	f7fe fcce 	bl	80074fc <Enable_GPIO_Clocks>
			TMR2_Init();
 8008b60:	f7ff f8ac 	bl	8007cbc <TMR2_Init>
			hal_status = RTC_Init();
 8008b64:	f7fe fe8c 	bl	8007880 <RTC_Init>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <CheckVoltages+0xcc>)
 8008b6e:	701a      	strb	r2, [r3, #0]

			ADC1_Init();
 8008b70:	f7fd fa2a 	bl	8005fc8 <ADC1_Init>
			Led_GPIO_Init();
 8008b74:	f7fe fb1c 	bl	80071b0 <Led_GPIO_Init>
			// TMR6_Init();

			#ifdef UART_DEBUG
			USART1_Init();
 8008b78:	f7ff faa4 	bl	80080c4 <USART1_Init>
		else
		{
			break;
		}

		WD_Refresh();
 8008b7c:	f000 f8ce 	bl	8008d1c <WD_Refresh>

		first_loop = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	71bb      	strb	r3, [r7, #6]
		if (HAL_GPIO_ReadPin(IO_PORT_USB_BUS,IO_PIN_USB_BUS))
 8008b84:	e7a9      	b.n	8008ada <CheckVoltages+0xa>
			break;
 8008b86:	bf00      	nop
	}
}
 8008b88:	bf00      	nop
 8008b8a:	3708      	adds	r7, #8
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	48000400 	.word	0x48000400
 8008b94:	48001000 	.word	0x48001000
 8008b98:	48000c00 	.word	0x48000c00
 8008b9c:	20000cac 	.word	0x20000cac

08008ba0 <BlinkSequence>:

void BlinkSequence(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
	BlinkLed(0);
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	f7fe fb67 	bl	8007278 <BlinkLed>
	TMR2_Sleep(100*10);
 8008baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bae:	f7ff f912 	bl	8007dd6 <TMR2_Sleep>
	BlinkLed(0);
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f7fe fb60 	bl	8007278 <BlinkLed>
	TMR2_Sleep(100*10);
 8008bb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bbc:	f7ff f90b 	bl	8007dd6 <TMR2_Sleep>
	BlinkLed(1);
 8008bc0:	2001      	movs	r0, #1
 8008bc2:	f7fe fb59 	bl	8007278 <BlinkLed>
	TMR2_Sleep(100*10);
 8008bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008bca:	f7ff f904 	bl	8007dd6 <TMR2_Sleep>
	BlinkLed(2);
 8008bce:	2002      	movs	r0, #2
 8008bd0:	f7fe fb52 	bl	8007278 <BlinkLed>
}
 8008bd4:	bf00      	nop
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <AllLights>:

void AllLights(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
	//TMR2_Sleep(500);
	HAL_GPIO_WritePin(IO_PORT_LED_BLUE, IO_PIN_LED_BLUE, GPIO_PIN_SET);
	//TMR2_Sleep(500);

#else
	HAL_GPIO_WritePin(IO_PORT_LED_BLUE, IO_PIN_LED_BLUE, GPIO_PIN_SET);
 8008bdc:	2201      	movs	r2, #1
 8008bde:	2110      	movs	r1, #16
 8008be0:	4810      	ldr	r0, [pc, #64]	; (8008c24 <AllLights+0x4c>)
 8008be2:	f7fa ff78 	bl	8003ad6 <HAL_GPIO_WritePin>
	//TMR2_Sleep(500);
	HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_RED, GPIO_PIN_SET);
 8008be6:	2201      	movs	r2, #1
 8008be8:	2108      	movs	r1, #8
 8008bea:	480e      	ldr	r0, [pc, #56]	; (8008c24 <AllLights+0x4c>)
 8008bec:	f7fa ff73 	bl	8003ad6 <HAL_GPIO_WritePin>
	//TMR2_Sleep(500);
	HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_GREEN, GPIO_PIN_SET);
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	2104      	movs	r1, #4
 8008bf4:	480b      	ldr	r0, [pc, #44]	; (8008c24 <AllLights+0x4c>)
 8008bf6:	f7fa ff6e 	bl	8003ad6 <HAL_GPIO_WritePin>
	TMR2_Sleep(2500);
 8008bfa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8008bfe:	f7ff f8ea 	bl	8007dd6 <TMR2_Sleep>

	HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_GREEN, GPIO_PIN_RESET);
 8008c02:	2200      	movs	r2, #0
 8008c04:	2104      	movs	r1, #4
 8008c06:	4807      	ldr	r0, [pc, #28]	; (8008c24 <AllLights+0x4c>)
 8008c08:	f7fa ff65 	bl	8003ad6 <HAL_GPIO_WritePin>
	//TMR2_Sleep(250);
	HAL_GPIO_WritePin(IO_PORT_LED_RED, IO_PIN_LED_RED, GPIO_PIN_RESET);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2108      	movs	r1, #8
 8008c10:	4804      	ldr	r0, [pc, #16]	; (8008c24 <AllLights+0x4c>)
 8008c12:	f7fa ff60 	bl	8003ad6 <HAL_GPIO_WritePin>
	//TMR2_Sleep(250);
	HAL_GPIO_WritePin(IO_PORT_LED_BLUE, IO_PIN_LED_BLUE, GPIO_PIN_RESET);
 8008c16:	2200      	movs	r2, #0
 8008c18:	2110      	movs	r1, #16
 8008c1a:	4802      	ldr	r0, [pc, #8]	; (8008c24 <AllLights+0x4c>)
 8008c1c:	f7fa ff5b 	bl	8003ad6 <HAL_GPIO_WritePin>
	//TMR2_Sleep(250);

#endif
}
 8008c20:	bf00      	nop
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	48000c00 	.word	0x48000c00

08008c28 <SystemClock_Config>:

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b096      	sub	sp, #88	; 0x58
 8008c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c38:	2302      	movs	r3, #2
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8008c40:	2302      	movs	r3, #2
 8008c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8008c44:	230a      	movs	r3, #10
 8008c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8008c48:	2307      	movs	r3, #7
 8008c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8008c50:	2304      	movs	r3, #4
 8008c52:	657b      	str	r3, [r7, #84]	; 0x54
  
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fb f869 	bl	8003d30 <HAL_RCC_OscConfig>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <SystemClock_Config+0x40>
  {
    Error_Handler();
 8008c64:	f7fe fb6b 	bl	800733e <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c68:	230f      	movs	r3, #15
 8008c6a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c70:	2300      	movs	r3, #0
 8008c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008c80:	463b      	mov	r3, r7
 8008c82:	2101      	movs	r1, #1
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fb fc17 	bl	80044b8 <HAL_RCC_ClockConfig>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8008c90:	f7fe fb55 	bl	800733e <Error_Handler>

  //HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_MSI, RCC_MCODIV_1);//
    /**Configure the main internal regulator output voltage
    */
    
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008c94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008c98:	f7fa ffc6 	bl	8003c28 <HAL_PWREx_ControlVoltageScaling>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8008ca2:	f7fe fb4c 	bl	800733e <Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);//Michael
 8008ca6:	f7fb fe23 	bl	80048f0 <HAL_RCC_GetHCLKFreq>
 8008caa:	4603      	mov	r3, r0
 8008cac:	4a09      	ldr	r2, [pc, #36]	; (8008cd4 <SystemClock_Config+0xac>)
 8008cae:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb2:	099b      	lsrs	r3, r3, #6
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7f9 feb4 	bl	8002a22 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);//Michael
 8008cba:	2004      	movs	r0, #4
 8008cbc:	f7f9 febe 	bl	8002a3c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);//Michael
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	210f      	movs	r1, #15
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	f7f9 fe6d 	bl	80029a6 <HAL_NVIC_SetPriority>
}
 8008ccc:	bf00      	nop
 8008cce:	3758      	adds	r7, #88	; 0x58
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	10624dd3 	.word	0x10624dd3

08008cd8 <WD_Init>:



void WD_Init(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
	I_WD.Init.Prescaler = IWDG_PRESCALER_256;
 8008cdc:	4b0c      	ldr	r3, [pc, #48]	; (8008d10 <WD_Init+0x38>)
 8008cde:	2206      	movs	r2, #6
 8008ce0:	605a      	str	r2, [r3, #4]
	I_WD.Init.Reload = 4095;
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <WD_Init+0x38>)
 8008ce4:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008ce8:	609a      	str	r2, [r3, #8]
	I_WD.Init.Window = 4095;
 8008cea:	4b09      	ldr	r3, [pc, #36]	; (8008d10 <WD_Init+0x38>)
 8008cec:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008cf0:	60da      	str	r2, [r3, #12]
	I_WD.Instance = IWDG;
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <WD_Init+0x38>)
 8008cf4:	4a07      	ldr	r2, [pc, #28]	; (8008d14 <WD_Init+0x3c>)
 8008cf6:	601a      	str	r2, [r3, #0]

	HAL_IWDG_Init(&I_WD);
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <WD_Init+0x38>)
 8008cfa:	f7fa ff03 	bl	8003b04 <HAL_IWDG_Init>

	DBGMCU->APB1FZR1 |= DBGMCU_APB1FZR1_DBG_IWDG_STOP;
 8008cfe:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <WD_Init+0x40>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	4a05      	ldr	r2, [pc, #20]	; (8008d18 <WD_Init+0x40>)
 8008d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d08:	6093      	str	r3, [r2, #8]
}
 8008d0a:	bf00      	nop
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20000c84 	.word	0x20000c84
 8008d14:	40003000 	.word	0x40003000
 8008d18:	e0042000 	.word	0xe0042000

08008d1c <WD_Refresh>:

void WD_Refresh(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&I_WD);
 8008d20:	4802      	ldr	r0, [pc, #8]	; (8008d2c <WD_Refresh+0x10>)
 8008d22:	f7fa ff35 	bl	8003b90 <HAL_IWDG_Refresh>
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000c84 	.word	0x20000c84

08008d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008d34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008d36:	e003      	b.n	8008d40 <LoopCopyDataInit>

08008d38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8008d3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8008d3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8008d3e:	3104      	adds	r1, #4

08008d40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8008d40:	480b      	ldr	r0, [pc, #44]	; (8008d70 <LoopForever+0xa>)
	ldr	r3, =_edata
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <LoopForever+0xe>)
	adds	r2, r0, r1
 8008d44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8008d46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8008d48:	d3f6      	bcc.n	8008d38 <CopyDataInit>
	ldr	r2, =_sbss
 8008d4a:	4a0b      	ldr	r2, [pc, #44]	; (8008d78 <LoopForever+0x12>)
	b	LoopFillZerobss
 8008d4c:	e002      	b.n	8008d54 <LoopFillZerobss>

08008d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8008d4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8008d50:	f842 3b04 	str.w	r3, [r2], #4

08008d54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8008d54:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <LoopForever+0x16>)
	cmp	r2, r3
 8008d56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8008d58:	d3f9      	bcc.n	8008d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d5a:	f000 f83f 	bl	8008ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d5e:	f000 f99f 	bl	80090a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d62:	f7ff fa8b 	bl	800827c <main>

08008d66 <LoopForever>:

LoopForever:
    b LoopForever
 8008d66:	e7fe      	b.n	8008d66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8008d68:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 8008d6c:	080098f4 	.word	0x080098f4
	ldr	r0, =_sdata
 8008d70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8008d74:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8008d78:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8008d7c:	20000cb8 	.word	0x20000cb8

08008d80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d80:	e7fe      	b.n	8008d80 <ADC1_IRQHandler>

08008d82 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8008d82:	b480      	push	{r7}
 8008d84:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d86:	bf00      	nop
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bc80      	pop	{r7}
 8008d8c:	4770      	bx	lr

08008d8e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d92:	e7fe      	b.n	8008d92 <HardFault_Handler+0x4>

08008d94 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d98:	e7fe      	b.n	8008d98 <MemManage_Handler+0x4>

08008d9a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d9e:	e7fe      	b.n	8008d9e <BusFault_Handler+0x4>

08008da0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008da4:	e7fe      	b.n	8008da4 <UsageFault_Handler+0x4>

08008da6 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8008da6:	b480      	push	{r7}
 8008da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008daa:	bf00      	nop
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8008db2:	b480      	push	{r7}
 8008db4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008db6:	bf00      	nop
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr

08008dbe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008dc2:	bf00      	nop
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008dce:	f7f8 fb61 	bl	8001494 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8008dd2:	f7f9 fe4f 	bl	8002a74 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dd6:	bf00      	nop
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008de0:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <SystemInit+0x50>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a11      	ldr	r2, [pc, #68]	; (8008e2c <SystemInit+0x50>)
 8008de6:	f043 0301 	orr.w	r3, r3, #1
 8008dea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008dec:	4b0f      	ldr	r3, [pc, #60]	; (8008e2c <SystemInit+0x50>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8008df2:	4b0e      	ldr	r3, [pc, #56]	; (8008e2c <SystemInit+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <SystemInit+0x50>)
 8008df8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008dfc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008e00:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <SystemInit+0x50>)
 8008e04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e08:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008e0a:	4b08      	ldr	r3, [pc, #32]	; (8008e2c <SystemInit+0x50>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a07      	ldr	r2, [pc, #28]	; (8008e2c <SystemInit+0x50>)
 8008e10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008e16:	4b05      	ldr	r3, [pc, #20]	; (8008e2c <SystemInit+0x50>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	619a      	str	r2, [r3, #24]
 
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <SystemInit+0x54>)
 8008e1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008e22:	609a      	str	r2, [r3, #8]
#endif
}
 8008e24:	bf00      	nop
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	e000ed00 	.word	0xe000ed00

08008e34 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8008e40:	2301      	movs	r3, #1
 8008e42:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8008e44:	e004      	b.n	8008e50 <ts_itoa+0x1c>
		div *= base;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
 8008e4e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d2f3      	bcs.n	8008e46 <ts_itoa+0x12>

	while (div != 0)
 8008e5e:	e029      	b.n	8008eb4 <ts_itoa+0x80>
	{
		int num = d/div;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e68:	613b      	str	r3, [r7, #16]
		d = d%div;
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e72:	fb01 f202 	mul.w	r2, r1, r2
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
		div /= base;
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8008e82:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2b09      	cmp	r3, #9
 8008e88:	dd0a      	ble.n	8008ea0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	1c58      	adds	r0, r3, #1
 8008e94:	68f9      	ldr	r1, [r7, #12]
 8008e96:	6008      	str	r0, [r1, #0]
 8008e98:	3237      	adds	r2, #55	; 0x37
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	e009      	b.n	8008eb4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	1c58      	adds	r0, r3, #1
 8008eaa:	68f9      	ldr	r1, [r7, #12]
 8008eac:	6008      	str	r0, [r1, #0]
 8008eae:	3230      	adds	r2, #48	; 0x30
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1d2      	bne.n	8008e60 <ts_itoa+0x2c>
	}
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	371c      	adds	r7, #28
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr
	...

08008ec8 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8008ed8:	e0bc      	b.n	8009054 <ts_formatstring+0x18c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b25      	cmp	r3, #37	; 0x25
 8008ee0:	f040 80b0 	bne.w	8009044 <ts_formatstring+0x17c>
		{
			switch (*(++fmt))
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b25      	cmp	r3, #37	; 0x25
 8008ef0:	f000 809e 	beq.w	8009030 <ts_formatstring+0x168>
 8008ef4:	2b25      	cmp	r3, #37	; 0x25
 8008ef6:	f2c0 80a1 	blt.w	800903c <ts_formatstring+0x174>
 8008efa:	2b78      	cmp	r3, #120	; 0x78
 8008efc:	f300 809e 	bgt.w	800903c <ts_formatstring+0x174>
 8008f00:	2b58      	cmp	r3, #88	; 0x58
 8008f02:	f2c0 809b 	blt.w	800903c <ts_formatstring+0x174>
 8008f06:	3b58      	subs	r3, #88	; 0x58
 8008f08:	2b20      	cmp	r3, #32
 8008f0a:	f200 8097 	bhi.w	800903c <ts_formatstring+0x174>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <ts_formatstring+0x4c>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08009019 	.word	0x08009019
 8008f18:	0800903d 	.word	0x0800903d
 8008f1c:	0800903d 	.word	0x0800903d
 8008f20:	0800903d 	.word	0x0800903d
 8008f24:	0800903d 	.word	0x0800903d
 8008f28:	0800903d 	.word	0x0800903d
 8008f2c:	0800903d 	.word	0x0800903d
 8008f30:	0800903d 	.word	0x0800903d
 8008f34:	0800903d 	.word	0x0800903d
 8008f38:	0800903d 	.word	0x0800903d
 8008f3c:	0800903d 	.word	0x0800903d
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	0800903d 	.word	0x0800903d
 8008f4c:	0800903d 	.word	0x0800903d
 8008f50:	0800903d 	.word	0x0800903d
 8008f54:	0800903d 	.word	0x0800903d
 8008f58:	08008fad 	.word	0x08008fad
 8008f5c:	0800903d 	.word	0x0800903d
 8008f60:	0800903d 	.word	0x0800903d
 8008f64:	0800903d 	.word	0x0800903d
 8008f68:	0800903d 	.word	0x0800903d
 8008f6c:	0800903d 	.word	0x0800903d
 8008f70:	0800903d 	.word	0x0800903d
 8008f74:	0800903d 	.word	0x0800903d
 8008f78:	0800903d 	.word	0x0800903d
 8008f7c:	0800903d 	.word	0x0800903d
 8008f80:	08008fdd 	.word	0x08008fdd
 8008f84:	0800903d 	.word	0x0800903d
 8008f88:	08009003 	.word	0x08009003
 8008f8c:	0800903d 	.word	0x0800903d
 8008f90:	0800903d 	.word	0x0800903d
 8008f94:	08009019 	.word	0x08009019
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1d1a      	adds	r2, r3, #4
 8008f9c:	607a      	str	r2, [r7, #4]
 8008f9e:	6819      	ldr	r1, [r3, #0]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	60fa      	str	r2, [r7, #12]
 8008fa6:	b2ca      	uxtb	r2, r1
 8008fa8:	701a      	strb	r2, [r3, #0]
				break;
 8008faa:	e047      	b.n	800903c <ts_formatstring+0x174>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	da07      	bge.n	8008fcc <ts_formatstring+0x104>
					{
						val *= -1;
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	425b      	negs	r3, r3
 8008fc0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	60fa      	str	r2, [r7, #12]
 8008fc8:	222d      	movs	r2, #45	; 0x2d
 8008fca:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8008fcc:	69f9      	ldr	r1, [r7, #28]
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	220a      	movs	r2, #10
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7ff ff2d 	bl	8008e34 <ts_itoa>
				}
				break;
 8008fda:	e02f      	b.n	800903c <ts_formatstring+0x174>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8008fe6:	e007      	b.n	8008ff8 <ts_formatstring+0x130>
					{
						*buf++ = *arg++;
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	1c53      	adds	r3, r2, #1
 8008fec:	61bb      	str	r3, [r7, #24]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1c59      	adds	r1, r3, #1
 8008ff2:	60f9      	str	r1, [r7, #12]
 8008ff4:	7812      	ldrb	r2, [r2, #0]
 8008ff6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1f3      	bne.n	8008fe8 <ts_formatstring+0x120>
					}
				}
				break;
 8009000:	e01c      	b.n	800903c <ts_formatstring+0x174>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	f107 030c 	add.w	r3, r7, #12
 800900e:	220a      	movs	r2, #10
 8009010:	4618      	mov	r0, r3
 8009012:	f7ff ff0f 	bl	8008e34 <ts_itoa>
				break;
 8009016:	e011      	b.n	800903c <ts_formatstring+0x174>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	1d1a      	adds	r2, r3, #4
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	f107 030c 	add.w	r3, r7, #12
 8009026:	2210      	movs	r2, #16
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff ff03 	bl	8008e34 <ts_itoa>
				break;
 800902e:	e005      	b.n	800903c <ts_formatstring+0x174>
			  case '%':
				  *buf++ = '%';
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	60fa      	str	r2, [r7, #12]
 8009036:	2225      	movs	r2, #37	; 0x25
 8009038:	701a      	strb	r2, [r3, #0]
				  break;
 800903a:	bf00      	nop
			}
			fmt++;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	3301      	adds	r3, #1
 8009040:	60bb      	str	r3, [r7, #8]
 8009042:	e007      	b.n	8009054 <ts_formatstring+0x18c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	1c53      	adds	r3, r2, #1
 8009048:	60bb      	str	r3, [r7, #8]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	1c59      	adds	r1, r3, #1
 800904e:	60f9      	str	r1, [r7, #12]
 8009050:	7812      	ldrb	r2, [r2, #0]
 8009052:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	f47f af3e 	bne.w	8008eda <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	1ad3      	subs	r3, r2, r3
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop

08009074 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8009074:	b40e      	push	{r1, r2, r3}
 8009076:	b580      	push	{r7, lr}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800907e:	f107 0320 	add.w	r3, r7, #32
 8009082:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	69f9      	ldr	r1, [r7, #28]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7ff ff1d 	bl	8008ec8 <ts_formatstring>
 800908e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8009090:	68fb      	ldr	r3, [r7, #12]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909c:	b003      	add	sp, #12
 800909e:	4770      	bx	lr

080090a0 <__libc_init_array>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4d0d      	ldr	r5, [pc, #52]	; (80090d8 <__libc_init_array+0x38>)
 80090a4:	4c0d      	ldr	r4, [pc, #52]	; (80090dc <__libc_init_array+0x3c>)
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	2600      	movs	r6, #0
 80090ac:	42a6      	cmp	r6, r4
 80090ae:	d109      	bne.n	80090c4 <__libc_init_array+0x24>
 80090b0:	4d0b      	ldr	r5, [pc, #44]	; (80090e0 <__libc_init_array+0x40>)
 80090b2:	4c0c      	ldr	r4, [pc, #48]	; (80090e4 <__libc_init_array+0x44>)
 80090b4:	f000 fa20 	bl	80094f8 <_init>
 80090b8:	1b64      	subs	r4, r4, r5
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	2600      	movs	r6, #0
 80090be:	42a6      	cmp	r6, r4
 80090c0:	d105      	bne.n	80090ce <__libc_init_array+0x2e>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c8:	4798      	blx	r3
 80090ca:	3601      	adds	r6, #1
 80090cc:	e7ee      	b.n	80090ac <__libc_init_array+0xc>
 80090ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d2:	4798      	blx	r3
 80090d4:	3601      	adds	r6, #1
 80090d6:	e7f2      	b.n	80090be <__libc_init_array+0x1e>
 80090d8:	080098ec 	.word	0x080098ec
 80090dc:	080098ec 	.word	0x080098ec
 80090e0:	080098ec 	.word	0x080098ec
 80090e4:	080098f0 	.word	0x080098f0

080090e8 <memcpy>:
 80090e8:	440a      	add	r2, r1
 80090ea:	4291      	cmp	r1, r2
 80090ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80090f0:	d100      	bne.n	80090f4 <memcpy+0xc>
 80090f2:	4770      	bx	lr
 80090f4:	b510      	push	{r4, lr}
 80090f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090fe:	4291      	cmp	r1, r2
 8009100:	d1f9      	bne.n	80090f6 <memcpy+0xe>
 8009102:	bd10      	pop	{r4, pc}

08009104 <memset>:
 8009104:	4402      	add	r2, r0
 8009106:	4603      	mov	r3, r0
 8009108:	4293      	cmp	r3, r2
 800910a:	d100      	bne.n	800910e <memset+0xa>
 800910c:	4770      	bx	lr
 800910e:	f803 1b01 	strb.w	r1, [r3], #1
 8009112:	e7f9      	b.n	8009108 <memset+0x4>

08009114 <__errno>:
 8009114:	4b01      	ldr	r3, [pc, #4]	; (800911c <__errno+0x8>)
 8009116:	6818      	ldr	r0, [r3, #0]
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	20000004 	.word	0x20000004

08009120 <log>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	f000 f82f 	bl	8009188 <__ieee754_log>
 800912a:	4622      	mov	r2, r4
 800912c:	4606      	mov	r6, r0
 800912e:	460f      	mov	r7, r1
 8009130:	462b      	mov	r3, r5
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 fca1 	bl	8000a7c <__aeabi_dcmpun>
 800913a:	b998      	cbnz	r0, 8009164 <log+0x44>
 800913c:	2200      	movs	r2, #0
 800913e:	2300      	movs	r3, #0
 8009140:	4620      	mov	r0, r4
 8009142:	4629      	mov	r1, r5
 8009144:	f7f7 fc90 	bl	8000a68 <__aeabi_dcmpgt>
 8009148:	b960      	cbnz	r0, 8009164 <log+0x44>
 800914a:	2200      	movs	r2, #0
 800914c:	2300      	movs	r3, #0
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fc61 	bl	8000a18 <__aeabi_dcmpeq>
 8009156:	b140      	cbz	r0, 800916a <log+0x4a>
 8009158:	f7ff ffdc 	bl	8009114 <__errno>
 800915c:	4f07      	ldr	r7, [pc, #28]	; (800917c <log+0x5c>)
 800915e:	2322      	movs	r3, #34	; 0x22
 8009160:	6003      	str	r3, [r0, #0]
 8009162:	2600      	movs	r6, #0
 8009164:	4630      	mov	r0, r6
 8009166:	4639      	mov	r1, r7
 8009168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800916a:	f7ff ffd3 	bl	8009114 <__errno>
 800916e:	2321      	movs	r3, #33	; 0x21
 8009170:	6003      	str	r3, [r0, #0]
 8009172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009176:	4802      	ldr	r0, [pc, #8]	; (8009180 <log+0x60>)
 8009178:	f000 b9b8 	b.w	80094ec <nan>
 800917c:	fff00000 	.word	0xfff00000
 8009180:	080098e0 	.word	0x080098e0
 8009184:	00000000 	.word	0x00000000

08009188 <__ieee754_log>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009190:	b087      	sub	sp, #28
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	460d      	mov	r5, r1
 8009198:	da24      	bge.n	80091e4 <__ieee754_log+0x5c>
 800919a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800919e:	4304      	orrs	r4, r0
 80091a0:	d108      	bne.n	80091b4 <__ieee754_log+0x2c>
 80091a2:	49cd      	ldr	r1, [pc, #820]	; (80094d8 <__ieee754_log+0x350>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	2300      	movs	r3, #0
 80091a8:	2000      	movs	r0, #0
 80091aa:	f7f7 faf7 	bl	800079c <__aeabi_ddiv>
 80091ae:	b007      	add	sp, #28
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b4:	2900      	cmp	r1, #0
 80091b6:	da04      	bge.n	80091c2 <__ieee754_log+0x3a>
 80091b8:	f7f7 f80e 	bl	80001d8 <__aeabi_dsub>
 80091bc:	2200      	movs	r2, #0
 80091be:	2300      	movs	r3, #0
 80091c0:	e7f3      	b.n	80091aa <__ieee754_log+0x22>
 80091c2:	4bc6      	ldr	r3, [pc, #792]	; (80094dc <__ieee754_log+0x354>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	f7f7 f9bf 	bl	8000548 <__aeabi_dmul>
 80091ca:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80091ce:	4602      	mov	r2, r0
 80091d0:	460b      	mov	r3, r1
 80091d2:	460d      	mov	r5, r1
 80091d4:	49c2      	ldr	r1, [pc, #776]	; (80094e0 <__ieee754_log+0x358>)
 80091d6:	428d      	cmp	r5, r1
 80091d8:	dd06      	ble.n	80091e8 <__ieee754_log+0x60>
 80091da:	4610      	mov	r0, r2
 80091dc:	4619      	mov	r1, r3
 80091de:	f7f6 fffd 	bl	80001dc <__adddf3>
 80091e2:	e7e4      	b.n	80091ae <__ieee754_log+0x26>
 80091e4:	2600      	movs	r6, #0
 80091e6:	e7f5      	b.n	80091d4 <__ieee754_log+0x4c>
 80091e8:	152c      	asrs	r4, r5, #20
 80091ea:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80091ee:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80091f2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80091f6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80091fa:	4426      	add	r6, r4
 80091fc:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 8009200:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 8009204:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8009208:	ea41 0305 	orr.w	r3, r1, r5
 800920c:	4610      	mov	r0, r2
 800920e:	4619      	mov	r1, r3
 8009210:	2200      	movs	r2, #0
 8009212:	4bb4      	ldr	r3, [pc, #720]	; (80094e4 <__ieee754_log+0x35c>)
 8009214:	f7f6 ffe0 	bl	80001d8 <__aeabi_dsub>
 8009218:	1cab      	adds	r3, r5, #2
 800921a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921e:	2b02      	cmp	r3, #2
 8009220:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8009224:	4682      	mov	sl, r0
 8009226:	468b      	mov	fp, r1
 8009228:	f04f 0200 	mov.w	r2, #0
 800922c:	dc53      	bgt.n	80092d6 <__ieee754_log+0x14e>
 800922e:	2300      	movs	r3, #0
 8009230:	f7f7 fbf2 	bl	8000a18 <__aeabi_dcmpeq>
 8009234:	b1d0      	cbz	r0, 800926c <__ieee754_log+0xe4>
 8009236:	2c00      	cmp	r4, #0
 8009238:	f000 8122 	beq.w	8009480 <__ieee754_log+0x2f8>
 800923c:	4620      	mov	r0, r4
 800923e:	f7f7 f919 	bl	8000474 <__aeabi_i2d>
 8009242:	a391      	add	r3, pc, #580	; (adr r3, 8009488 <__ieee754_log+0x300>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	4606      	mov	r6, r0
 800924a:	460f      	mov	r7, r1
 800924c:	f7f7 f97c 	bl	8000548 <__aeabi_dmul>
 8009250:	a38f      	add	r3, pc, #572	; (adr r3, 8009490 <__ieee754_log+0x308>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	4604      	mov	r4, r0
 8009258:	460d      	mov	r5, r1
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f7 f973 	bl	8000548 <__aeabi_dmul>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	e7b8      	b.n	80091de <__ieee754_log+0x56>
 800926c:	a38a      	add	r3, pc, #552	; (adr r3, 8009498 <__ieee754_log+0x310>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	4650      	mov	r0, sl
 8009274:	4659      	mov	r1, fp
 8009276:	f7f7 f967 	bl	8000548 <__aeabi_dmul>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	2000      	movs	r0, #0
 8009280:	4999      	ldr	r1, [pc, #612]	; (80094e8 <__ieee754_log+0x360>)
 8009282:	f7f6 ffa9 	bl	80001d8 <__aeabi_dsub>
 8009286:	4652      	mov	r2, sl
 8009288:	4606      	mov	r6, r0
 800928a:	460f      	mov	r7, r1
 800928c:	465b      	mov	r3, fp
 800928e:	4650      	mov	r0, sl
 8009290:	4659      	mov	r1, fp
 8009292:	f7f7 f959 	bl	8000548 <__aeabi_dmul>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4630      	mov	r0, r6
 800929c:	4639      	mov	r1, r7
 800929e:	f7f7 f953 	bl	8000548 <__aeabi_dmul>
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	b914      	cbnz	r4, 80092ae <__ieee754_log+0x126>
 80092a8:	4632      	mov	r2, r6
 80092aa:	463b      	mov	r3, r7
 80092ac:	e0a2      	b.n	80093f4 <__ieee754_log+0x26c>
 80092ae:	4620      	mov	r0, r4
 80092b0:	f7f7 f8e0 	bl	8000474 <__aeabi_i2d>
 80092b4:	a374      	add	r3, pc, #464	; (adr r3, 8009488 <__ieee754_log+0x300>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	4680      	mov	r8, r0
 80092bc:	4689      	mov	r9, r1
 80092be:	f7f7 f943 	bl	8000548 <__aeabi_dmul>
 80092c2:	a373      	add	r3, pc, #460	; (adr r3, 8009490 <__ieee754_log+0x308>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f7 f93a 	bl	8000548 <__aeabi_dmul>
 80092d4:	e0a7      	b.n	8009426 <__ieee754_log+0x29e>
 80092d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092da:	f7f6 ff7f 	bl	80001dc <__adddf3>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	4650      	mov	r0, sl
 80092e4:	4659      	mov	r1, fp
 80092e6:	f7f7 fa59 	bl	800079c <__aeabi_ddiv>
 80092ea:	e9cd 0100 	strd	r0, r1, [sp]
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7f7 f8c0 	bl	8000474 <__aeabi_i2d>
 80092f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fc:	4610      	mov	r0, r2
 80092fe:	4619      	mov	r1, r3
 8009300:	f7f7 f922 	bl	8000548 <__aeabi_dmul>
 8009304:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009308:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	4602      	mov	r2, r0
 8009310:	460b      	mov	r3, r1
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	f7f7 f917 	bl	8000548 <__aeabi_dmul>
 800931a:	a361      	add	r3, pc, #388	; (adr r3, 80094a0 <__ieee754_log+0x318>)
 800931c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	f7f7 f910 	bl	8000548 <__aeabi_dmul>
 8009328:	a35f      	add	r3, pc, #380	; (adr r3, 80094a8 <__ieee754_log+0x320>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	f7f6 ff55 	bl	80001dc <__adddf3>
 8009332:	4642      	mov	r2, r8
 8009334:	464b      	mov	r3, r9
 8009336:	f7f7 f907 	bl	8000548 <__aeabi_dmul>
 800933a:	a35d      	add	r3, pc, #372	; (adr r3, 80094b0 <__ieee754_log+0x328>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f6 ff4c 	bl	80001dc <__adddf3>
 8009344:	4642      	mov	r2, r8
 8009346:	464b      	mov	r3, r9
 8009348:	f7f7 f8fe 	bl	8000548 <__aeabi_dmul>
 800934c:	a35a      	add	r3, pc, #360	; (adr r3, 80094b8 <__ieee754_log+0x330>)
 800934e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009352:	f7f6 ff43 	bl	80001dc <__adddf3>
 8009356:	4632      	mov	r2, r6
 8009358:	463b      	mov	r3, r7
 800935a:	f7f7 f8f5 	bl	8000548 <__aeabi_dmul>
 800935e:	a358      	add	r3, pc, #352	; (adr r3, 80094c0 <__ieee754_log+0x338>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	4640      	mov	r0, r8
 800936a:	4649      	mov	r1, r9
 800936c:	f7f7 f8ec 	bl	8000548 <__aeabi_dmul>
 8009370:	a355      	add	r3, pc, #340	; (adr r3, 80094c8 <__ieee754_log+0x340>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f6 ff31 	bl	80001dc <__adddf3>
 800937a:	4642      	mov	r2, r8
 800937c:	464b      	mov	r3, r9
 800937e:	f7f7 f8e3 	bl	8000548 <__aeabi_dmul>
 8009382:	a353      	add	r3, pc, #332	; (adr r3, 80094d0 <__ieee754_log+0x348>)
 8009384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009388:	f7f6 ff28 	bl	80001dc <__adddf3>
 800938c:	4642      	mov	r2, r8
 800938e:	464b      	mov	r3, r9
 8009390:	f7f7 f8da 	bl	8000548 <__aeabi_dmul>
 8009394:	460b      	mov	r3, r1
 8009396:	4602      	mov	r2, r0
 8009398:	4639      	mov	r1, r7
 800939a:	4630      	mov	r0, r6
 800939c:	f7f6 ff1e 	bl	80001dc <__adddf3>
 80093a0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80093a4:	9b05      	ldr	r3, [sp, #20]
 80093a6:	3551      	adds	r5, #81	; 0x51
 80093a8:	431d      	orrs	r5, r3
 80093aa:	2d00      	cmp	r5, #0
 80093ac:	4680      	mov	r8, r0
 80093ae:	4689      	mov	r9, r1
 80093b0:	dd48      	ble.n	8009444 <__ieee754_log+0x2bc>
 80093b2:	4b4d      	ldr	r3, [pc, #308]	; (80094e8 <__ieee754_log+0x360>)
 80093b4:	2200      	movs	r2, #0
 80093b6:	4650      	mov	r0, sl
 80093b8:	4659      	mov	r1, fp
 80093ba:	f7f7 f8c5 	bl	8000548 <__aeabi_dmul>
 80093be:	4652      	mov	r2, sl
 80093c0:	465b      	mov	r3, fp
 80093c2:	f7f7 f8c1 	bl	8000548 <__aeabi_dmul>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4606      	mov	r6, r0
 80093cc:	460f      	mov	r7, r1
 80093ce:	4640      	mov	r0, r8
 80093d0:	4649      	mov	r1, r9
 80093d2:	f7f6 ff03 	bl	80001dc <__adddf3>
 80093d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093da:	f7f7 f8b5 	bl	8000548 <__aeabi_dmul>
 80093de:	4680      	mov	r8, r0
 80093e0:	4689      	mov	r9, r1
 80093e2:	b964      	cbnz	r4, 80093fe <__ieee754_log+0x276>
 80093e4:	4602      	mov	r2, r0
 80093e6:	460b      	mov	r3, r1
 80093e8:	4630      	mov	r0, r6
 80093ea:	4639      	mov	r1, r7
 80093ec:	f7f6 fef4 	bl	80001d8 <__aeabi_dsub>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4650      	mov	r0, sl
 80093f6:	4659      	mov	r1, fp
 80093f8:	f7f6 feee 	bl	80001d8 <__aeabi_dsub>
 80093fc:	e6d7      	b.n	80091ae <__ieee754_log+0x26>
 80093fe:	a322      	add	r3, pc, #136	; (adr r3, 8009488 <__ieee754_log+0x300>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009408:	f7f7 f89e 	bl	8000548 <__aeabi_dmul>
 800940c:	a320      	add	r3, pc, #128	; (adr r3, 8009490 <__ieee754_log+0x308>)
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	4604      	mov	r4, r0
 8009414:	460d      	mov	r5, r1
 8009416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941a:	f7f7 f895 	bl	8000548 <__aeabi_dmul>
 800941e:	4642      	mov	r2, r8
 8009420:	464b      	mov	r3, r9
 8009422:	f7f6 fedb 	bl	80001dc <__adddf3>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4630      	mov	r0, r6
 800942c:	4639      	mov	r1, r7
 800942e:	f7f6 fed3 	bl	80001d8 <__aeabi_dsub>
 8009432:	4652      	mov	r2, sl
 8009434:	465b      	mov	r3, fp
 8009436:	f7f6 fecf 	bl	80001d8 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	e7d9      	b.n	80093f8 <__ieee754_log+0x270>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4650      	mov	r0, sl
 800944a:	4659      	mov	r1, fp
 800944c:	f7f6 fec4 	bl	80001d8 <__aeabi_dsub>
 8009450:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009454:	f7f7 f878 	bl	8000548 <__aeabi_dmul>
 8009458:	4606      	mov	r6, r0
 800945a:	460f      	mov	r7, r1
 800945c:	2c00      	cmp	r4, #0
 800945e:	f43f af23 	beq.w	80092a8 <__ieee754_log+0x120>
 8009462:	a309      	add	r3, pc, #36	; (adr r3, 8009488 <__ieee754_log+0x300>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946c:	f7f7 f86c 	bl	8000548 <__aeabi_dmul>
 8009470:	a307      	add	r3, pc, #28	; (adr r3, 8009490 <__ieee754_log+0x308>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800947e:	e727      	b.n	80092d0 <__ieee754_log+0x148>
 8009480:	2000      	movs	r0, #0
 8009482:	2100      	movs	r1, #0
 8009484:	e693      	b.n	80091ae <__ieee754_log+0x26>
 8009486:	bf00      	nop
 8009488:	fee00000 	.word	0xfee00000
 800948c:	3fe62e42 	.word	0x3fe62e42
 8009490:	35793c76 	.word	0x35793c76
 8009494:	3dea39ef 	.word	0x3dea39ef
 8009498:	55555555 	.word	0x55555555
 800949c:	3fd55555 	.word	0x3fd55555
 80094a0:	df3e5244 	.word	0xdf3e5244
 80094a4:	3fc2f112 	.word	0x3fc2f112
 80094a8:	96cb03de 	.word	0x96cb03de
 80094ac:	3fc74664 	.word	0x3fc74664
 80094b0:	94229359 	.word	0x94229359
 80094b4:	3fd24924 	.word	0x3fd24924
 80094b8:	55555593 	.word	0x55555593
 80094bc:	3fe55555 	.word	0x3fe55555
 80094c0:	d078c69f 	.word	0xd078c69f
 80094c4:	3fc39a09 	.word	0x3fc39a09
 80094c8:	1d8e78af 	.word	0x1d8e78af
 80094cc:	3fcc71c5 	.word	0x3fcc71c5
 80094d0:	9997fa04 	.word	0x9997fa04
 80094d4:	3fd99999 	.word	0x3fd99999
 80094d8:	c3500000 	.word	0xc3500000
 80094dc:	43500000 	.word	0x43500000
 80094e0:	7fefffff 	.word	0x7fefffff
 80094e4:	3ff00000 	.word	0x3ff00000
 80094e8:	3fe00000 	.word	0x3fe00000

080094ec <nan>:
 80094ec:	4901      	ldr	r1, [pc, #4]	; (80094f4 <nan+0x8>)
 80094ee:	2000      	movs	r0, #0
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	7ff80000 	.word	0x7ff80000

080094f8 <_init>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr

08009504 <_fini>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr
